// Code generated from /Users/liucheng/workspace_go/elastic-sql-go/src/parser/ElasticSQL.g4 by ANTLR 4.9.2. DO NOT EDIT.

package parser // ElasticSQL

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 198, 1749,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 3, 2, 3, 2, 3, 2, 7, 2, 200, 10, 2, 12, 2, 14, 2,
	203, 11, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 221, 10, 3, 3, 4, 3, 4, 5, 4,
	225, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 232, 10, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 239, 10, 4, 5, 4, 241, 10, 4, 3, 4, 5, 4, 244,
	10, 4, 3, 4, 3, 4, 3, 4, 7, 4, 249, 10, 4, 12, 4, 14, 4, 252, 11, 4, 3,
	4, 5, 4, 255, 10, 4, 3, 4, 5, 4, 258, 10, 4, 3, 4, 3, 4, 5, 4, 262, 10,
	4, 3, 4, 3, 4, 5, 4, 266, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 272, 10,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 278, 10, 4, 12, 4, 14, 4, 281, 11, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 286, 10, 4, 5, 4, 288, 10, 4, 3, 4, 5, 4, 291,
	10, 4, 3, 4, 5, 4, 294, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 301,
	10, 4, 12, 4, 14, 4, 304, 11, 4, 5, 4, 306, 10, 4, 3, 4, 3, 4, 5, 4, 310,
	10, 4, 3, 4, 3, 4, 3, 4, 5, 4, 315, 10, 4, 3, 4, 3, 4, 5, 4, 319, 10, 4,
	5, 4, 321, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 328, 10, 4, 3, 4,
	5, 4, 331, 10, 4, 5, 4, 333, 10, 4, 5, 4, 335, 10, 4, 5, 4, 337, 10, 4,
	3, 4, 3, 4, 5, 4, 341, 10, 4, 3, 4, 5, 4, 344, 10, 4, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 357, 10, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 365, 10, 7, 3, 7, 3, 7, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 7, 8, 374, 10, 8, 12, 8, 14, 8, 377, 11, 8, 3, 8, 3,
	8, 5, 8, 381, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 388, 10, 9, 12,
	9, 14, 9, 391, 11, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 7, 10,
	400, 10, 10, 12, 10, 14, 10, 403, 11, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 414, 10, 12, 12, 12, 14, 12, 417,
	11, 12, 3, 12, 3, 12, 3, 12, 5, 12, 422, 10, 12, 3, 13, 3, 13, 5, 13, 426,
	10, 13, 3, 13, 5, 13, 429, 10, 13, 3, 13, 3, 13, 5, 13, 433, 10, 13, 3,
	14, 3, 14, 5, 14, 437, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	5, 14, 445, 10, 14, 3, 14, 3, 14, 5, 14, 449, 10, 14, 5, 14, 451, 10, 14,
	3, 14, 5, 14, 454, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5,
	15, 462, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 470,
	10, 15, 12, 15, 14, 15, 473, 11, 15, 3, 16, 5, 16, 476, 10, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 5, 16, 482, 10, 16, 3, 17, 3, 17, 3, 17, 5, 17, 487,
	10, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 5, 18, 494, 10, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 504, 10, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 511, 10, 18, 5, 18, 513, 10, 18, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 20, 3, 20, 7, 20, 521, 10, 20, 12, 20, 14,
	20, 524, 11, 20, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 7, 22, 531, 10, 22,
	12, 22, 14, 22, 534, 11, 22, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 550, 10,
	24, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 556, 10, 25, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 5, 26, 563, 10, 26, 3, 26, 3, 26, 3, 27, 3, 27, 3, 28, 3,
	28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 576, 10, 29, 12, 29, 14,
	29, 579, 11, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 5, 31,
	588, 10, 31, 5, 31, 590, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 7,
	31, 597, 10, 31, 12, 31, 14, 31, 600, 11, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 5, 31, 609, 10, 31, 3, 31, 3, 31, 7, 31, 613, 10,
	31, 12, 31, 14, 31, 616, 11, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5,
	31, 623, 10, 31, 5, 31, 625, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	5, 31, 632, 10, 31, 3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 646, 10, 34, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 5, 35, 654, 10, 35, 3, 36, 3, 36, 3, 36, 3, 37, 3,
	37, 5, 37, 661, 10, 37, 3, 37, 5, 37, 664, 10, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 5, 37, 670, 10, 37, 3, 37, 5, 37, 673, 10, 37, 3, 37, 5, 37, 676,
	10, 37, 3, 38, 3, 38, 5, 38, 680, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 7,
	38, 686, 10, 38, 12, 38, 14, 38, 689, 11, 38, 3, 38, 3, 38, 5, 38, 693,
	10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 700, 10, 38, 12, 38,
	14, 38, 703, 11, 38, 3, 38, 3, 38, 5, 38, 707, 10, 38, 5, 38, 709, 10,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 715, 10, 38, 5, 38, 717, 10, 38,
	3, 38, 3, 38, 3, 39, 3, 39, 5, 39, 723, 10, 39, 3, 40, 3, 40, 5, 40, 727,
	10, 40, 3, 40, 3, 40, 3, 40, 7, 40, 732, 10, 40, 12, 40, 14, 40, 735, 11,
	40, 3, 41, 3, 41, 5, 41, 739, 10, 41, 3, 41, 5, 41, 742, 10, 41, 3, 41,
	3, 41, 3, 41, 7, 41, 747, 10, 41, 12, 41, 14, 41, 750, 11, 41, 3, 41, 3,
	41, 3, 41, 5, 41, 755, 10, 41, 3, 41, 5, 41, 758, 10, 41, 3, 41, 3, 41,
	5, 41, 762, 10, 41, 3, 41, 3, 41, 5, 41, 766, 10, 41, 3, 41, 5, 41, 769,
	10, 41, 3, 42, 3, 42, 5, 42, 773, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 784, 10, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 793, 10, 42, 3, 42, 5, 42, 796, 10,
	42, 3, 42, 5, 42, 799, 10, 42, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 7, 44,
	806, 10, 44, 12, 44, 14, 44, 809, 11, 44, 3, 44, 3, 44, 5, 44, 813, 10,
	44, 3, 44, 5, 44, 816, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46,
	3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 832, 10,
	47, 3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 838, 10, 47, 12, 47, 14, 47, 841,
	11, 47, 3, 47, 3, 47, 5, 47, 845, 10, 47, 3, 47, 5, 47, 848, 10, 47, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 855, 10, 48, 12, 48, 14, 48, 858,
	11, 48, 3, 48, 3, 48, 5, 48, 862, 10, 48, 3, 49, 3, 49, 5, 49, 866, 10,
	49, 3, 49, 5, 49, 869, 10, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 5, 50, 878, 10, 50, 3, 51, 5, 51, 881, 10, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 7, 51, 888, 10, 51, 12, 51, 14, 51, 891, 11, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 900, 10, 51, 12, 51, 14,
	51, 903, 11, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 920, 10, 51, 7,
	51, 922, 10, 51, 12, 51, 14, 51, 925, 11, 51, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 940,
	10, 53, 3, 53, 5, 53, 943, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3,
	54, 3, 54, 7, 54, 952, 10, 54, 12, 54, 14, 54, 955, 11, 54, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 963, 10, 55, 3, 55, 3, 55, 3, 56, 3,
	56, 5, 56, 969, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57,
	977, 10, 57, 3, 57, 5, 57, 980, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5,
	57, 986, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 7, 58,
	995, 10, 58, 12, 58, 14, 58, 998, 11, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3,
	59, 3, 59, 5, 59, 1006, 10, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 5, 60,
	1013, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1021, 10,
	61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1028, 10, 61, 3, 61, 3, 61,
	3, 61, 3, 61, 5, 61, 1034, 10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5,
	61, 1041, 10, 61, 5, 61, 1043, 10, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 5, 62, 1053, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3,
	62, 5, 62, 1060, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 1066, 10, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 1072, 10, 62, 3, 62, 3, 62, 3, 62, 3,
	62, 3, 62, 5, 62, 1079, 10, 62, 5, 62, 1081, 10, 62, 3, 62, 3, 62, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 1105,
	10, 63, 12, 63, 14, 63, 1108, 11, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 7, 63, 1118, 10, 63, 12, 63, 14, 63, 1121, 11, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 1128, 10, 63, 12, 63, 14, 63,
	1131, 11, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 6,
	64, 1141, 10, 64, 13, 64, 14, 64, 1142, 3, 64, 3, 64, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 7, 65, 1152, 10, 65, 12, 65, 14, 65, 1155, 11, 65, 3,
	65, 3, 65, 5, 65, 1159, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1164, 10, 65,
	3, 65, 3, 65, 5, 65, 1168, 10, 65, 3, 65, 5, 65, 1171, 10, 65, 3, 66, 3,
	66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 7, 66, 1180, 10, 66, 12, 66, 14,
	66, 1183, 11, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67, 1191,
	10, 67, 12, 67, 14, 67, 1194, 11, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 67, 3, 67, 5, 67, 1203, 10, 67, 5, 67, 1205, 10, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 7, 67, 1211, 10, 67, 12, 67, 14, 67, 1214, 11, 67, 3, 67, 3,
	67, 5, 67, 1218, 10, 67, 3, 67, 3, 67, 5, 67, 1222, 10, 67, 3, 67, 5, 67,
	1225, 10, 67, 3, 67, 5, 67, 1228, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5,
	67, 1234, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 67, 7, 67, 1245, 10, 67, 12, 67, 14, 67, 1248, 11, 67, 5, 67, 1250,
	10, 67, 3, 67, 3, 67, 5, 67, 1254, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 67, 5, 67, 1261, 10, 67, 3, 67, 5, 67, 1264, 10, 67, 5, 67, 1266, 10,
	67, 3, 67, 5, 67, 1269, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67, 1275,
	10, 67, 12, 67, 14, 67, 1278, 11, 67, 5, 67, 1280, 10, 67, 3, 67, 3, 67,
	5, 67, 1284, 10, 67, 3, 68, 3, 68, 5, 68, 1288, 10, 68, 3, 68, 5, 68, 1291,
	10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1298, 10, 68, 3, 68,
	3, 68, 3, 68, 5, 68, 1303, 10, 68, 5, 68, 1305, 10, 68, 3, 68, 3, 68, 5,
	68, 1309, 10, 68, 3, 68, 3, 68, 5, 68, 1313, 10, 68, 3, 68, 3, 68, 5, 68,
	1317, 10, 68, 3, 69, 3, 69, 3, 69, 3, 69, 7, 69, 1323, 10, 69, 12, 69,
	14, 69, 1326, 11, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70,
	1334, 10, 70, 3, 71, 3, 71, 3, 71, 3, 71, 7, 71, 1340, 10, 71, 12, 71,
	14, 71, 1343, 11, 71, 3, 71, 3, 71, 3, 72, 3, 72, 3, 72, 3, 72, 7, 72,
	1351, 10, 72, 12, 72, 14, 72, 1354, 11, 72, 3, 72, 5, 72, 1357, 10, 72,
	3, 72, 3, 72, 3, 72, 3, 72, 7, 72, 1363, 10, 72, 12, 72, 14, 72, 1366,
	11, 72, 5, 72, 1368, 10, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72,
	3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 7, 72, 1384, 10,
	72, 12, 72, 14, 72, 1387, 11, 72, 3, 72, 3, 72, 5, 72, 1391, 10, 72, 3,
	72, 3, 72, 5, 72, 1395, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73,
	3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 7, 73, 1408, 10, 73, 12, 73, 14, 73,
	1411, 11, 73, 3, 73, 3, 73, 5, 73, 1415, 10, 73, 3, 73, 3, 73, 3, 73, 3,
	73, 3, 73, 3, 73, 3, 73, 3, 73, 7, 73, 1425, 10, 73, 12, 73, 14, 73, 1428,
	11, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73,
	3, 73, 7, 73, 1440, 10, 73, 12, 73, 14, 73, 1443, 11, 73, 3, 73, 3, 73,
	5, 73, 1447, 10, 73, 3, 74, 3, 74, 3, 74, 3, 74, 7, 74, 1453, 10, 74, 12,
	74, 14, 74, 1456, 11, 74, 3, 74, 5, 74, 1459, 10, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 7, 74, 1470, 10, 74, 12,
	74, 14, 74, 1473, 11, 74, 5, 74, 1475, 10, 74, 3, 74, 3, 74, 5, 74, 1479,
	10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 7, 75, 1486, 10, 75, 12, 75,
	14, 75, 1489, 11, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75,
	3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 1506, 10,
	75, 3, 75, 3, 75, 5, 75, 1510, 10, 75, 3, 76, 3, 76, 5, 76, 1514, 10, 76,
	3, 76, 3, 76, 3, 76, 7, 76, 1519, 10, 76, 12, 76, 14, 76, 1522, 11, 76,
	3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 7, 77, 1531, 10, 77, 12,
	77, 14, 77, 1534, 11, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3,
	77, 7, 77, 1543, 10, 77, 12, 77, 14, 77, 1546, 11, 77, 5, 77, 1548, 10,
	77, 3, 78, 3, 78, 3, 78, 3, 78, 7, 78, 1554, 10, 78, 12, 78, 14, 78, 1557,
	11, 78, 3, 78, 3, 78, 3, 78, 3, 78, 7, 78, 1563, 10, 78, 12, 78, 14, 78,
	1566, 11, 78, 3, 79, 3, 79, 5, 79, 1570, 10, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 7, 79, 1576, 10, 79, 12, 79, 14, 79, 1579, 11, 79, 3, 79, 3, 79, 5,
	79, 1583, 10, 79, 3, 79, 5, 79, 1586, 10, 79, 3, 80, 3, 80, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 80, 3, 80, 5, 80, 1596, 10, 80, 3, 80, 3, 80, 3, 80, 5,
	80, 1601, 10, 80, 3, 80, 5, 80, 1604, 10, 80, 3, 80, 3, 80, 3, 80, 7, 80,
	1609, 10, 80, 12, 80, 14, 80, 1612, 11, 80, 3, 81, 3, 81, 3, 81, 5, 81,
	1617, 10, 81, 3, 81, 5, 81, 1620, 10, 81, 3, 82, 3, 82, 5, 82, 1624, 10,
	82, 3, 82, 3, 82, 3, 82, 5, 82, 1629, 10, 82, 3, 82, 3, 82, 7, 82, 1633,
	10, 82, 12, 82, 14, 82, 1636, 11, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1641,
	10, 82, 5, 82, 1643, 10, 82, 3, 82, 3, 82, 5, 82, 1647, 10, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 5, 82, 1653, 10, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1658,
	10, 82, 3, 82, 5, 82, 1661, 10, 82, 3, 82, 3, 82, 5, 82, 1665, 10, 82,
	3, 83, 3, 83, 5, 83, 1669, 10, 83, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3,
	84, 5, 84, 1677, 10, 84, 5, 84, 1679, 10, 84, 3, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 3, 85, 3, 85, 3, 85, 7, 85, 1689, 10, 85, 12, 85, 14, 85, 1692,
	11, 85, 3, 85, 3, 85, 3, 86, 3, 86, 3, 87, 3, 87, 3, 88, 3, 88, 3, 89,
	3, 89, 3, 89, 7, 89, 1705, 10, 89, 12, 89, 14, 89, 1708, 11, 89, 3, 90,
	3, 90, 3, 90, 7, 90, 1713, 10, 90, 12, 90, 14, 90, 1716, 11, 90, 3, 90,
	5, 90, 1719, 10, 90, 3, 91, 3, 91, 3, 91, 5, 91, 1724, 10, 91, 3, 92, 3,
	92, 5, 92, 1728, 10, 92, 3, 92, 5, 92, 1731, 10, 92, 3, 93, 3, 93, 5, 93,
	1735, 10, 93, 3, 94, 3, 94, 5, 94, 1739, 10, 94, 3, 95, 3, 95, 3, 96, 3,
	96, 3, 97, 3, 97, 3, 98, 3, 98, 3, 98, 2, 3, 28, 99, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
	118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146,
	148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176,
	178, 180, 182, 184, 186, 188, 190, 192, 194, 2, 28, 3, 2, 178, 179, 3,
	2, 180, 181, 3, 2, 110, 111, 3, 2, 103, 108, 5, 2, 93, 102, 109, 109, 142,
	142, 3, 2, 45, 46, 3, 2, 53, 54, 4, 2, 113, 115, 117, 117, 3, 2, 76, 78,
	4, 2, 26, 26, 112, 125, 6, 2, 12, 13, 52, 52, 67, 67, 132, 135, 4, 2, 59,
	59, 87, 88, 3, 2, 145, 146, 4, 2, 48, 48, 168, 168, 3, 2, 149, 150, 3,
	2, 54, 55, 3, 2, 38, 40, 3, 2, 173, 176, 3, 2, 155, 164, 3, 2, 185, 190,
	4, 2, 184, 184, 189, 189, 4, 2, 14, 14, 184, 184, 3, 2, 193, 195, 3, 2,
	191, 192, 3, 2, 153, 154, 31, 2, 20, 20, 23, 26, 35, 36, 38, 38, 41, 43,
	45, 46, 50, 50, 56, 56, 59, 59, 61, 63, 66, 67, 72, 73, 76, 82, 84, 88,
	91, 91, 93, 94, 97, 98, 101, 108, 110, 115, 117, 124, 126, 127, 131, 136,
	138, 138, 140, 140, 142, 143, 147, 148, 160, 163, 165, 166, 168, 177, 2,
	1944, 2, 196, 3, 2, 2, 2, 4, 220, 3, 2, 2, 2, 6, 224, 3, 2, 2, 2, 8, 345,
	3, 2, 2, 2, 10, 349, 3, 2, 2, 2, 12, 352, 3, 2, 2, 2, 14, 368, 3, 2, 2,
	2, 16, 382, 3, 2, 2, 2, 18, 396, 3, 2, 2, 2, 20, 404, 3, 2, 2, 2, 22, 408,
	3, 2, 2, 2, 24, 423, 3, 2, 2, 2, 26, 444, 3, 2, 2, 2, 28, 461, 3, 2, 2,
	2, 30, 475, 3, 2, 2, 2, 32, 483, 3, 2, 2, 2, 34, 491, 3, 2, 2, 2, 36, 514,
	3, 2, 2, 2, 38, 518, 3, 2, 2, 2, 40, 525, 3, 2, 2, 2, 42, 528, 3, 2, 2,
	2, 44, 535, 3, 2, 2, 2, 46, 549, 3, 2, 2, 2, 48, 555, 3, 2, 2, 2, 50, 557,
	3, 2, 2, 2, 52, 566, 3, 2, 2, 2, 54, 568, 3, 2, 2, 2, 56, 570, 3, 2, 2,
	2, 58, 582, 3, 2, 2, 2, 60, 631, 3, 2, 2, 2, 62, 633, 3, 2, 2, 2, 64, 635,
	3, 2, 2, 2, 66, 645, 3, 2, 2, 2, 68, 653, 3, 2, 2, 2, 70, 655, 3, 2, 2,
	2, 72, 663, 3, 2, 2, 2, 74, 677, 3, 2, 2, 2, 76, 722, 3, 2, 2, 2, 78, 726,
	3, 2, 2, 2, 80, 741, 3, 2, 2, 2, 82, 772, 3, 2, 2, 2, 84, 800, 3, 2, 2,
	2, 86, 815, 3, 2, 2, 2, 88, 817, 3, 2, 2, 2, 90, 821, 3, 2, 2, 2, 92, 847,
	3, 2, 2, 2, 94, 861, 3, 2, 2, 2, 96, 863, 3, 2, 2, 2, 98, 877, 3, 2, 2,
	2, 100, 880, 3, 2, 2, 2, 102, 926, 3, 2, 2, 2, 104, 933, 3, 2, 2, 2, 106,
	948, 3, 2, 2, 2, 108, 956, 3, 2, 2, 2, 110, 968, 3, 2, 2, 2, 112, 970,
	3, 2, 2, 2, 114, 991, 3, 2, 2, 2, 116, 999, 3, 2, 2, 2, 118, 1012, 3, 2,
	2, 2, 120, 1014, 3, 2, 2, 2, 122, 1046, 3, 2, 2, 2, 124, 1084, 3, 2, 2,
	2, 126, 1134, 3, 2, 2, 2, 128, 1146, 3, 2, 2, 2, 130, 1172, 3, 2, 2, 2,
	132, 1186, 3, 2, 2, 2, 134, 1287, 3, 2, 2, 2, 136, 1318, 3, 2, 2, 2, 138,
	1329, 3, 2, 2, 2, 140, 1335, 3, 2, 2, 2, 142, 1346, 3, 2, 2, 2, 144, 1446,
	3, 2, 2, 2, 146, 1448, 3, 2, 2, 2, 148, 1480, 3, 2, 2, 2, 150, 1511, 3,
	2, 2, 2, 152, 1547, 3, 2, 2, 2, 154, 1549, 3, 2, 2, 2, 156, 1569, 3, 2,
	2, 2, 158, 1587, 3, 2, 2, 2, 160, 1613, 3, 2, 2, 2, 162, 1621, 3, 2, 2,
	2, 164, 1666, 3, 2, 2, 2, 166, 1670, 3, 2, 2, 2, 168, 1680, 3, 2, 2, 2,
	170, 1695, 3, 2, 2, 2, 172, 1697, 3, 2, 2, 2, 174, 1699, 3, 2, 2, 2, 176,
	1701, 3, 2, 2, 2, 178, 1718, 3, 2, 2, 2, 180, 1720, 3, 2, 2, 2, 182, 1730,
	3, 2, 2, 2, 184, 1734, 3, 2, 2, 2, 186, 1738, 3, 2, 2, 2, 188, 1740, 3,
	2, 2, 2, 190, 1742, 3, 2, 2, 2, 192, 1744, 3, 2, 2, 2, 194, 1746, 3, 2,
	2, 2, 196, 201, 5, 4, 3, 2, 197, 198, 7, 3, 2, 2, 198, 200, 5, 4, 3, 2,
	199, 197, 3, 2, 2, 2, 200, 203, 3, 2, 2, 2, 201, 199, 3, 2, 2, 2, 201,
	202, 3, 2, 2, 2, 202, 3, 3, 2, 2, 2, 203, 201, 3, 2, 2, 2, 204, 221, 5,
	6, 4, 2, 205, 221, 5, 78, 40, 2, 206, 221, 5, 128, 65, 2, 207, 221, 5,
	134, 68, 2, 208, 221, 5, 142, 72, 2, 209, 221, 5, 146, 74, 2, 210, 221,
	5, 148, 75, 2, 211, 221, 5, 150, 76, 2, 212, 221, 5, 152, 77, 2, 213, 221,
	5, 154, 78, 2, 214, 221, 5, 132, 67, 2, 215, 221, 5, 156, 79, 2, 216, 221,
	5, 158, 80, 2, 217, 221, 5, 162, 82, 2, 218, 221, 5, 166, 84, 2, 219, 221,
	5, 168, 85, 2, 220, 204, 3, 2, 2, 2, 220, 205, 3, 2, 2, 2, 220, 206, 3,
	2, 2, 2, 220, 207, 3, 2, 2, 2, 220, 208, 3, 2, 2, 2, 220, 209, 3, 2, 2,
	2, 220, 210, 3, 2, 2, 2, 220, 211, 3, 2, 2, 2, 220, 212, 3, 2, 2, 2, 220,
	213, 3, 2, 2, 2, 220, 214, 3, 2, 2, 2, 220, 215, 3, 2, 2, 2, 220, 216,
	3, 2, 2, 2, 220, 217, 3, 2, 2, 2, 220, 218, 3, 2, 2, 2, 220, 219, 3, 2,
	2, 2, 221, 5, 3, 2, 2, 2, 222, 223, 7, 49, 2, 2, 223, 225, 5, 186, 94,
	2, 224, 222, 3, 2, 2, 2, 224, 225, 3, 2, 2, 2, 225, 226, 3, 2, 2, 2, 226,
	243, 7, 16, 2, 2, 227, 231, 7, 4, 2, 2, 228, 229, 7, 17, 2, 2, 229, 230,
	7, 185, 2, 2, 230, 232, 5, 188, 95, 2, 231, 228, 3, 2, 2, 2, 231, 232,
	3, 2, 2, 2, 232, 240, 3, 2, 2, 2, 233, 238, 7, 26, 2, 2, 234, 235, 7, 185,
	2, 2, 235, 239, 5, 192, 97, 2, 236, 237, 7, 190, 2, 2, 237, 239, 5, 190,
	96, 2, 238, 234, 3, 2, 2, 2, 238, 236, 3, 2, 2, 2, 239, 241, 3, 2, 2, 2,
	240, 233, 3, 2, 2, 2, 240, 241, 3, 2, 2, 2, 241, 242, 3, 2, 2, 2, 242,
	244, 7, 5, 2, 2, 243, 227, 3, 2, 2, 2, 243, 244, 3, 2, 2, 2, 244, 245,
	3, 2, 2, 2, 245, 250, 5, 178, 90, 2, 246, 247, 7, 6, 2, 2, 247, 249, 5,
	178, 90, 2, 248, 246, 3, 2, 2, 2, 249, 252, 3, 2, 2, 2, 250, 248, 3, 2,
	2, 2, 250, 251, 3, 2, 2, 2, 251, 257, 3, 2, 2, 2, 252, 250, 3, 2, 2, 2,
	253, 255, 7, 6, 2, 2, 254, 253, 3, 2, 2, 2, 254, 255, 3, 2, 2, 2, 255,
	256, 3, 2, 2, 2, 256, 258, 5, 22, 12, 2, 257, 254, 3, 2, 2, 2, 257, 258,
	3, 2, 2, 2, 258, 261, 3, 2, 2, 2, 259, 260, 7, 6, 2, 2, 260, 262, 5, 18,
	10, 2, 261, 259, 3, 2, 2, 2, 261, 262, 3, 2, 2, 2, 262, 265, 3, 2, 2, 2,
	263, 264, 7, 6, 2, 2, 264, 266, 5, 16, 9, 2, 265, 263, 3, 2, 2, 2, 265,
	266, 3, 2, 2, 2, 266, 336, 3, 2, 2, 2, 267, 268, 7, 51, 2, 2, 268, 269,
	7, 19, 2, 2, 269, 270, 7, 185, 2, 2, 270, 272, 7, 193, 2, 2, 271, 267,
	3, 2, 2, 2, 271, 272, 3, 2, 2, 2, 272, 337, 3, 2, 2, 2, 273, 274, 7, 64,
	2, 2, 274, 279, 5, 180, 91, 2, 275, 276, 7, 6, 2, 2, 276, 278, 5, 180,
	91, 2, 277, 275, 3, 2, 2, 2, 278, 281, 3, 2, 2, 2, 279, 277, 3, 2, 2, 2,
	279, 280, 3, 2, 2, 2, 280, 287, 3, 2, 2, 2, 281, 279, 3, 2, 2, 2, 282,
	283, 7, 21, 2, 2, 283, 285, 5, 26, 14, 2, 284, 286, 5, 10, 6, 2, 285, 284,
	3, 2, 2, 2, 285, 286, 3, 2, 2, 2, 286, 288, 3, 2, 2, 2, 287, 282, 3, 2,
	2, 2, 287, 288, 3, 2, 2, 2, 288, 290, 3, 2, 2, 2, 289, 291, 5, 12, 7, 2,
	290, 289, 3, 2, 2, 2, 290, 291, 3, 2, 2, 2, 291, 293, 3, 2, 2, 2, 292,
	294, 5, 8, 5, 2, 293, 292, 3, 2, 2, 2, 293, 294, 3, 2, 2, 2, 294, 305,
	3, 2, 2, 2, 295, 296, 7, 52, 2, 2, 296, 297, 7, 51, 2, 2, 297, 302, 5,
	72, 37, 2, 298, 299, 7, 6, 2, 2, 299, 301, 5, 72, 37, 2, 300, 298, 3, 2,
	2, 2, 301, 304, 3, 2, 2, 2, 302, 300, 3, 2, 2, 2, 302, 303, 3, 2, 2, 2,
	303, 306, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 305, 295, 3, 2, 2, 2, 305,
	306, 3, 2, 2, 2, 306, 309, 3, 2, 2, 2, 307, 308, 7, 33, 2, 2, 308, 310,
	7, 191, 2, 2, 309, 307, 3, 2, 2, 2, 309, 310, 3, 2, 2, 2, 310, 320, 3,
	2, 2, 2, 311, 314, 7, 32, 2, 2, 312, 313, 7, 191, 2, 2, 313, 315, 7, 6,
	2, 2, 314, 312, 3, 2, 2, 2, 314, 315, 3, 2, 2, 2, 315, 316, 3, 2, 2, 2,
	316, 318, 7, 191, 2, 2, 317, 319, 5, 14, 8, 2, 318, 317, 3, 2, 2, 2, 318,
	319, 3, 2, 2, 2, 319, 321, 3, 2, 2, 2, 320, 311, 3, 2, 2, 2, 320, 321,
	3, 2, 2, 2, 321, 332, 3, 2, 2, 2, 322, 330, 7, 73, 2, 2, 323, 324, 7, 7,
	2, 2, 324, 327, 7, 191, 2, 2, 325, 326, 7, 6, 2, 2, 326, 328, 5, 178, 90,
	2, 327, 325, 3, 2, 2, 2, 327, 328, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329,
	331, 7, 8, 2, 2, 330, 323, 3, 2, 2, 2, 330, 331, 3, 2, 2, 2, 331, 333,
	3, 2, 2, 2, 332, 322, 3, 2, 2, 2, 332, 333, 3, 2, 2, 2, 333, 335, 3, 2,
	2, 2, 334, 273, 3, 2, 2, 2, 334, 335, 3, 2, 2, 2, 335, 337, 3, 2, 2, 2,
	336, 271, 3, 2, 2, 2, 336, 334, 3, 2, 2, 2, 337, 340, 3, 2, 2, 2, 338,
	339, 7, 48, 2, 2, 339, 341, 5, 186, 94, 2, 340, 338, 3, 2, 2, 2, 340, 341,
	3, 2, 2, 2, 341, 343, 3, 2, 2, 2, 342, 344, 5, 74, 38, 2, 343, 342, 3,
	2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 7, 3, 2, 2, 2, 345, 346, 7, 25, 2,
	2, 346, 347, 7, 51, 2, 2, 347, 348, 5, 178, 90, 2, 348, 9, 3, 2, 2, 2,
	349, 350, 7, 22, 2, 2, 350, 351, 5, 92, 47, 2, 351, 11, 3, 2, 2, 2, 352,
	356, 7, 23, 2, 2, 353, 354, 7, 24, 2, 2, 354, 355, 7, 185, 2, 2, 355, 357,
	7, 191, 2, 2, 356, 353, 3, 2, 2, 2, 356, 357, 3, 2, 2, 2, 357, 364, 3,
	2, 2, 2, 358, 359, 7, 29, 2, 2, 359, 360, 7, 7, 2, 2, 360, 361, 7, 192,
	2, 2, 361, 362, 7, 6, 2, 2, 362, 363, 7, 192, 2, 2, 363, 365, 7, 8, 2,
	2, 364, 358, 3, 2, 2, 2, 364, 365, 3, 2, 2, 2, 365, 366, 3, 2, 2, 2, 366,
	367, 5, 26, 14, 2, 367, 13, 3, 2, 2, 2, 368, 369, 7, 27, 2, 2, 369, 370,
	7, 51, 2, 2, 370, 375, 5, 72, 37, 2, 371, 372, 7, 6, 2, 2, 372, 374, 5,
	72, 37, 2, 373, 371, 3, 2, 2, 2, 374, 377, 3, 2, 2, 2, 375, 373, 3, 2,
	2, 2, 375, 376, 3, 2, 2, 2, 376, 380, 3, 2, 2, 2, 377, 375, 3, 2, 2, 2,
	378, 379, 7, 28, 2, 2, 379, 381, 7, 191, 2, 2, 380, 378, 3, 2, 2, 2, 380,
	381, 3, 2, 2, 2, 381, 15, 3, 2, 2, 2, 382, 383, 7, 20, 2, 2, 383, 384,
	7, 7, 2, 2, 384, 389, 5, 64, 33, 2, 385, 386, 7, 6, 2, 2, 386, 388, 5,
	64, 33, 2, 387, 385, 3, 2, 2, 2, 388, 391, 3, 2, 2, 2, 389, 387, 3, 2,
	2, 2, 389, 390, 3, 2, 2, 2, 390, 392, 3, 2, 2, 2, 391, 389, 3, 2, 2, 2,
	392, 393, 7, 8, 2, 2, 393, 394, 7, 47, 2, 2, 394, 395, 5, 186, 94, 2, 395,
	17, 3, 2, 2, 2, 396, 401, 5, 20, 11, 2, 397, 398, 7, 6, 2, 2, 398, 400,
	5, 20, 11, 2, 399, 397, 3, 2, 2, 2, 400, 403, 3, 2, 2, 2, 401, 399, 3,
	2, 2, 2, 401, 402, 3, 2, 2, 2, 402, 19, 3, 2, 2, 2, 403, 401, 3, 2, 2,
	2, 404, 405, 5, 92, 47, 2, 405, 406, 7, 47, 2, 2, 406, 407, 5, 186, 94,
	2, 407, 21, 3, 2, 2, 2, 408, 409, 7, 18, 2, 2, 409, 410, 7, 7, 2, 2, 410,
	415, 5, 24, 13, 2, 411, 412, 7, 6, 2, 2, 412, 414, 5, 24, 13, 2, 413, 411,
	3, 2, 2, 2, 414, 417, 3, 2, 2, 2, 415, 413, 3, 2, 2, 2, 415, 416, 3, 2,
	2, 2, 416, 418, 3, 2, 2, 2, 417, 415, 3, 2, 2, 2, 418, 421, 7, 8, 2, 2,
	419, 420, 7, 51, 2, 2, 420, 422, 7, 193, 2, 2, 421, 419, 3, 2, 2, 2, 421,
	422, 3, 2, 2, 2, 422, 23, 3, 2, 2, 2, 423, 428, 5, 178, 90, 2, 424, 426,
	7, 47, 2, 2, 425, 424, 3, 2, 2, 2, 425, 426, 3, 2, 2, 2, 426, 427, 3, 2,
	2, 2, 427, 429, 5, 186, 94, 2, 428, 425, 3, 2, 2, 2, 428, 429, 3, 2, 2,
	2, 429, 432, 3, 2, 2, 2, 430, 431, 7, 51, 2, 2, 431, 433, 7, 193, 2, 2,
	432, 430, 3, 2, 2, 2, 432, 433, 3, 2, 2, 2, 433, 25, 3, 2, 2, 2, 434, 436,
	7, 4, 2, 2, 435, 437, 7, 30, 2, 2, 436, 435, 3, 2, 2, 2, 436, 437, 3, 2,
	2, 2, 437, 438, 3, 2, 2, 2, 438, 439, 7, 26, 2, 2, 439, 440, 7, 185, 2,
	2, 440, 441, 5, 192, 97, 2, 441, 442, 3, 2, 2, 2, 442, 443, 7, 5, 2, 2,
	443, 445, 3, 2, 2, 2, 444, 434, 3, 2, 2, 2, 444, 445, 3, 2, 2, 2, 445,
	450, 3, 2, 2, 2, 446, 448, 7, 59, 2, 2, 447, 449, 7, 60, 2, 2, 448, 447,
	3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 451, 3, 2, 2, 2, 450, 446, 3, 2,
	2, 2, 450, 451, 3, 2, 2, 2, 451, 453, 3, 2, 2, 2, 452, 454, 5, 28, 15,
	2, 453, 452, 3, 2, 2, 2, 453, 454, 3, 2, 2, 2, 454, 27, 3, 2, 2, 2, 455,
	456, 8, 15, 1, 2, 456, 462, 5, 30, 16, 2, 457, 458, 7, 7, 2, 2, 458, 459,
	5, 28, 15, 2, 459, 460, 7, 8, 2, 2, 460, 462, 3, 2, 2, 2, 461, 455, 3,
	2, 2, 2, 461, 457, 3, 2, 2, 2, 462, 471, 3, 2, 2, 2, 463, 464, 12, 4, 2,
	2, 464, 465, 7, 60, 2, 2, 465, 470, 5, 28, 15, 5, 466, 467, 12, 3, 2, 2,
	467, 468, 7, 58, 2, 2, 468, 470, 5, 28, 15, 4, 469, 463, 3, 2, 2, 2, 469,
	466, 3, 2, 2, 2, 470, 473, 3, 2, 2, 2, 471, 469, 3, 2, 2, 2, 471, 472,
	3, 2, 2, 2, 472, 29, 3, 2, 2, 2, 473, 471, 3, 2, 2, 2, 474, 476, 7, 61,
	2, 2, 475, 474, 3, 2, 2, 2, 475, 476, 3, 2, 2, 2, 476, 481, 3, 2, 2, 2,
	477, 482, 5, 32, 17, 2, 478, 482, 5, 34, 18, 2, 479, 482, 5, 48, 25, 2,
	480, 482, 5, 36, 19, 2, 481, 477, 3, 2, 2, 2, 481, 478, 3, 2, 2, 2, 481,
	479, 3, 2, 2, 2, 481, 480, 3, 2, 2, 2, 482, 31, 3, 2, 2, 2, 483, 486, 5,
	178, 90, 2, 484, 485, 7, 183, 2, 2, 485, 487, 5, 190, 96, 2, 486, 484,
	3, 2, 2, 2, 486, 487, 3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488, 489, 5, 174,
	88, 2, 489, 490, 5, 66, 34, 2, 490, 33, 3, 2, 2, 2, 491, 493, 5, 178, 90,
	2, 492, 494, 7, 61, 2, 2, 493, 492, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494,
	512, 3, 2, 2, 2, 495, 496, 7, 57, 2, 2, 496, 497, 5, 66, 34, 2, 497, 498,
	7, 60, 2, 2, 498, 499, 5, 66, 34, 2, 499, 513, 3, 2, 2, 2, 500, 503, 7,
	127, 2, 2, 501, 504, 7, 9, 2, 2, 502, 504, 7, 7, 2, 2, 503, 501, 3, 2,
	2, 2, 503, 502, 3, 2, 2, 2, 504, 505, 3, 2, 2, 2, 505, 506, 5, 66, 34,
	2, 506, 507, 7, 6, 2, 2, 507, 510, 5, 66, 34, 2, 508, 511, 7, 10, 2, 2,
	509, 511, 7, 8, 2, 2, 510, 508, 3, 2, 2, 2, 510, 509, 3, 2, 2, 2, 511,
	513, 3, 2, 2, 2, 512, 495, 3, 2, 2, 2, 512, 500, 3, 2, 2, 2, 513, 35, 3,
	2, 2, 2, 514, 515, 5, 38, 20, 2, 515, 516, 5, 174, 88, 2, 516, 517, 5,
	42, 22, 2, 517, 37, 3, 2, 2, 2, 518, 522, 5, 42, 22, 2, 519, 521, 5, 40,
	21, 2, 520, 519, 3, 2, 2, 2, 521, 524, 3, 2, 2, 2, 522, 520, 3, 2, 2, 2,
	522, 523, 3, 2, 2, 2, 523, 39, 3, 2, 2, 2, 524, 522, 3, 2, 2, 2, 525, 526,
	9, 2, 2, 2, 526, 527, 5, 42, 22, 2, 527, 41, 3, 2, 2, 2, 528, 532, 5, 46,
	24, 2, 529, 531, 5, 44, 23, 2, 530, 529, 3, 2, 2, 2, 531, 534, 3, 2, 2,
	2, 532, 530, 3, 2, 2, 2, 532, 533, 3, 2, 2, 2, 533, 43, 3, 2, 2, 2, 534,
	532, 3, 2, 2, 2, 535, 536, 9, 3, 2, 2, 536, 537, 5, 46, 24, 2, 537, 45,
	3, 2, 2, 2, 538, 550, 5, 178, 90, 2, 539, 540, 7, 177, 2, 2, 540, 541,
	7, 7, 2, 2, 541, 542, 5, 178, 90, 2, 542, 543, 7, 8, 2, 2, 543, 550, 3,
	2, 2, 2, 544, 550, 5, 66, 34, 2, 545, 546, 7, 7, 2, 2, 546, 547, 5, 38,
	20, 2, 547, 548, 7, 8, 2, 2, 548, 550, 3, 2, 2, 2, 549, 538, 3, 2, 2, 2,
	549, 539, 3, 2, 2, 2, 549, 544, 3, 2, 2, 2, 549, 545, 3, 2, 2, 2, 550,
	47, 3, 2, 2, 2, 551, 556, 5, 60, 31, 2, 552, 556, 5, 56, 29, 2, 553, 556,
	5, 54, 28, 2, 554, 556, 5, 50, 26, 2, 555, 551, 3, 2, 2, 2, 555, 552, 3,
	2, 2, 2, 555, 553, 3, 2, 2, 2, 555, 554, 3, 2, 2, 2, 556, 49, 3, 2, 2,
	2, 557, 558, 5, 52, 27, 2, 558, 559, 7, 7, 2, 2, 559, 562, 5, 186, 94,
	2, 560, 561, 7, 83, 2, 2, 561, 563, 5, 26, 14, 2, 562, 560, 3, 2, 2, 2,
	562, 563, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 565, 7, 8, 2, 2, 565,
	51, 3, 2, 2, 2, 566, 567, 9, 4, 2, 2, 567, 53, 3, 2, 2, 2, 568, 569, 5,
	92, 47, 2, 569, 55, 3, 2, 2, 2, 570, 571, 5, 58, 30, 2, 571, 572, 7, 7,
	2, 2, 572, 577, 5, 64, 33, 2, 573, 574, 7, 6, 2, 2, 574, 576, 5, 64, 33,
	2, 575, 573, 3, 2, 2, 2, 576, 579, 3, 2, 2, 2, 577, 575, 3, 2, 2, 2, 577,
	578, 3, 2, 2, 2, 578, 580, 3, 2, 2, 2, 579, 577, 3, 2, 2, 2, 580, 581,
	7, 8, 2, 2, 581, 57, 3, 2, 2, 2, 582, 583, 9, 5, 2, 2, 583, 59, 3, 2, 2,
	2, 584, 587, 5, 178, 90, 2, 585, 586, 7, 183, 2, 2, 586, 588, 5, 190, 96,
	2, 587, 585, 3, 2, 2, 2, 587, 588, 3, 2, 2, 2, 588, 590, 3, 2, 2, 2, 589,
	584, 3, 2, 2, 2, 589, 590, 3, 2, 2, 2, 590, 591, 3, 2, 2, 2, 591, 592,
	5, 62, 32, 2, 592, 593, 7, 7, 2, 2, 593, 598, 5, 68, 35, 2, 594, 595, 7,
	6, 2, 2, 595, 597, 5, 68, 35, 2, 596, 594, 3, 2, 2, 2, 597, 600, 3, 2,
	2, 2, 598, 596, 3, 2, 2, 2, 598, 599, 3, 2, 2, 2, 599, 601, 3, 2, 2, 2,
	600, 598, 3, 2, 2, 2, 601, 602, 7, 8, 2, 2, 602, 632, 3, 2, 2, 2, 603,
	604, 5, 62, 32, 2, 604, 605, 7, 7, 2, 2, 605, 608, 5, 178, 90, 2, 606,
	607, 7, 183, 2, 2, 607, 609, 5, 190, 96, 2, 608, 606, 3, 2, 2, 2, 608,
	609, 3, 2, 2, 2, 609, 614, 3, 2, 2, 2, 610, 611, 7, 6, 2, 2, 611, 613,
	5, 68, 35, 2, 612, 610, 3, 2, 2, 2, 613, 616, 3, 2, 2, 2, 614, 612, 3,
	2, 2, 2, 614, 615, 3, 2, 2, 2, 615, 617, 3, 2, 2, 2, 616, 614, 3, 2, 2,
	2, 617, 618, 7, 8, 2, 2, 618, 632, 3, 2, 2, 2, 619, 622, 5, 178, 90, 2,
	620, 621, 7, 183, 2, 2, 621, 623, 5, 190, 96, 2, 622, 620, 3, 2, 2, 2,
	622, 623, 3, 2, 2, 2, 623, 625, 3, 2, 2, 2, 624, 619, 3, 2, 2, 2, 624,
	625, 3, 2, 2, 2, 625, 626, 3, 2, 2, 2, 626, 627, 5, 62, 32, 2, 627, 628,
	7, 7, 2, 2, 628, 629, 5, 178, 90, 2, 629, 630, 7, 8, 2, 2, 630, 632, 3,
	2, 2, 2, 631, 589, 3, 2, 2, 2, 631, 603, 3, 2, 2, 2, 631, 624, 3, 2, 2,
	2, 632, 61, 3, 2, 2, 2, 633, 634, 9, 6, 2, 2, 634, 63, 3, 2, 2, 2, 635,
	636, 5, 186, 94, 2, 636, 637, 7, 185, 2, 2, 637, 638, 5, 66, 34, 2, 638,
	65, 3, 2, 2, 2, 639, 646, 5, 70, 36, 2, 640, 646, 5, 192, 97, 2, 641, 646,
	7, 191, 2, 2, 642, 646, 7, 192, 2, 2, 643, 646, 5, 188, 95, 2, 644, 646,
	7, 180, 2, 2, 645, 639, 3, 2, 2, 2, 645, 640, 3, 2, 2, 2, 645, 641, 3,
	2, 2, 2, 645, 642, 3, 2, 2, 2, 645, 643, 3, 2, 2, 2, 645, 644, 3, 2, 2,
	2, 646, 67, 3, 2, 2, 2, 647, 654, 5, 70, 36, 2, 648, 654, 5, 192, 97, 2,
	649, 654, 7, 191, 2, 2, 650, 654, 7, 192, 2, 2, 651, 654, 7, 193, 2, 2,
	652, 654, 7, 180, 2, 2, 653, 647, 3, 2, 2, 2, 653, 648, 3, 2, 2, 2, 653,
	649, 3, 2, 2, 2, 653, 650, 3, 2, 2, 2, 653, 651, 3, 2, 2, 2, 653, 652,
	3, 2, 2, 2, 654, 69, 3, 2, 2, 2, 655, 656, 7, 152, 2, 2, 656, 657, 5, 140,
	71, 2, 657, 71, 3, 2, 2, 2, 658, 664, 5, 178, 90, 2, 659, 661, 9, 7, 2,
	2, 660, 659, 3, 2, 2, 2, 660, 661, 3, 2, 2, 2, 661, 662, 3, 2, 2, 2, 662,
	664, 5, 92, 47, 2, 663, 658, 3, 2, 2, 2, 663, 660, 3, 2, 2, 2, 664, 669,
	3, 2, 2, 2, 665, 666, 7, 7, 2, 2, 666, 667, 5, 26, 14, 2, 667, 668, 7,
	8, 2, 2, 668, 670, 3, 2, 2, 2, 669, 665, 3, 2, 2, 2, 669, 670, 3, 2, 2,
	2, 670, 672, 3, 2, 2, 2, 671, 673, 9, 8, 2, 2, 672, 671, 3, 2, 2, 2, 672,
	673, 3, 2, 2, 2, 673, 675, 3, 2, 2, 2, 674, 676, 9, 9, 2, 2, 675, 674,
	3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 73, 3, 2, 2, 2, 677, 679, 7, 74,
	2, 2, 678, 680, 7, 118, 2, 2, 679, 678, 3, 2, 2, 2, 679, 680, 3, 2, 2,
	2, 680, 692, 3, 2, 2, 2, 681, 682, 7, 7, 2, 2, 682, 687, 5, 76, 39, 2,
	683, 684, 7, 6, 2, 2, 684, 686, 5, 76, 39, 2, 685, 683, 3, 2, 2, 2, 686,
	689, 3, 2, 2, 2, 687, 685, 3, 2, 2, 2, 687, 688, 3, 2, 2, 2, 688, 690,
	3, 2, 2, 2, 689, 687, 3, 2, 2, 2, 690, 691, 7, 8, 2, 2, 691, 693, 3, 2,
	2, 2, 692, 681, 3, 2, 2, 2, 692, 693, 3, 2, 2, 2, 693, 708, 3, 2, 2, 2,
	694, 706, 7, 75, 2, 2, 695, 696, 7, 7, 2, 2, 696, 701, 5, 188, 95, 2, 697,
	698, 7, 6, 2, 2, 698, 700, 5, 188, 95, 2, 699, 697, 3, 2, 2, 2, 700, 703,
	3, 2, 2, 2, 701, 699, 3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 704, 3, 2,
	2, 2, 703, 701, 3, 2, 2, 2, 704, 705, 7, 8, 2, 2, 705, 707, 3, 2, 2, 2,
	706, 695, 3, 2, 2, 2, 706, 707, 3, 2, 2, 2, 707, 709, 3, 2, 2, 2, 708,
	694, 3, 2, 2, 2, 708, 709, 3, 2, 2, 2, 709, 716, 3, 2, 2, 2, 710, 714,
	9, 10, 2, 2, 711, 712, 7, 79, 2, 2, 712, 713, 7, 185, 2, 2, 713, 715, 7,
	193, 2, 2, 714, 711, 3, 2, 2, 2, 714, 715, 3, 2, 2, 2, 715, 717, 3, 2,
	2, 2, 716, 710, 3, 2, 2, 2, 716, 717, 3, 2, 2, 2, 717, 718, 3, 2, 2, 2,
	718, 719, 5, 188, 95, 2, 719, 75, 3, 2, 2, 2, 720, 723, 5, 178, 90, 2,
	721, 723, 5, 84, 43, 2, 722, 720, 3, 2, 2, 2, 722, 721, 3, 2, 2, 2, 723,
	77, 3, 2, 2, 2, 724, 725, 7, 49, 2, 2, 725, 727, 5, 186, 94, 2, 726, 724,
	3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 728, 3, 2, 2, 2, 728, 733, 5, 80,
	41, 2, 729, 730, 7, 11, 2, 2, 730, 732, 5, 80, 41, 2, 731, 729, 3, 2, 2,
	2, 732, 735, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 733, 734, 3, 2, 2, 2, 734,
	79, 3, 2, 2, 2, 735, 733, 3, 2, 2, 2, 736, 738, 7, 21, 2, 2, 737, 739,
	7, 112, 2, 2, 738, 737, 3, 2, 2, 2, 738, 739, 3, 2, 2, 2, 739, 740, 3,
	2, 2, 2, 740, 742, 5, 26, 14, 2, 741, 736, 3, 2, 2, 2, 741, 742, 3, 2,
	2, 2, 742, 743, 3, 2, 2, 2, 743, 748, 5, 82, 42, 2, 744, 745, 7, 6, 2,
	2, 745, 747, 5, 82, 42, 2, 746, 744, 3, 2, 2, 2, 747, 750, 3, 2, 2, 2,
	748, 746, 3, 2, 2, 2, 748, 749, 3, 2, 2, 2, 749, 754, 3, 2, 2, 2, 750,
	748, 3, 2, 2, 2, 751, 752, 7, 50, 2, 2, 752, 753, 7, 51, 2, 2, 753, 755,
	5, 94, 48, 2, 754, 751, 3, 2, 2, 2, 754, 755, 3, 2, 2, 2, 755, 757, 3,
	2, 2, 2, 756, 758, 5, 102, 52, 2, 757, 756, 3, 2, 2, 2, 757, 758, 3, 2,
	2, 2, 758, 761, 3, 2, 2, 2, 759, 760, 7, 32, 2, 2, 760, 762, 7, 191, 2,
	2, 761, 759, 3, 2, 2, 2, 761, 762, 3, 2, 2, 2, 762, 765, 3, 2, 2, 2, 763,
	764, 7, 48, 2, 2, 764, 766, 5, 186, 94, 2, 765, 763, 3, 2, 2, 2, 765, 766,
	3, 2, 2, 2, 766, 768, 3, 2, 2, 2, 767, 769, 5, 74, 38, 2, 768, 767, 3,
	2, 2, 2, 768, 769, 3, 2, 2, 2, 769, 81, 3, 2, 2, 2, 770, 771, 7, 44, 2,
	2, 771, 773, 5, 26, 14, 2, 772, 770, 3, 2, 2, 2, 772, 773, 3, 2, 2, 2,
	773, 792, 3, 2, 2, 2, 774, 775, 5, 84, 43, 2, 775, 776, 7, 7, 2, 2, 776,
	777, 7, 8, 2, 2, 777, 793, 3, 2, 2, 2, 778, 779, 5, 84, 43, 2, 779, 780,
	7, 7, 2, 2, 780, 783, 5, 178, 90, 2, 781, 782, 7, 6, 2, 2, 782, 784, 5,
	86, 44, 2, 783, 781, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784, 785, 3, 2,
	2, 2, 785, 786, 7, 8, 2, 2, 786, 793, 3, 2, 2, 2, 787, 788, 5, 84, 43,
	2, 788, 789, 7, 7, 2, 2, 789, 790, 5, 86, 44, 2, 790, 791, 7, 8, 2, 2,
	791, 793, 3, 2, 2, 2, 792, 774, 3, 2, 2, 2, 792, 778, 3, 2, 2, 2, 792,
	787, 3, 2, 2, 2, 793, 798, 3, 2, 2, 2, 794, 796, 7, 47, 2, 2, 795, 794,
	3, 2, 2, 2, 795, 796, 3, 2, 2, 2, 796, 797, 3, 2, 2, 2, 797, 799, 5, 76,
	39, 2, 798, 795, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 83, 3, 2, 2, 2,
	800, 801, 9, 11, 2, 2, 801, 85, 3, 2, 2, 2, 802, 807, 5, 88, 45, 2, 803,
	804, 7, 6, 2, 2, 804, 806, 5, 88, 45, 2, 805, 803, 3, 2, 2, 2, 806, 809,
	3, 2, 2, 2, 807, 805, 3, 2, 2, 2, 807, 808, 3, 2, 2, 2, 808, 812, 3, 2,
	2, 2, 809, 807, 3, 2, 2, 2, 810, 811, 7, 6, 2, 2, 811, 813, 5, 92, 47,
	2, 812, 810, 3, 2, 2, 2, 812, 813, 3, 2, 2, 2, 813, 816, 3, 2, 2, 2, 814,
	816, 5, 92, 47, 2, 815, 802, 3, 2, 2, 2, 815, 814, 3, 2, 2, 2, 816, 87,
	3, 2, 2, 2, 817, 818, 5, 90, 46, 2, 818, 819, 7, 185, 2, 2, 819, 820, 5,
	66, 34, 2, 820, 89, 3, 2, 2, 2, 821, 822, 9, 12, 2, 2, 822, 91, 3, 2, 2,
	2, 823, 831, 7, 80, 2, 2, 824, 825, 7, 4, 2, 2, 825, 826, 7, 81, 2, 2,
	826, 827, 7, 185, 2, 2, 827, 828, 5, 188, 95, 2, 828, 829, 3, 2, 2, 2,
	829, 830, 7, 5, 2, 2, 830, 832, 3, 2, 2, 2, 831, 824, 3, 2, 2, 2, 831,
	832, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 834, 7, 7, 2, 2, 834, 839,
	7, 193, 2, 2, 835, 836, 7, 6, 2, 2, 836, 838, 5, 64, 33, 2, 837, 835, 3,
	2, 2, 2, 838, 841, 3, 2, 2, 2, 839, 837, 3, 2, 2, 2, 839, 840, 3, 2, 2,
	2, 840, 842, 3, 2, 2, 2, 841, 839, 3, 2, 2, 2, 842, 848, 7, 8, 2, 2, 843,
	845, 7, 126, 2, 2, 844, 843, 3, 2, 2, 2, 844, 845, 3, 2, 2, 2, 845, 846,
	3, 2, 2, 2, 846, 848, 5, 38, 20, 2, 847, 823, 3, 2, 2, 2, 847, 844, 3,
	2, 2, 2, 848, 93, 3, 2, 2, 2, 849, 862, 5, 96, 49, 2, 850, 851, 7, 7, 2,
	2, 851, 856, 5, 96, 49, 2, 852, 853, 7, 6, 2, 2, 853, 855, 5, 96, 49, 2,
	854, 852, 3, 2, 2, 2, 855, 858, 3, 2, 2, 2, 856, 854, 3, 2, 2, 2, 856,
	857, 3, 2, 2, 2, 857, 859, 3, 2, 2, 2, 858, 856, 3, 2, 2, 2, 859, 860,
	7, 8, 2, 2, 860, 862, 3, 2, 2, 2, 861, 849, 3, 2, 2, 2, 861, 850, 3, 2,
	2, 2, 862, 95, 3, 2, 2, 2, 863, 868, 5, 98, 50, 2, 864, 866, 7, 47, 2,
	2, 865, 864, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866, 867, 3, 2, 2, 2, 867,
	869, 5, 76, 39, 2, 868, 865, 3, 2, 2, 2, 868, 869, 3, 2, 2, 2, 869, 97,
	3, 2, 2, 2, 870, 878, 5, 100, 51, 2, 871, 878, 5, 104, 53, 2, 872, 878,
	5, 112, 57, 2, 873, 878, 5, 120, 61, 2, 874, 878, 5, 122, 62, 2, 875, 878,
	5, 126, 64, 2, 876, 878, 5, 124, 63, 2, 877, 870, 3, 2, 2, 2, 877, 871,
	3, 2, 2, 2, 877, 872, 3, 2, 2, 2, 877, 873, 3, 2, 2, 2, 877, 874, 3, 2,
	2, 2, 877, 875, 3, 2, 2, 2, 877, 876, 3, 2, 2, 2, 878, 99, 3, 2, 2, 2,
	879, 881, 5, 178, 90, 2, 880, 879, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881,
	923, 3, 2, 2, 2, 882, 883, 7, 67, 2, 2, 883, 884, 7, 7, 2, 2, 884, 889,
	5, 66, 34, 2, 885, 886, 7, 6, 2, 2, 886, 888, 5, 66, 34, 2, 887, 885, 3,
	2, 2, 2, 888, 891, 3, 2, 2, 2, 889, 887, 3, 2, 2, 2, 889, 890, 3, 2, 2,
	2, 890, 892, 3, 2, 2, 2, 891, 889, 3, 2, 2, 2, 892, 893, 7, 8, 2, 2, 893,
	922, 3, 2, 2, 2, 894, 895, 7, 66, 2, 2, 895, 896, 7, 7, 2, 2, 896, 901,
	5, 66, 34, 2, 897, 898, 7, 6, 2, 2, 898, 900, 5, 66, 34, 2, 899, 897, 3,
	2, 2, 2, 900, 903, 3, 2, 2, 2, 901, 899, 3, 2, 2, 2, 901, 902, 3, 2, 2,
	2, 902, 904, 3, 2, 2, 2, 903, 901, 3, 2, 2, 2, 904, 905, 7, 8, 2, 2, 905,
	922, 3, 2, 2, 2, 906, 907, 7, 68, 2, 2, 907, 922, 7, 191, 2, 2, 908, 909,
	7, 135, 2, 2, 909, 910, 7, 47, 2, 2, 910, 922, 5, 66, 34, 2, 911, 922,
	5, 92, 47, 2, 912, 913, 7, 69, 2, 2, 913, 922, 7, 191, 2, 2, 914, 915,
	7, 52, 2, 2, 915, 916, 7, 51, 2, 2, 916, 919, 5, 176, 89, 2, 917, 920,
	7, 53, 2, 2, 918, 920, 7, 54, 2, 2, 919, 917, 3, 2, 2, 2, 919, 918, 3,
	2, 2, 2, 919, 920, 3, 2, 2, 2, 920, 922, 3, 2, 2, 2, 921, 882, 3, 2, 2,
	2, 921, 894, 3, 2, 2, 2, 921, 906, 3, 2, 2, 2, 921, 908, 3, 2, 2, 2, 921,
	911, 3, 2, 2, 2, 921, 912, 3, 2, 2, 2, 921, 914, 3, 2, 2, 2, 922, 925,
	3, 2, 2, 2, 923, 921, 3, 2, 2, 2, 923, 924, 3, 2, 2, 2, 924, 101, 3, 2,
	2, 2, 925, 923, 3, 2, 2, 2, 926, 927, 7, 65, 2, 2, 927, 928, 7, 7, 2, 2,
	928, 929, 5, 176, 89, 2, 929, 930, 7, 6, 2, 2, 930, 931, 5, 188, 95, 2,
	931, 932, 7, 8, 2, 2, 932, 103, 3, 2, 2, 2, 933, 934, 7, 127, 2, 2, 934,
	935, 7, 7, 2, 2, 935, 942, 5, 178, 90, 2, 936, 939, 7, 6, 2, 2, 937, 938,
	7, 135, 2, 2, 938, 940, 7, 185, 2, 2, 939, 937, 3, 2, 2, 2, 939, 940, 3,
	2, 2, 2, 940, 941, 3, 2, 2, 2, 941, 943, 5, 66, 34, 2, 942, 936, 3, 2,
	2, 2, 942, 943, 3, 2, 2, 2, 943, 944, 3, 2, 2, 2, 944, 945, 7, 6, 2, 2,
	945, 946, 5, 106, 54, 2, 946, 947, 7, 8, 2, 2, 947, 105, 3, 2, 2, 2, 948,
	953, 5, 108, 55, 2, 949, 950, 7, 6, 2, 2, 950, 952, 5, 108, 55, 2, 951,
	949, 3, 2, 2, 2, 952, 955, 3, 2, 2, 2, 953, 951, 3, 2, 2, 2, 953, 954,
	3, 2, 2, 2, 954, 107, 3, 2, 2, 2, 955, 953, 3, 2, 2, 2, 956, 957, 7, 9,
	2, 2, 957, 958, 5, 110, 56, 2, 958, 959, 7, 6, 2, 2, 959, 962, 5, 110,
	56, 2, 960, 961, 7, 6, 2, 2, 961, 963, 5, 188, 95, 2, 962, 960, 3, 2, 2,
	2, 962, 963, 3, 2, 2, 2, 963, 964, 3, 2, 2, 2, 964, 965, 7, 10, 2, 2, 965,
	109, 3, 2, 2, 2, 966, 969, 7, 179, 2, 2, 967, 969, 5, 190, 96, 2, 968,
	966, 3, 2, 2, 2, 968, 967, 3, 2, 2, 2, 969, 111, 3, 2, 2, 2, 970, 971,
	7, 128, 2, 2, 971, 972, 7, 7, 2, 2, 972, 979, 5, 178, 90, 2, 973, 976,
	7, 6, 2, 2, 974, 975, 7, 132, 2, 2, 975, 977, 7, 185, 2, 2, 976, 974, 3,
	2, 2, 2, 976, 977, 3, 2, 2, 2, 977, 978, 3, 2, 2, 2, 978, 980, 5, 188,
	95, 2, 979, 973, 3, 2, 2, 2, 979, 980, 3, 2, 2, 2, 980, 985, 3, 2, 2, 2,
	981, 982, 7, 6, 2, 2, 982, 983, 7, 135, 2, 2, 983, 984, 7, 185, 2, 2, 984,
	986, 5, 188, 95, 2, 985, 981, 3, 2, 2, 2, 985, 986, 3, 2, 2, 2, 986, 987,
	3, 2, 2, 2, 987, 988, 7, 6, 2, 2, 988, 989, 5, 114, 58, 2, 989, 990, 7,
	8, 2, 2, 990, 113, 3, 2, 2, 2, 991, 996, 5, 116, 59, 2, 992, 993, 7, 6,
	2, 2, 993, 995, 5, 116, 59, 2, 994, 992, 3, 2, 2, 2, 995, 998, 3, 2, 2,
	2, 996, 994, 3, 2, 2, 2, 996, 997, 3, 2, 2, 2, 997, 115, 3, 2, 2, 2, 998,
	996, 3, 2, 2, 2, 999, 1000, 7, 9, 2, 2, 1000, 1001, 5, 118, 60, 2, 1001,
	1002, 7, 6, 2, 2, 1002, 1005, 5, 118, 60, 2, 1003, 1004, 7, 6, 2, 2, 1004,
	1006, 5, 188, 95, 2, 1005, 1003, 3, 2, 2, 2, 1005, 1006, 3, 2, 2, 2, 1006,
	1007, 3, 2, 2, 2, 1007, 1008, 7, 10, 2, 2, 1008, 117, 3, 2, 2, 2, 1009,
	1013, 7, 179, 2, 2, 1010, 1013, 7, 191, 2, 2, 1011, 1013, 5, 188, 95, 2,
	1012, 1009, 3, 2, 2, 2, 1012, 1010, 3, 2, 2, 2, 1012, 1011, 3, 2, 2, 2,
	1013, 119, 3, 2, 2, 2, 1014, 1015, 7, 129, 2, 2, 1015, 1016, 7, 7, 2, 2,
	1016, 1017, 5, 178, 90, 2, 1017, 1020, 7, 6, 2, 2, 1018, 1019, 7, 131,
	2, 2, 1019, 1021, 7, 185, 2, 2, 1020, 1018, 3, 2, 2, 2, 1020, 1021, 3,
	2, 2, 2, 1021, 1022, 3, 2, 2, 2, 1022, 1027, 5, 66, 34, 2, 1023, 1024,
	7, 6, 2, 2, 1024, 1025, 7, 135, 2, 2, 1025, 1026, 7, 185, 2, 2, 1026, 1028,
	5, 66, 34, 2, 1027, 1023, 3, 2, 2, 2, 1027, 1028, 3, 2, 2, 2, 1028, 1033,
	3, 2, 2, 2, 1029, 1030, 7, 6, 2, 2, 1030, 1031, 7, 34, 2, 2, 1031, 1032,
	7, 185, 2, 2, 1032, 1034, 5, 66, 34, 2, 1033, 1029, 3, 2, 2, 2, 1033, 1034,
	3, 2, 2, 2, 1034, 1042, 3, 2, 2, 2, 1035, 1036, 7, 6, 2, 2, 1036, 1037,
	7, 52, 2, 2, 1037, 1038, 7, 185, 2, 2, 1038, 1040, 5, 176, 89, 2, 1039,
	1041, 7, 53, 2, 2, 1040, 1039, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041,
	1043, 3, 2, 2, 2, 1042, 1035, 3, 2, 2, 2, 1042, 1043, 3, 2, 2, 2, 1043,
	1044, 3, 2, 2, 2, 1044, 1045, 7, 8, 2, 2, 1045, 121, 3, 2, 2, 2, 1046,
	1047, 7, 130, 2, 2, 1047, 1048, 7, 7, 2, 2, 1048, 1049, 5, 178, 90, 2,
	1049, 1052, 7, 6, 2, 2, 1050, 1051, 7, 131, 2, 2, 1051, 1053, 7, 185, 2,
	2, 1052, 1050, 3, 2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 1054, 3, 2, 2,
	2, 1054, 1059, 5, 188, 95, 2, 1055, 1056, 7, 6, 2, 2, 1056, 1057, 7, 132,
	2, 2, 1057, 1058, 7, 185, 2, 2, 1058, 1060, 5, 188, 95, 2, 1059, 1055,
	3, 2, 2, 2, 1059, 1060, 3, 2, 2, 2, 1060, 1065, 3, 2, 2, 2, 1061, 1062,
	7, 6, 2, 2, 1062, 1063, 7, 135, 2, 2, 1063, 1064, 7, 185, 2, 2, 1064, 1066,
	5, 66, 34, 2, 1065, 1061, 3, 2, 2, 2, 1065, 1066, 3, 2, 2, 2, 1066, 1071,
	3, 2, 2, 2, 1067, 1068, 7, 6, 2, 2, 1068, 1069, 7, 34, 2, 2, 1069, 1070,
	7, 185, 2, 2, 1070, 1072, 5, 66, 34, 2, 1071, 1067, 3, 2, 2, 2, 1071, 1072,
	3, 2, 2, 2, 1072, 1080, 3, 2, 2, 2, 1073, 1074, 7, 6, 2, 2, 1074, 1075,
	7, 52, 2, 2, 1075, 1076, 7, 185, 2, 2, 1076, 1078, 5, 176, 89, 2, 1077,
	1079, 7, 53, 2, 2, 1078, 1077, 3, 2, 2, 2, 1078, 1079, 3, 2, 2, 2, 1079,
	1081, 3, 2, 2, 2, 1080, 1073, 3, 2, 2, 2, 1080, 1081, 3, 2, 2, 2, 1081,
	1082, 3, 2, 2, 2, 1082, 1083, 7, 8, 2, 2, 1083, 123, 3, 2, 2, 2, 1084,
	1085, 7, 141, 2, 2, 1085, 1086, 7, 7, 2, 2, 1086, 1129, 5, 178, 90, 2,
	1087, 1088, 7, 6, 2, 2, 1088, 1089, 7, 140, 2, 2, 1089, 1090, 7, 185, 2,
	2, 1090, 1128, 7, 191, 2, 2, 1091, 1092, 7, 6, 2, 2, 1092, 1093, 7, 68,
	2, 2, 1093, 1128, 7, 191, 2, 2, 1094, 1095, 7, 6, 2, 2, 1095, 1096, 7,
	26, 2, 2, 1096, 1097, 7, 185, 2, 2, 1097, 1128, 5, 188, 95, 2, 1098, 1099,
	7, 6, 2, 2, 1099, 1100, 7, 66, 2, 2, 1100, 1101, 7, 7, 2, 2, 1101, 1106,
	5, 66, 34, 2, 1102, 1103, 7, 6, 2, 2, 1103, 1105, 5, 66, 34, 2, 1104, 1102,
	3, 2, 2, 2, 1105, 1108, 3, 2, 2, 2, 1106, 1104, 3, 2, 2, 2, 1106, 1107,
	3, 2, 2, 2, 1107, 1109, 3, 2, 2, 2, 1108, 1106, 3, 2, 2, 2, 1109, 1110,
	7, 8, 2, 2, 1110, 1128, 3, 2, 2, 2, 1111, 1112, 7, 6, 2, 2, 1112, 1113,
	7, 67, 2, 2, 1113, 1114, 7, 7, 2, 2, 1114, 1119, 5, 66, 34, 2, 1115, 1116,
	7, 6, 2, 2, 1116, 1118, 5, 66, 34, 2, 1117, 1115, 3, 2, 2, 2, 1118, 1121,
	3, 2, 2, 2, 1119, 1117, 3, 2, 2, 2, 1119, 1120, 3, 2, 2, 2, 1120, 1122,
	3, 2, 2, 2, 1121, 1119, 3, 2, 2, 2, 1122, 1123, 7, 8, 2, 2, 1123, 1128,
	3, 2, 2, 2, 1124, 1125, 7, 6, 2, 2, 1125, 1126, 7, 69, 2, 2, 1126, 1128,
	7, 191, 2, 2, 1127, 1087, 3, 2, 2, 2, 1127, 1091, 3, 2, 2, 2, 1127, 1094,
	3, 2, 2, 2, 1127, 1098, 3, 2, 2, 2, 1127, 1111, 3, 2, 2, 2, 1127, 1124,
	3, 2, 2, 2, 1128, 1131, 3, 2, 2, 2, 1129, 1127, 3, 2, 2, 2, 1129, 1130,
	3, 2, 2, 2, 1130, 1132, 3, 2, 2, 2, 1131, 1129, 3, 2, 2, 2, 1132, 1133,
	7, 8, 2, 2, 1133, 125, 3, 2, 2, 2, 1134, 1140, 5, 178, 90, 2, 1135, 1136,
	7, 137, 2, 2, 1136, 1137, 5, 26, 14, 2, 1137, 1138, 7, 139, 2, 2, 1138,
	1139, 5, 188, 95, 2, 1139, 1141, 3, 2, 2, 2, 1140, 1135, 3, 2, 2, 2, 1141,
	1142, 3, 2, 2, 2, 1142, 1140, 3, 2, 2, 2, 1142, 1143, 3, 2, 2, 2, 1143,
	1144, 3, 2, 2, 2, 1144, 1145, 7, 138, 2, 2, 1145, 127, 3, 2, 2, 2, 1146,
	1158, 7, 35, 2, 2, 1147, 1148, 7, 4, 2, 2, 1148, 1153, 5, 130, 66, 2, 1149,
	1150, 7, 6, 2, 2, 1150, 1152, 5, 130, 66, 2, 1151, 1149, 3, 2, 2, 2, 1152,
	1155, 3, 2, 2, 2, 1153, 1151, 3, 2, 2, 2, 1153, 1154, 3, 2, 2, 2, 1154,
	1156, 3, 2, 2, 2, 1155, 1153, 3, 2, 2, 2, 1156, 1157, 7, 5, 2, 2, 1157,
	1159, 3, 2, 2, 2, 1158, 1147, 3, 2, 2, 2, 1158, 1159, 3, 2, 2, 2, 1159,
	1160, 3, 2, 2, 2, 1160, 1163, 7, 193, 2, 2, 1161, 1162, 7, 32, 2, 2, 1162,
	1164, 7, 191, 2, 2, 1163, 1161, 3, 2, 2, 2, 1163, 1164, 3, 2, 2, 2, 1164,
	1167, 3, 2, 2, 2, 1165, 1166, 7, 48, 2, 2, 1166, 1168, 5, 186, 94, 2, 1167,
	1165, 3, 2, 2, 2, 1167, 1168, 3, 2, 2, 2, 1168, 1170, 3, 2, 2, 2, 1169,
	1171, 5, 74, 38, 2, 1170, 1169, 3, 2, 2, 2, 1170, 1171, 3, 2, 2, 2, 1171,
	129, 3, 2, 2, 2, 1172, 1173, 7, 36, 2, 2, 1173, 1174, 7, 7, 2, 2, 1174,
	1175, 5, 186, 94, 2, 1175, 1176, 7, 6, 2, 2, 1176, 1181, 5, 76, 39, 2,
	1177, 1178, 7, 6, 2, 2, 1178, 1180, 5, 76, 39, 2, 1179, 1177, 3, 2, 2,
	2, 1180, 1183, 3, 2, 2, 2, 1181, 1179, 3, 2, 2, 2, 1181, 1182, 3, 2, 2,
	2, 1182, 1184, 3, 2, 2, 2, 1183, 1181, 3, 2, 2, 2, 1184, 1185, 7, 8, 2,
	2, 1185, 131, 3, 2, 2, 2, 1186, 1187, 7, 16, 2, 2, 1187, 1192, 5, 178,
	90, 2, 1188, 1189, 7, 6, 2, 2, 1189, 1191, 5, 178, 90, 2, 1190, 1188, 3,
	2, 2, 2, 1191, 1194, 3, 2, 2, 2, 1192, 1190, 3, 2, 2, 2, 1192, 1193, 3,
	2, 2, 2, 1193, 1204, 3, 2, 2, 2, 1194, 1192, 3, 2, 2, 2, 1195, 1196, 7,
	6, 2, 2, 1196, 1197, 7, 125, 2, 2, 1197, 1198, 7, 7, 2, 2, 1198, 1199,
	5, 38, 20, 2, 1199, 1202, 7, 8, 2, 2, 1200, 1201, 7, 47, 2, 2, 1201, 1203,
	5, 186, 94, 2, 1202, 1200, 3, 2, 2, 2, 1202, 1203, 3, 2, 2, 2, 1203, 1205,
	3, 2, 2, 2, 1204, 1195, 3, 2, 2, 2, 1204, 1205, 3, 2, 2, 2, 1205, 1206,
	3, 2, 2, 2, 1206, 1207, 7, 64, 2, 2, 1207, 1212, 5, 180, 91, 2, 1208, 1209,
	7, 6, 2, 2, 1209, 1211, 5, 180, 91, 2, 1210, 1208, 3, 2, 2, 2, 1211, 1214,
	3, 2, 2, 2, 1212, 1210, 3, 2, 2, 2, 1212, 1213, 3, 2, 2, 2, 1213, 1217,
	3, 2, 2, 2, 1214, 1212, 3, 2, 2, 2, 1215, 1216, 7, 47, 2, 2, 1216, 1218,
	5, 186, 94, 2, 1217, 1215, 3, 2, 2, 2, 1217, 1218, 3, 2, 2, 2, 1218, 1221,
	3, 2, 2, 2, 1219, 1220, 7, 21, 2, 2, 1220, 1222, 5, 26, 14, 2, 1221, 1219,
	3, 2, 2, 2, 1221, 1222, 3, 2, 2, 2, 1222, 1224, 3, 2, 2, 2, 1223, 1225,
	7, 86, 2, 2, 1224, 1223, 3, 2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225, 1227,
	3, 2, 2, 2, 1226, 1228, 9, 13, 2, 2, 1227, 1226, 3, 2, 2, 2, 1227, 1228,
	3, 2, 2, 2, 1228, 1229, 3, 2, 2, 2, 1229, 1230, 7, 89, 2, 2, 1230, 1233,
	5, 186, 94, 2, 1231, 1232, 7, 47, 2, 2, 1232, 1234, 5, 186, 94, 2, 1233,
	1231, 3, 2, 2, 2, 1233, 1234, 3, 2, 2, 2, 1234, 1235, 3, 2, 2, 2, 1235,
	1236, 7, 83, 2, 2, 1236, 1237, 5, 178, 90, 2, 1237, 1238, 7, 185, 2, 2,
	1238, 1249, 5, 178, 90, 2, 1239, 1240, 7, 52, 2, 2, 1240, 1241, 7, 51,
	2, 2, 1241, 1246, 5, 72, 37, 2, 1242, 1243, 7, 6, 2, 2, 1243, 1245, 5,
	72, 37, 2, 1244, 1242, 3, 2, 2, 2, 1245, 1248, 3, 2, 2, 2, 1246, 1244,
	3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247, 1250, 3, 2, 2, 2, 1248, 1246,
	3, 2, 2, 2, 1249, 1239, 3, 2, 2, 2, 1249, 1250, 3, 2, 2, 2, 1250, 1253,
	3, 2, 2, 2, 1251, 1252, 7, 32, 2, 2, 1252, 1254, 7, 191, 2, 2, 1253, 1251,
	3, 2, 2, 2, 1253, 1254, 3, 2, 2, 2, 1254, 1265, 3, 2, 2, 2, 1255, 1263,
	7, 73, 2, 2, 1256, 1257, 7, 7, 2, 2, 1257, 1260, 7, 191, 2, 2, 1258, 1259,
	7, 6, 2, 2, 1259, 1261, 5, 178, 90, 2, 1260, 1258, 3, 2, 2, 2, 1260, 1261,
	3, 2, 2, 2, 1261, 1262, 3, 2, 2, 2, 1262, 1264, 7, 8, 2, 2, 1263, 1256,
	3, 2, 2, 2, 1263, 1264, 3, 2, 2, 2, 1264, 1266, 3, 2, 2, 2, 1265, 1255,
	3, 2, 2, 2, 1265, 1266, 3, 2, 2, 2, 1266, 1268, 3, 2, 2, 2, 1267, 1269,
	5, 74, 38, 2, 1268, 1267, 3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269, 1279,
	3, 2, 2, 2, 1270, 1271, 7, 90, 2, 2, 1271, 1276, 5, 80, 41, 2, 1272, 1273,
	7, 11, 2, 2, 1273, 1275, 5, 80, 41, 2, 1274, 1272, 3, 2, 2, 2, 1275, 1278,
	3, 2, 2, 2, 1276, 1274, 3, 2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 1280,
	3, 2, 2, 2, 1278, 1276, 3, 2, 2, 2, 1279, 1270, 3, 2, 2, 2, 1279, 1280,
	3, 2, 2, 2, 1280, 1283, 3, 2, 2, 2, 1281, 1282, 7, 48, 2, 2, 1282, 1284,
	5, 186, 94, 2, 1283, 1281, 3, 2, 2, 2, 1283, 1284, 3, 2, 2, 2, 1284, 133,
	3, 2, 2, 2, 1285, 1286, 7, 49, 2, 2, 1286, 1288, 5, 186, 94, 2, 1287, 1285,
	3, 2, 2, 2, 1287, 1288, 3, 2, 2, 2, 1288, 1290, 3, 2, 2, 2, 1289, 1291,
	7, 40, 2, 2, 1290, 1289, 3, 2, 2, 2, 1290, 1291, 3, 2, 2, 2, 1291, 1292,
	3, 2, 2, 2, 1292, 1293, 7, 70, 2, 2, 1293, 1297, 7, 62, 2, 2, 1294, 1295,
	5, 186, 94, 2, 1295, 1296, 7, 184, 2, 2, 1296, 1298, 3, 2, 2, 2, 1297,
	1294, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299, 3, 2, 2, 2, 1299,
	1304, 5, 182, 92, 2, 1300, 1302, 5, 136, 69, 2, 1301, 1303, 5, 138, 70,
	2, 1302, 1301, 3, 2, 2, 2, 1302, 1303, 3, 2, 2, 2, 1303, 1305, 3, 2, 2,
	2, 1304, 1300, 3, 2, 2, 2, 1304, 1305, 3, 2, 2, 2, 1305, 1312, 3, 2, 2,
	2, 1306, 1308, 7, 83, 2, 2, 1307, 1309, 7, 85, 2, 2, 1308, 1307, 3, 2,
	2, 2, 1308, 1309, 3, 2, 2, 2, 1309, 1310, 3, 2, 2, 2, 1310, 1311, 7, 84,
	2, 2, 1311, 1313, 5, 178, 90, 2, 1312, 1306, 3, 2, 2, 2, 1312, 1313, 3,
	2, 2, 2, 1313, 1316, 3, 2, 2, 2, 1314, 1315, 7, 48, 2, 2, 1315, 1317, 5,
	186, 94, 2, 1316, 1314, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 135,
	3, 2, 2, 2, 1318, 1319, 7, 7, 2, 2, 1319, 1324, 5, 164, 83, 2, 1320, 1321,
	7, 6, 2, 2, 1321, 1323, 5, 164, 83, 2, 1322, 1320, 3, 2, 2, 2, 1323, 1326,
	3, 2, 2, 2, 1324, 1322, 3, 2, 2, 2, 1324, 1325, 3, 2, 2, 2, 1325, 1327,
	3, 2, 2, 2, 1326, 1324, 3, 2, 2, 2, 1327, 1328, 7, 8, 2, 2, 1328, 137,
	3, 2, 2, 2, 1329, 1330, 7, 71, 2, 2, 1330, 1333, 5, 140, 71, 2, 1331, 1332,
	7, 6, 2, 2, 1332, 1334, 5, 140, 71, 2, 1333, 1331, 3, 2, 2, 2, 1333, 1334,
	3, 2, 2, 2, 1334, 139, 3, 2, 2, 2, 1335, 1336, 7, 7, 2, 2, 1336, 1341,
	5, 66, 34, 2, 1337, 1338, 7, 6, 2, 2, 1338, 1340, 5, 66, 34, 2, 1339, 1337,
	3, 2, 2, 2, 1340, 1343, 3, 2, 2, 2, 1341, 1339, 3, 2, 2, 2, 1341, 1342,
	3, 2, 2, 2, 1342, 1344, 3, 2, 2, 2, 1343, 1341, 3, 2, 2, 2, 1344, 1345,
	7, 8, 2, 2, 1345, 141, 3, 2, 2, 2, 1346, 1347, 9, 14, 2, 2, 1347, 1352,
	5, 180, 91, 2, 1348, 1349, 7, 6, 2, 2, 1349, 1351, 5, 180, 91, 2, 1350,
	1348, 3, 2, 2, 2, 1351, 1354, 3, 2, 2, 2, 1352, 1350, 3, 2, 2, 2, 1352,
	1353, 3, 2, 2, 2, 1353, 1356, 3, 2, 2, 2, 1354, 1352, 3, 2, 2, 2, 1355,
	1357, 5, 92, 47, 2, 1356, 1355, 3, 2, 2, 2, 1356, 1357, 3, 2, 2, 2, 1357,
	1367, 3, 2, 2, 2, 1358, 1359, 7, 144, 2, 2, 1359, 1364, 5, 144, 73, 2,
	1360, 1361, 7, 6, 2, 2, 1361, 1363, 5, 144, 73, 2, 1362, 1360, 3, 2, 2,
	2, 1363, 1366, 3, 2, 2, 2, 1364, 1362, 3, 2, 2, 2, 1364, 1365, 3, 2, 2,
	2, 1365, 1368, 3, 2, 2, 2, 1366, 1364, 3, 2, 2, 2, 1367, 1358, 3, 2, 2,
	2, 1367, 1368, 3, 2, 2, 2, 1368, 1390, 3, 2, 2, 2, 1369, 1370, 7, 21, 2,
	2, 1370, 1391, 5, 26, 14, 2, 1371, 1372, 7, 51, 2, 2, 1372, 1373, 7, 143,
	2, 2, 1373, 1391, 5, 188, 95, 2, 1374, 1375, 7, 51, 2, 2, 1375, 1376, 7,
	72, 2, 2, 1376, 1377, 7, 185, 2, 2, 1377, 1391, 5, 188, 95, 2, 1378, 1379,
	7, 51, 2, 2, 1379, 1380, 7, 7, 2, 2, 1380, 1385, 5, 188, 95, 2, 1381, 1382,
	7, 6, 2, 2, 1382, 1384, 5, 188, 95, 2, 1383, 1381, 3, 2, 2, 2, 1384, 1387,
	3, 2, 2, 2, 1385, 1383, 3, 2, 2, 2, 1385, 1386, 3, 2, 2, 2, 1386, 1388,
	3, 2, 2, 2, 1387, 1385, 3, 2, 2, 2, 1388, 1389, 7, 8, 2, 2, 1389, 1391,
	3, 2, 2, 2, 1390, 1369, 3, 2, 2, 2, 1390, 1371, 3, 2, 2, 2, 1390, 1374,
	3, 2, 2, 2, 1390, 1378, 3, 2, 2, 2, 1391, 1394, 3, 2, 2, 2, 1392, 1393,
	7, 48, 2, 2, 1393, 1395, 5, 186, 94, 2, 1394, 1392, 3, 2, 2, 2, 1394, 1395,
	3, 2, 2, 2, 1395, 143, 3, 2, 2, 2, 1396, 1397, 5, 178, 90, 2, 1397, 1398,
	7, 185, 2, 2, 1398, 1399, 5, 66, 34, 2, 1399, 1415, 3, 2, 2, 2, 1400, 1401,
	9, 15, 2, 2, 1401, 1402, 7, 7, 2, 2, 1402, 1403, 5, 178, 90, 2, 1403, 1404,
	7, 6, 2, 2, 1404, 1409, 5, 66, 34, 2, 1405, 1406, 7, 6, 2, 2, 1406, 1408,
	5, 66, 34, 2, 1407, 1405, 3, 2, 2, 2, 1408, 1411, 3, 2, 2, 2, 1409, 1407,
	3, 2, 2, 2, 1409, 1410, 3, 2, 2, 2, 1410, 1412, 3, 2, 2, 2, 1411, 1409,
	3, 2, 2, 2, 1412, 1413, 7, 8, 2, 2, 1413, 1415, 3, 2, 2, 2, 1414, 1396,
	3, 2, 2, 2, 1414, 1400, 3, 2, 2, 2, 1415, 1447, 3, 2, 2, 2, 1416, 1417,
	7, 148, 2, 2, 1417, 1418, 9, 15, 2, 2, 1418, 1419, 7, 7, 2, 2, 1419, 1420,
	5, 178, 90, 2, 1420, 1421, 7, 6, 2, 2, 1421, 1426, 5, 66, 34, 2, 1422,
	1423, 7, 6, 2, 2, 1423, 1425, 5, 66, 34, 2, 1424, 1422, 3, 2, 2, 2, 1425,
	1428, 3, 2, 2, 2, 1426, 1424, 3, 2, 2, 2, 1426, 1427, 3, 2, 2, 2, 1427,
	1429, 3, 2, 2, 2, 1428, 1426, 3, 2, 2, 2, 1429, 1430, 7, 8, 2, 2, 1430,
	1447, 3, 2, 2, 2, 1431, 1432, 7, 15, 2, 2, 1432, 1433, 9, 15, 2, 2, 1433,
	1434, 7, 7, 2, 2, 1434, 1435, 5, 178, 90, 2, 1435, 1436, 7, 6, 2, 2, 1436,
	1441, 5, 66, 34, 2, 1437, 1438, 7, 6, 2, 2, 1438, 1440, 5, 66, 34, 2, 1439,
	1437, 3, 2, 2, 2, 1440, 1443, 3, 2, 2, 2, 1441, 1439, 3, 2, 2, 2, 1441,
	1442, 3, 2, 2, 2, 1442, 1444, 3, 2, 2, 2, 1443, 1441, 3, 2, 2, 2, 1444,
	1445, 7, 8, 2, 2, 1445, 1447, 3, 2, 2, 2, 1446, 1414, 3, 2, 2, 2, 1446,
	1416, 3, 2, 2, 2, 1446, 1431, 3, 2, 2, 2, 1447, 145, 3, 2, 2, 2, 1448,
	1449, 9, 16, 2, 2, 1449, 1454, 5, 188, 95, 2, 1450, 1451, 7, 6, 2, 2, 1451,
	1453, 5, 188, 95, 2, 1452, 1450, 3, 2, 2, 2, 1453, 1456, 3, 2, 2, 2, 1454,
	1452, 3, 2, 2, 2, 1454, 1455, 3, 2, 2, 2, 1455, 1458, 3, 2, 2, 2, 1456,
	1454, 3, 2, 2, 2, 1457, 1459, 5, 92, 47, 2, 1458, 1457, 3, 2, 2, 2, 1458,
	1459, 3, 2, 2, 2, 1459, 1474, 3, 2, 2, 2, 1460, 1461, 7, 144, 2, 2, 1461,
	1462, 5, 178, 90, 2, 1462, 1463, 7, 185, 2, 2, 1463, 1471, 5, 66, 34, 2,
	1464, 1465, 7, 6, 2, 2, 1465, 1466, 5, 178, 90, 2, 1466, 1467, 7, 185,
	2, 2, 1467, 1468, 5, 66, 34, 2, 1468, 1470, 3, 2, 2, 2, 1469, 1464, 3,
	2, 2, 2, 1470, 1473, 3, 2, 2, 2, 1471, 1469, 3, 2, 2, 2, 1471, 1472, 3,
	2, 2, 2, 1472, 1475, 3, 2, 2, 2, 1473, 1471, 3, 2, 2, 2, 1474, 1460, 3,
	2, 2, 2, 1474, 1475, 3, 2, 2, 2, 1475, 1478, 3, 2, 2, 2, 1476, 1477, 7,
	48, 2, 2, 1477, 1479, 5, 186, 94, 2, 1478, 1476, 3, 2, 2, 2, 1478, 1479,
	3, 2, 2, 2, 1479, 147, 3, 2, 2, 2, 1480, 1481, 7, 151, 2, 2, 1481, 1482,
	7, 64, 2, 2, 1482, 1487, 5, 180, 91, 2, 1483, 1484, 7, 6, 2, 2, 1484, 1486,
	5, 180, 91, 2, 1485, 1483, 3, 2, 2, 2, 1486, 1489, 3, 2, 2, 2, 1487, 1485,
	3, 2, 2, 2, 1487, 1488, 3, 2, 2, 2, 1488, 1505, 3, 2, 2, 2, 1489, 1487,
	3, 2, 2, 2, 1490, 1491, 7, 21, 2, 2, 1491, 1506, 5, 26, 14, 2, 1492, 1493,
	7, 51, 2, 2, 1493, 1494, 7, 143, 2, 2, 1494, 1506, 5, 188, 95, 2, 1495,
	1496, 7, 51, 2, 2, 1496, 1497, 7, 72, 2, 2, 1497, 1498, 7, 185, 2, 2, 1498,
	1506, 5, 188, 95, 2, 1499, 1500, 7, 51, 2, 2, 1500, 1501, 7, 142, 2, 2,
	1501, 1502, 7, 7, 2, 2, 1502, 1503, 5, 188, 95, 2, 1503, 1504, 7, 8, 2,
	2, 1504, 1506, 3, 2, 2, 2, 1505, 1490, 3, 2, 2, 2, 1505, 1492, 3, 2, 2,
	2, 1505, 1495, 3, 2, 2, 2, 1505, 1499, 3, 2, 2, 2, 1506, 1509, 3, 2, 2,
	2, 1507, 1508, 7, 48, 2, 2, 1508, 1510, 5, 186, 94, 2, 1509, 1507, 3, 2,
	2, 2, 1509, 1510, 3, 2, 2, 2, 1510, 149, 3, 2, 2, 2, 1511, 1513, 9, 17,
	2, 2, 1512, 1514, 7, 56, 2, 2, 1513, 1512, 3, 2, 2, 2, 1513, 1514, 3, 2,
	2, 2, 1514, 1515, 3, 2, 2, 2, 1515, 1520, 5, 180, 91, 2, 1516, 1517, 7,
	6, 2, 2, 1517, 1519, 5, 180, 91, 2, 1518, 1516, 3, 2, 2, 2, 1519, 1522,
	3, 2, 2, 2, 1520, 1518, 3, 2, 2, 2, 1520, 1521, 3, 2, 2, 2, 1521, 151,
	3, 2, 2, 2, 1522, 1520, 3, 2, 2, 2, 1523, 1524, 7, 148, 2, 2, 1524, 1525,
	7, 91, 2, 2, 1525, 1526, 5, 180, 91, 2, 1526, 1527, 7, 63, 2, 2, 1527,
	1532, 5, 180, 91, 2, 1528, 1529, 7, 6, 2, 2, 1529, 1531, 5, 180, 91, 2,
	1530, 1528, 3, 2, 2, 2, 1531, 1534, 3, 2, 2, 2, 1532, 1530, 3, 2, 2, 2,
	1532, 1533, 3, 2, 2, 2, 1533, 1548, 3, 2, 2, 2, 1534, 1532, 3, 2, 2, 2,
	1535, 1536, 7, 151, 2, 2, 1536, 1537, 7, 91, 2, 2, 1537, 1538, 5, 180,
	91, 2, 1538, 1539, 7, 64, 2, 2, 1539, 1544, 5, 180, 91, 2, 1540, 1541,
	7, 6, 2, 2, 1541, 1543, 5, 180, 91, 2, 1542, 1540, 3, 2, 2, 2, 1543, 1546,
	3, 2, 2, 2, 1544, 1542, 3, 2, 2, 2, 1544, 1545, 3, 2, 2, 2, 1545, 1548,
	3, 2, 2, 2, 1546, 1544, 3, 2, 2, 2, 1547, 1523, 3, 2, 2, 2, 1547, 1535,
	3, 2, 2, 2, 1548, 153, 3, 2, 2, 2, 1549, 1550, 7, 92, 2, 2, 1550, 1555,
	5, 180, 91, 2, 1551, 1552, 7, 6, 2, 2, 1552, 1554, 5, 180, 91, 2, 1553,
	1551, 3, 2, 2, 2, 1554, 1557, 3, 2, 2, 2, 1555, 1553, 3, 2, 2, 2, 1555,
	1556, 3, 2, 2, 2, 1556, 1558, 3, 2, 2, 2, 1557, 1555, 3, 2, 2, 2, 1558,
	1559, 7, 144, 2, 2, 1559, 1564, 5, 64, 33, 2, 1560, 1561, 7, 6, 2, 2, 1561,
	1563, 5, 64, 33, 2, 1562, 1560, 3, 2, 2, 2, 1563, 1566, 3, 2, 2, 2, 1564,
	1562, 3, 2, 2, 2, 1564, 1565, 3, 2, 2, 2, 1565, 155, 3, 2, 2, 2, 1566,
	1564, 3, 2, 2, 2, 1567, 1568, 7, 49, 2, 2, 1568, 1570, 5, 188, 95, 2, 1569,
	1567, 3, 2, 2, 2, 1569, 1570, 3, 2, 2, 2, 1570, 1571, 3, 2, 2, 2, 1571,
	1572, 7, 37, 2, 2, 1572, 1577, 7, 193, 2, 2, 1573, 1574, 7, 11, 2, 2, 1574,
	1576, 7, 193, 2, 2, 1575, 1573, 3, 2, 2, 2, 1576, 1579, 3, 2, 2, 2, 1577,
	1575, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578, 1582, 3, 2, 2, 2, 1579,
	1577, 3, 2, 2, 2, 1580, 1581, 7, 48, 2, 2, 1581, 1583, 5, 186, 94, 2, 1582,
	1580, 3, 2, 2, 2, 1582, 1583, 3, 2, 2, 2, 1583, 1585, 3, 2, 2, 2, 1584,
	1586, 5, 74, 38, 2, 1585, 1584, 3, 2, 2, 2, 1585, 1586, 3, 2, 2, 2, 1586,
	157, 3, 2, 2, 2, 1587, 1603, 9, 18, 2, 2, 1588, 1589, 7, 4, 2, 2, 1589,
	1590, 7, 41, 2, 2, 1590, 1591, 7, 185, 2, 2, 1591, 1595, 7, 193, 2, 2,
	1592, 1593, 7, 43, 2, 2, 1593, 1594, 7, 185, 2, 2, 1594, 1596, 7, 193,
	2, 2, 1595, 1592, 3, 2, 2, 2, 1595, 1596, 3, 2, 2, 2, 1596, 1600, 3, 2,
	2, 2, 1597, 1598, 7, 42, 2, 2, 1598, 1599, 7, 185, 2, 2, 1599, 1601, 7,
	193, 2, 2, 1600, 1597, 3, 2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 1602,
	3, 2, 2, 2, 1602, 1604, 7, 5, 2, 2, 1603, 1588, 3, 2, 2, 2, 1603, 1604,
	3, 2, 2, 2, 1604, 1605, 3, 2, 2, 2, 1605, 1610, 5, 160, 81, 2, 1606, 1607,
	7, 11, 2, 2, 1607, 1609, 5, 160, 81, 2, 1608, 1606, 3, 2, 2, 2, 1609, 1612,
	3, 2, 2, 2, 1610, 1608, 3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 159,
	3, 2, 2, 2, 1612, 1610, 3, 2, 2, 2, 1613, 1616, 7, 193, 2, 2, 1614, 1615,
	7, 48, 2, 2, 1615, 1617, 5, 186, 94, 2, 1616, 1614, 3, 2, 2, 2, 1616, 1617,
	3, 2, 2, 2, 1617, 1619, 3, 2, 2, 2, 1618, 1620, 5, 74, 38, 2, 1619, 1618,
	3, 2, 2, 2, 1619, 1620, 3, 2, 2, 2, 1620, 161, 3, 2, 2, 2, 1621, 1623,
	7, 167, 2, 2, 1622, 1624, 7, 59, 2, 2, 1623, 1622, 3, 2, 2, 2, 1623, 1624,
	3, 2, 2, 2, 1624, 1642, 3, 2, 2, 2, 1625, 1626, 7, 166, 2, 2, 1626, 1628,
	7, 7, 2, 2, 1627, 1629, 5, 164, 83, 2, 1628, 1627, 3, 2, 2, 2, 1628, 1629,
	3, 2, 2, 2, 1629, 1634, 3, 2, 2, 2, 1630, 1631, 7, 6, 2, 2, 1631, 1633,
	5, 164, 83, 2, 1632, 1630, 3, 2, 2, 2, 1633, 1636, 3, 2, 2, 2, 1634, 1632,
	3, 2, 2, 2, 1634, 1635, 3, 2, 2, 2, 1635, 1637, 3, 2, 2, 2, 1636, 1634,
	3, 2, 2, 2, 1637, 1643, 7, 8, 2, 2, 1638, 1640, 7, 76, 2, 2, 1639, 1641,
	9, 15, 2, 2, 1640, 1639, 3, 2, 2, 2, 1640, 1641, 3, 2, 2, 2, 1641, 1643,
	3, 2, 2, 2, 1642, 1625, 3, 2, 2, 2, 1642, 1638, 3, 2, 2, 2, 1643, 1644,
	3, 2, 2, 2, 1644, 1646, 7, 64, 2, 2, 1645, 1647, 7, 165, 2, 2, 1646, 1645,
	3, 2, 2, 2, 1646, 1647, 3, 2, 2, 2, 1647, 1648, 3, 2, 2, 2, 1648, 1652,
	5, 188, 95, 2, 1649, 1650, 7, 169, 2, 2, 1650, 1651, 7, 51, 2, 2, 1651,
	1653, 7, 193, 2, 2, 1652, 1649, 3, 2, 2, 2, 1652, 1653, 3, 2, 2, 2, 1653,
	1660, 3, 2, 2, 2, 1654, 1657, 7, 32, 2, 2, 1655, 1656, 7, 191, 2, 2, 1656,
	1658, 7, 6, 2, 2, 1657, 1655, 3, 2, 2, 2, 1657, 1658, 3, 2, 2, 2, 1658,
	1659, 3, 2, 2, 2, 1659, 1661, 7, 191, 2, 2, 1660, 1654, 3, 2, 2, 2, 1660,
	1661, 3, 2, 2, 2, 1661, 1664, 3, 2, 2, 2, 1662, 1663, 7, 48, 2, 2, 1663,
	1665, 5, 186, 94, 2, 1664, 1662, 3, 2, 2, 2, 1664, 1665, 3, 2, 2, 2, 1665,
	163, 3, 2, 2, 2, 1666, 1668, 5, 178, 90, 2, 1667, 1669, 5, 172, 87, 2,
	1668, 1667, 3, 2, 2, 2, 1668, 1669, 3, 2, 2, 2, 1669, 165, 3, 2, 2, 2,
	1670, 1671, 7, 170, 2, 2, 1671, 1678, 7, 193, 2, 2, 1672, 1673, 7, 51,
	2, 2, 1673, 1676, 5, 188, 95, 2, 1674, 1675, 7, 6, 2, 2, 1675, 1677, 5,
	188, 95, 2, 1676, 1674, 3, 2, 2, 2, 1676, 1677, 3, 2, 2, 2, 1677, 1679,
	3, 2, 2, 2, 1678, 1672, 3, 2, 2, 2, 1678, 1679, 3, 2, 2, 2, 1679, 167,
	3, 2, 2, 2, 1680, 1681, 7, 171, 2, 2, 1681, 1682, 5, 170, 86, 2, 1682,
	1683, 5, 188, 95, 2, 1683, 1684, 7, 172, 2, 2, 1684, 1685, 7, 7, 2, 2,
	1685, 1690, 5, 188, 95, 2, 1686, 1687, 7, 6, 2, 2, 1687, 1689, 5, 188,
	95, 2, 1688, 1686, 3, 2, 2, 2, 1689, 1692, 3, 2, 2, 2, 1690, 1688, 3, 2,
	2, 2, 1690, 1691, 3, 2, 2, 2, 1691, 1693, 3, 2, 2, 2, 1692, 1690, 3, 2,
	2, 2, 1693, 1694, 7, 8, 2, 2, 1694, 169, 3, 2, 2, 2, 1695, 1696, 9, 19,
	2, 2, 1696, 171, 3, 2, 2, 2, 1697, 1698, 9, 20, 2, 2, 1698, 173, 3, 2,
	2, 2, 1699, 1700, 9, 21, 2, 2, 1700, 175, 3, 2, 2, 2, 1701, 1706, 5, 76,
	39, 2, 1702, 1703, 9, 22, 2, 2, 1703, 1705, 5, 76, 39, 2, 1704, 1702, 3,
	2, 2, 2, 1705, 1708, 3, 2, 2, 2, 1706, 1704, 3, 2, 2, 2, 1706, 1707, 3,
	2, 2, 2, 1707, 177, 3, 2, 2, 2, 1708, 1706, 3, 2, 2, 2, 1709, 1714, 5,
	186, 94, 2, 1710, 1711, 9, 23, 2, 2, 1711, 1713, 5, 186, 94, 2, 1712, 1710,
	3, 2, 2, 2, 1713, 1716, 3, 2, 2, 2, 1714, 1712, 3, 2, 2, 2, 1714, 1715,
	3, 2, 2, 2, 1715, 1719, 3, 2, 2, 2, 1716, 1714, 3, 2, 2, 2, 1717, 1719,
	7, 180, 2, 2, 1718, 1709, 3, 2, 2, 2, 1718, 1717, 3, 2, 2, 2, 1719, 179,
	3, 2, 2, 2, 1720, 1723, 5, 182, 92, 2, 1721, 1722, 7, 184, 2, 2, 1722,
	1724, 5, 186, 94, 2, 1723, 1721, 3, 2, 2, 2, 1723, 1724, 3, 2, 2, 2, 1724,
	181, 3, 2, 2, 2, 1725, 1727, 7, 194, 2, 2, 1726, 1728, 7, 180, 2, 2, 1727,
	1726, 3, 2, 2, 2, 1727, 1728, 3, 2, 2, 2, 1728, 1731, 3, 2, 2, 2, 1729,
	1731, 7, 193, 2, 2, 1730, 1725, 3, 2, 2, 2, 1730, 1729, 3, 2, 2, 2, 1731,
	183, 3, 2, 2, 2, 1732, 1735, 5, 186, 94, 2, 1733, 1735, 5, 188, 95, 2,
	1734, 1732, 3, 2, 2, 2, 1734, 1733, 3, 2, 2, 2, 1735, 185, 3, 2, 2, 2,
	1736, 1739, 7, 194, 2, 2, 1737, 1739, 5, 194, 98, 2, 1738, 1736, 3, 2,
	2, 2, 1738, 1737, 3, 2, 2, 2, 1739, 187, 3, 2, 2, 2, 1740, 1741, 9, 24,
	2, 2, 1741, 189, 3, 2, 2, 2, 1742, 1743, 9, 25, 2, 2, 1743, 191, 3, 2,
	2, 2, 1744, 1745, 9, 26, 2, 2, 1745, 193, 3, 2, 2, 2, 1746, 1747, 9, 27,
	2, 2, 1747, 195, 3, 2, 2, 2, 244, 201, 220, 224, 231, 238, 240, 243, 250,
	254, 257, 261, 265, 271, 279, 285, 287, 290, 293, 302, 305, 309, 314, 318,
	320, 327, 330, 332, 334, 336, 340, 343, 356, 364, 375, 380, 389, 401, 415,
	421, 425, 428, 432, 436, 444, 448, 450, 453, 461, 469, 471, 475, 481, 486,
	493, 503, 510, 512, 522, 532, 549, 555, 562, 577, 587, 589, 598, 608, 614,
	622, 624, 631, 645, 653, 660, 663, 669, 672, 675, 679, 687, 692, 701, 706,
	708, 714, 716, 722, 726, 733, 738, 741, 748, 754, 757, 761, 765, 768, 772,
	783, 792, 795, 798, 807, 812, 815, 831, 839, 844, 847, 856, 861, 865, 868,
	877, 880, 889, 901, 919, 921, 923, 939, 942, 953, 962, 968, 976, 979, 985,
	996, 1005, 1012, 1020, 1027, 1033, 1040, 1042, 1052, 1059, 1065, 1071,
	1078, 1080, 1106, 1119, 1127, 1129, 1142, 1153, 1158, 1163, 1167, 1170,
	1181, 1192, 1202, 1204, 1212, 1217, 1221, 1224, 1227, 1233, 1246, 1249,
	1253, 1260, 1263, 1265, 1268, 1276, 1279, 1283, 1287, 1290, 1297, 1302,
	1304, 1308, 1312, 1316, 1324, 1333, 1341, 1352, 1356, 1364, 1367, 1385,
	1390, 1394, 1409, 1414, 1426, 1441, 1446, 1454, 1458, 1471, 1474, 1478,
	1487, 1505, 1509, 1513, 1520, 1532, 1544, 1547, 1555, 1564, 1569, 1577,
	1582, 1585, 1595, 1600, 1603, 1610, 1616, 1619, 1623, 1628, 1634, 1640,
	1642, 1646, 1652, 1657, 1660, 1664, 1668, 1676, 1678, 1690, 1706, 1714,
	1718, 1723, 1727, 1730, 1734, 1738,
}
var literalNames = []string{
	"", "'|'", "'/*+'", "'*/'", "','", "'('", "')'", "'['", "']'", "';'", "'precision_threshold'",
	"'percents'", "'$'", "'REMOVE'", "'SELECT'", "'SCROLL'", "'HIGHLIGHT'",
	"'SCROLL_ID'", "'INNER_HIT'", "'WHERE'", "'CUSTOM_SCORE'", "'RESCORE'",
	"'WINDOWS'", "'COLLAPSE'", "'SCORE'", "'MEM-SORT'", "'KEEP'", "'WEIGHT'",
	"'EXPLAIN'", "'WHERES'", "'LIMIT'", "'TRACK_HIT'", "'OFFSET'", "'SQL'",
	"'STRUCT'", "'HQL'", "'CK'", "'PQL'", "'MQL'", "'URL'", "'PASSWORD'", "'USER'",
	"'WITH'", "'NUMBER'", "", "'AS'", "'MAP'", "'USING'", "'GROUP'", "'BY'",
	"'ORDER'", "'ASC'", "'DESC'", "'DESCRIBE'", "'TEMPLATE'", "'BETWEEN'",
	"'OR'", "'ALL'", "'AND'", "'NOT'", "'INTO'", "'TO'", "'FROM'", "'HAVING'",
	"'EXCLUDE'", "'INCLUDE'", "'DOC_COUNT'", "'TOP'", "'INSERT'", "'VALUES'",
	"'ID'", "'SLICE'", "'EXPORT'", "'HEADER'", "'JSON'", "'CSV'", "'EXCEL'",
	"'SEP'", "", "'LANG'", "'RETURN'", "'ON'", "'PK'", "'UUID'", "'MEM'", "'RIGHT'",
	"'LEFT'", "'JOIN'", "'AGG'", "'ALIAS'", "'ALTER'", "'RLIKE'", "'LIKE'",
	"'NOT_LIKE'", "'STARTS_WITH'", "'IN'", "'OUT'", "'HAS_ANY'", "'HAS_ALL'",
	"'EXIST'", "'MISS'", "'QUERY_STRING'", "'MATCH'", "'MULTI_MATCH'", "'MATCH_PHRASE_PREFIX'",
	"'MATCH_PHRASE'", "'KNN'", "'LOCAL_FILE'", "'HAS_CHILD'", "'HAS_PARENT'",
	"'COUNT'", "'MAX'", "'MIN'", "'AVG'", "'AVG_DATE'", "'SUM'", "'DISTINCT'",
	"'VALUE_COUNT'", "'PERCENTILE_RANKS'", "'PERCENTILES'", "'PERCENT'", "'DISTINCT_PERCENT'",
	"'TOP_HITS'", "'POST_EXPR'", "'MATH'", "'RANGE'", "'DATE_RANGE'", "'HISTOGRAM'",
	"'DATE_HISTOGRAM'", "'INTERVAL'", "'FORMAT'", "'KEYED'", "'SIZE'", "'MISSING'",
	"'NULL'", "'WHEN'", "'END'", "'THEN'", "'SAMPLE'", "'SIGNIFICANT'", "'IDS'",
	"'IDS_FILE'", "'SET'", "'UPDATE'", "'UPSERT'", "'PUT'", "'ADD'", "'BATCH_UPDATE'",
	"'BATCH_UPSERT'", "'DELETE'", "'ARRAY'", "'FALSE'", "'TRUE'", "'BOOLEAN'",
	"'LONG'", "", "'DOUBLE'", "", "'DATETIME'", "", "", "", "'FLOAT'", "'LOCAL'",
	"'DATA'", "'LOAD'", "'LIST'", "'SEPARATED'", "'ANALYZE'", "'NLP'", "'ENABLE'",
	"", "'NAME'", "", "", "", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'.'",
	"", "'!='", "'<'", "'<='", "'>'", "'>='",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "REMOVE", "SELECT",
	"SCROLL", "HIGHLIGHT", "SCROLL_ID", "INNER_HIT", "WHERE", "CUSTOM_SCORE",
	"RESCORE", "WINDOWS", "COLLAPSE", "SCORE", "MEM_SORT", "KEEP", "WEIGHT",
	"EXPLAIN", "WHERES", "LIMIT", "TRACK_HIT", "OFFSET", "SQL", "STRUCT", "HQL",
	"CK", "PQL", "MQL", "URL", "PASSWORD", "USER", "WITH", "NUMBER", "STRING",
	"AS", "MAP", "USING", "GROUP", "BY", "ORDER", "ASC", "DESC", "DESCRIBE",
	"TEMPLATE", "BETWEEN", "OR", "ALL", "AND", "NOT", "INTO", "TO", "FROM",
	"HAVING", "EXCLUDE", "INCLUDE", "DOC_COUNT", "TOP", "INSERT", "VALUES",
	"ID", "SLICE", "EXPORT", "HEADER", "JSON", "CSV", "EXCEL", "SEP", "SCRIPT",
	"LANG", "RETURN", "ON", "PK", "UUID", "MEM", "RIGHT", "LEFT", "JOIN", "AGG",
	"ALIAS", "ALTER", "RLIKE", "LIKE", "NOT_LIKE", "STARTS_WITH", "IN", "OUT",
	"HAS_ANY", "HAS_ALL", "EXIST", "MISS", "QUERY_STRING", "MATCH", "MULTI_MATCH",
	"MATCH_PHRASE_PREFIX", "MATCH_PHRASE", "KNN", "LOCAL_FILE", "HAS_CHILD",
	"HAS_PARENT", "COUNT", "MAX", "MIN", "AVG", "AVG_DATE", "SUM", "DISTINCT",
	"VALUE_COUNT", "PERCENTILE_RANKS", "PERCENTILES", "PERCENT", "DISTINCT_PERCENT",
	"TOP_HITS", "POST_EXPR", "MATH", "RANGE", "DATE_RANGE", "HISTOGRAM", "DATE_HISTOGRAM",
	"INTERVAL", "FORMAT", "KEYED", "SIZE", "MISSING", "NULL", "WHEN", "END",
	"THEN", "SAMPLE", "SIGNIFICANT", "IDS", "IDS_FILE", "SET", "UPDATE", "UPSERT",
	"PUT", "ADD", "BATCH_UPDATE", "BATCH_UPSERT", "DELETE", "ARRAY", "FALSE",
	"TRUE", "BOOLEAN_T", "LONG_T", "STRING_T", "DOUBLE_T", "INTEGER_T", "DATETIME_T",
	"TIMESTAMP_T", "DATE_T", "TIME_T", "FLOAT_T", "LOCAL", "DATA", "LOAD",
	"LIST", "SEPARATED", "ANALYZE", "NLP", "ENABLE", "SEGMENT", "NAME", "ORG",
	"LOC", "TIME", "PLUS", "MINUS", "MUL", "DIV", "MOD", "POWER", "DOT", "EQ",
	"NE", "LT", "LE", "GT", "GE", "LONG", "DOUBLE", "QUOTASTR", "IDENTIFIER",
	"EXT_IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMNET", "WS",
}

var ruleNames = []string{
	"elasticSQL", "statement", "queryStatement", "collapseExpr", "customScoreExpr",
	"rescoreExpr", "memSort", "innerHit", "scriptFields", "scriptField", "highlight",
	"fieldAs", "whereExpression", "logicalExpr", "comparableExpression", "termCompare",
	"btwCompare", "arithmeticExpressionCompare", "arithmeticExpression", "addition",
	"multiplyingExpression", "multi", "atom", "functionalCompare", "joinFunction",
	"joinFunctionNames", "scriptFunction", "fullLevelFunction", "fullLevelFunctionNames",
	"termLevelFunction", "termLevelFunctionNames", "prop", "param", "param2",
	"arrayValue", "sortItem", "exportStatement", "exportField", "analysisStatement",
	"aggStatement", "metricAgg", "metricNames", "metricParams", "mkv", "metricParamNames",
	"scriptPhrase", "bucketAggList", "bucketAgg", "bucketAggChoice", "termsBucket",
	"havingExpr", "rangeBucket", "rangeExpr", "rangeUnit", "rangeFromTo", "dateRangeBucket",
	"dateRangeExpr", "dateRange", "dateRangeFromTo", "histogramBucket", "dateHistogramBucket",
	"significantBucket", "filtersBucket", "sparkStatement", "dataStruct", "joinQueryAnalysisStatement",
	"insertStatement", "fieldList", "valueList", "paramValues", "updateStatement",
	"updateField", "batchUpdateStatement", "deleteStatement", "descStatement",
	"aliasStatement", "alterStatement", "hive2Statement", "jdbcStatement",
	"basicSQL", "fileLoadStatement", "fieldDefine", "analyzeStatement", "hanLPStatement",
	"nlpFunc", "dataType", "comparisonOperator", "pathIdentifier", "fieldIdentifier",
	"indexIdentifier", "indexName", "asIdentifier", "strictIdentifier", "str",
	"number", "booleanValue", "nonReserved",
}

type ElasticSQLParser struct {
	*antlr.BaseParser
}

// NewElasticSQLParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *ElasticSQLParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewElasticSQLParser(input antlr.TokenStream) *ElasticSQLParser {
	this := new(ElasticSQLParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "ElasticSQL.g4"

	return this
}

// ElasticSQLParser tokens.
const (
	ElasticSQLParserEOF                 = antlr.TokenEOF
	ElasticSQLParserT__0                = 1
	ElasticSQLParserT__1                = 2
	ElasticSQLParserT__2                = 3
	ElasticSQLParserT__3                = 4
	ElasticSQLParserT__4                = 5
	ElasticSQLParserT__5                = 6
	ElasticSQLParserT__6                = 7
	ElasticSQLParserT__7                = 8
	ElasticSQLParserT__8                = 9
	ElasticSQLParserT__9                = 10
	ElasticSQLParserT__10               = 11
	ElasticSQLParserT__11               = 12
	ElasticSQLParserREMOVE              = 13
	ElasticSQLParserSELECT              = 14
	ElasticSQLParserSCROLL              = 15
	ElasticSQLParserHIGHLIGHT           = 16
	ElasticSQLParserSCROLL_ID           = 17
	ElasticSQLParserINNER_HIT           = 18
	ElasticSQLParserWHERE               = 19
	ElasticSQLParserCUSTOM_SCORE        = 20
	ElasticSQLParserRESCORE             = 21
	ElasticSQLParserWINDOWS             = 22
	ElasticSQLParserCOLLAPSE            = 23
	ElasticSQLParserSCORE               = 24
	ElasticSQLParserMEM_SORT            = 25
	ElasticSQLParserKEEP                = 26
	ElasticSQLParserWEIGHT              = 27
	ElasticSQLParserEXPLAIN             = 28
	ElasticSQLParserWHERES              = 29
	ElasticSQLParserLIMIT               = 30
	ElasticSQLParserTRACK_HIT           = 31
	ElasticSQLParserOFFSET              = 32
	ElasticSQLParserSQL                 = 33
	ElasticSQLParserSTRUCT              = 34
	ElasticSQLParserHQL                 = 35
	ElasticSQLParserCK                  = 36
	ElasticSQLParserPQL                 = 37
	ElasticSQLParserMQL                 = 38
	ElasticSQLParserURL                 = 39
	ElasticSQLParserPASSWORD            = 40
	ElasticSQLParserUSER                = 41
	ElasticSQLParserWITH                = 42
	ElasticSQLParserNUMBER              = 43
	ElasticSQLParserSTRING              = 44
	ElasticSQLParserAS                  = 45
	ElasticSQLParserMAP                 = 46
	ElasticSQLParserUSING               = 47
	ElasticSQLParserGROUP               = 48
	ElasticSQLParserBY                  = 49
	ElasticSQLParserORDER               = 50
	ElasticSQLParserASC                 = 51
	ElasticSQLParserDESC                = 52
	ElasticSQLParserDESCRIBE            = 53
	ElasticSQLParserTEMPLATE            = 54
	ElasticSQLParserBETWEEN             = 55
	ElasticSQLParserOR                  = 56
	ElasticSQLParserALL                 = 57
	ElasticSQLParserAND                 = 58
	ElasticSQLParserNOT                 = 59
	ElasticSQLParserINTO                = 60
	ElasticSQLParserTO                  = 61
	ElasticSQLParserFROM                = 62
	ElasticSQLParserHAVING              = 63
	ElasticSQLParserEXCLUDE             = 64
	ElasticSQLParserINCLUDE             = 65
	ElasticSQLParserDOC_COUNT           = 66
	ElasticSQLParserTOP                 = 67
	ElasticSQLParserINSERT              = 68
	ElasticSQLParserVALUES              = 69
	ElasticSQLParserID                  = 70
	ElasticSQLParserSLICE               = 71
	ElasticSQLParserEXPORT              = 72
	ElasticSQLParserHEADER              = 73
	ElasticSQLParserJSON                = 74
	ElasticSQLParserCSV                 = 75
	ElasticSQLParserEXCEL               = 76
	ElasticSQLParserSEP                 = 77
	ElasticSQLParserSCRIPT              = 78
	ElasticSQLParserLANG                = 79
	ElasticSQLParserRETURN              = 80
	ElasticSQLParserON                  = 81
	ElasticSQLParserPK                  = 82
	ElasticSQLParserUUID                = 83
	ElasticSQLParserMEM                 = 84
	ElasticSQLParserRIGHT               = 85
	ElasticSQLParserLEFT                = 86
	ElasticSQLParserJOIN                = 87
	ElasticSQLParserAGG                 = 88
	ElasticSQLParserALIAS               = 89
	ElasticSQLParserALTER               = 90
	ElasticSQLParserRLIKE               = 91
	ElasticSQLParserLIKE                = 92
	ElasticSQLParserNOT_LIKE            = 93
	ElasticSQLParserSTARTS_WITH         = 94
	ElasticSQLParserIN                  = 95
	ElasticSQLParserOUT                 = 96
	ElasticSQLParserHAS_ANY             = 97
	ElasticSQLParserHAS_ALL             = 98
	ElasticSQLParserEXIST               = 99
	ElasticSQLParserMISS                = 100
	ElasticSQLParserQUERY_STRING        = 101
	ElasticSQLParserMATCH               = 102
	ElasticSQLParserMULTI_MATCH         = 103
	ElasticSQLParserMATCH_PHRASE_PREFIX = 104
	ElasticSQLParserMATCH_PHRASE        = 105
	ElasticSQLParserKNN                 = 106
	ElasticSQLParserLOCAL_FILE          = 107
	ElasticSQLParserHAS_CHILD           = 108
	ElasticSQLParserHAS_PARENT          = 109
	ElasticSQLParserCOUNT               = 110
	ElasticSQLParserMAX                 = 111
	ElasticSQLParserMIN                 = 112
	ElasticSQLParserAVG                 = 113
	ElasticSQLParserAVG_DATE            = 114
	ElasticSQLParserSUM                 = 115
	ElasticSQLParserDISTINCT            = 116
	ElasticSQLParserVALUE_COUNT         = 117
	ElasticSQLParserPERCENTILE_RANKS    = 118
	ElasticSQLParserPERCENTILES         = 119
	ElasticSQLParserPERCENT             = 120
	ElasticSQLParserDISTINCT_PERCENT    = 121
	ElasticSQLParserTOP_HITS            = 122
	ElasticSQLParserPOST_EXPR           = 123
	ElasticSQLParserMATH                = 124
	ElasticSQLParserRANGE               = 125
	ElasticSQLParserDATE_RANGE          = 126
	ElasticSQLParserHISTOGRAM           = 127
	ElasticSQLParserDATE_HISTOGRAM      = 128
	ElasticSQLParserINTERVAL            = 129
	ElasticSQLParserFORMAT              = 130
	ElasticSQLParserKEYED               = 131
	ElasticSQLParserSIZE                = 132
	ElasticSQLParserMISSING             = 133
	ElasticSQLParserNULL                = 134
	ElasticSQLParserWHEN                = 135
	ElasticSQLParserEND                 = 136
	ElasticSQLParserTHEN                = 137
	ElasticSQLParserSAMPLE              = 138
	ElasticSQLParserSIGNIFICANT         = 139
	ElasticSQLParserIDS                 = 140
	ElasticSQLParserIDS_FILE            = 141
	ElasticSQLParserSET                 = 142
	ElasticSQLParserUPDATE              = 143
	ElasticSQLParserUPSERT              = 144
	ElasticSQLParserPUT                 = 145
	ElasticSQLParserADD                 = 146
	ElasticSQLParserBATCH_UPDATE        = 147
	ElasticSQLParserBATCH_UPSERT        = 148
	ElasticSQLParserDELETE              = 149
	ElasticSQLParserARRAY               = 150
	ElasticSQLParserFALSE               = 151
	ElasticSQLParserTRUE                = 152
	ElasticSQLParserBOOLEAN_T           = 153
	ElasticSQLParserLONG_T              = 154
	ElasticSQLParserSTRING_T            = 155
	ElasticSQLParserDOUBLE_T            = 156
	ElasticSQLParserINTEGER_T           = 157
	ElasticSQLParserDATETIME_T          = 158
	ElasticSQLParserTIMESTAMP_T         = 159
	ElasticSQLParserDATE_T              = 160
	ElasticSQLParserTIME_T              = 161
	ElasticSQLParserFLOAT_T             = 162
	ElasticSQLParserLOCAL               = 163
	ElasticSQLParserDATA                = 164
	ElasticSQLParserLOAD                = 165
	ElasticSQLParserLIST                = 166
	ElasticSQLParserSEPARATED           = 167
	ElasticSQLParserANALYZE             = 168
	ElasticSQLParserNLP                 = 169
	ElasticSQLParserENABLE              = 170
	ElasticSQLParserSEGMENT             = 171
	ElasticSQLParserNAME                = 172
	ElasticSQLParserORG                 = 173
	ElasticSQLParserLOC                 = 174
	ElasticSQLParserTIME                = 175
	ElasticSQLParserPLUS                = 176
	ElasticSQLParserMINUS               = 177
	ElasticSQLParserMUL                 = 178
	ElasticSQLParserDIV                 = 179
	ElasticSQLParserMOD                 = 180
	ElasticSQLParserPOWER               = 181
	ElasticSQLParserDOT                 = 182
	ElasticSQLParserEQ                  = 183
	ElasticSQLParserNE                  = 184
	ElasticSQLParserLT                  = 185
	ElasticSQLParserLE                  = 186
	ElasticSQLParserGT                  = 187
	ElasticSQLParserGE                  = 188
	ElasticSQLParserLONG                = 189
	ElasticSQLParserDOUBLE              = 190
	ElasticSQLParserQUOTASTR            = 191
	ElasticSQLParserIDENTIFIER          = 192
	ElasticSQLParserEXT_IDENTIFIER      = 193
	ElasticSQLParserLINE_COMMENT        = 194
	ElasticSQLParserBLOCK_COMMNET       = 195
	ElasticSQLParserWS                  = 196
)

// ElasticSQLParser rules.
const (
	ElasticSQLParserRULE_elasticSQL                  = 0
	ElasticSQLParserRULE_statement                   = 1
	ElasticSQLParserRULE_queryStatement              = 2
	ElasticSQLParserRULE_collapseExpr                = 3
	ElasticSQLParserRULE_customScoreExpr             = 4
	ElasticSQLParserRULE_rescoreExpr                 = 5
	ElasticSQLParserRULE_memSort                     = 6
	ElasticSQLParserRULE_innerHit                    = 7
	ElasticSQLParserRULE_scriptFields                = 8
	ElasticSQLParserRULE_scriptField                 = 9
	ElasticSQLParserRULE_highlight                   = 10
	ElasticSQLParserRULE_fieldAs                     = 11
	ElasticSQLParserRULE_whereExpression             = 12
	ElasticSQLParserRULE_logicalExpr                 = 13
	ElasticSQLParserRULE_comparableExpression        = 14
	ElasticSQLParserRULE_termCompare                 = 15
	ElasticSQLParserRULE_btwCompare                  = 16
	ElasticSQLParserRULE_arithmeticExpressionCompare = 17
	ElasticSQLParserRULE_arithmeticExpression        = 18
	ElasticSQLParserRULE_addition                    = 19
	ElasticSQLParserRULE_multiplyingExpression       = 20
	ElasticSQLParserRULE_multi                       = 21
	ElasticSQLParserRULE_atom                        = 22
	ElasticSQLParserRULE_functionalCompare           = 23
	ElasticSQLParserRULE_joinFunction                = 24
	ElasticSQLParserRULE_joinFunctionNames           = 25
	ElasticSQLParserRULE_scriptFunction              = 26
	ElasticSQLParserRULE_fullLevelFunction           = 27
	ElasticSQLParserRULE_fullLevelFunctionNames      = 28
	ElasticSQLParserRULE_termLevelFunction           = 29
	ElasticSQLParserRULE_termLevelFunctionNames      = 30
	ElasticSQLParserRULE_prop                        = 31
	ElasticSQLParserRULE_param                       = 32
	ElasticSQLParserRULE_param2                      = 33
	ElasticSQLParserRULE_arrayValue                  = 34
	ElasticSQLParserRULE_sortItem                    = 35
	ElasticSQLParserRULE_exportStatement             = 36
	ElasticSQLParserRULE_exportField                 = 37
	ElasticSQLParserRULE_analysisStatement           = 38
	ElasticSQLParserRULE_aggStatement                = 39
	ElasticSQLParserRULE_metricAgg                   = 40
	ElasticSQLParserRULE_metricNames                 = 41
	ElasticSQLParserRULE_metricParams                = 42
	ElasticSQLParserRULE_mkv                         = 43
	ElasticSQLParserRULE_metricParamNames            = 44
	ElasticSQLParserRULE_scriptPhrase                = 45
	ElasticSQLParserRULE_bucketAggList               = 46
	ElasticSQLParserRULE_bucketAgg                   = 47
	ElasticSQLParserRULE_bucketAggChoice             = 48
	ElasticSQLParserRULE_termsBucket                 = 49
	ElasticSQLParserRULE_havingExpr                  = 50
	ElasticSQLParserRULE_rangeBucket                 = 51
	ElasticSQLParserRULE_rangeExpr                   = 52
	ElasticSQLParserRULE_rangeUnit                   = 53
	ElasticSQLParserRULE_rangeFromTo                 = 54
	ElasticSQLParserRULE_dateRangeBucket             = 55
	ElasticSQLParserRULE_dateRangeExpr               = 56
	ElasticSQLParserRULE_dateRange                   = 57
	ElasticSQLParserRULE_dateRangeFromTo             = 58
	ElasticSQLParserRULE_histogramBucket             = 59
	ElasticSQLParserRULE_dateHistogramBucket         = 60
	ElasticSQLParserRULE_significantBucket           = 61
	ElasticSQLParserRULE_filtersBucket               = 62
	ElasticSQLParserRULE_sparkStatement              = 63
	ElasticSQLParserRULE_dataStruct                  = 64
	ElasticSQLParserRULE_joinQueryAnalysisStatement  = 65
	ElasticSQLParserRULE_insertStatement             = 66
	ElasticSQLParserRULE_fieldList                   = 67
	ElasticSQLParserRULE_valueList                   = 68
	ElasticSQLParserRULE_paramValues                 = 69
	ElasticSQLParserRULE_updateStatement             = 70
	ElasticSQLParserRULE_updateField                 = 71
	ElasticSQLParserRULE_batchUpdateStatement        = 72
	ElasticSQLParserRULE_deleteStatement             = 73
	ElasticSQLParserRULE_descStatement               = 74
	ElasticSQLParserRULE_aliasStatement              = 75
	ElasticSQLParserRULE_alterStatement              = 76
	ElasticSQLParserRULE_hive2Statement              = 77
	ElasticSQLParserRULE_jdbcStatement               = 78
	ElasticSQLParserRULE_basicSQL                    = 79
	ElasticSQLParserRULE_fileLoadStatement           = 80
	ElasticSQLParserRULE_fieldDefine                 = 81
	ElasticSQLParserRULE_analyzeStatement            = 82
	ElasticSQLParserRULE_hanLPStatement              = 83
	ElasticSQLParserRULE_nlpFunc                     = 84
	ElasticSQLParserRULE_dataType                    = 85
	ElasticSQLParserRULE_comparisonOperator          = 86
	ElasticSQLParserRULE_pathIdentifier              = 87
	ElasticSQLParserRULE_fieldIdentifier             = 88
	ElasticSQLParserRULE_indexIdentifier             = 89
	ElasticSQLParserRULE_indexName                   = 90
	ElasticSQLParserRULE_asIdentifier                = 91
	ElasticSQLParserRULE_strictIdentifier            = 92
	ElasticSQLParserRULE_str                         = 93
	ElasticSQLParserRULE_number                      = 94
	ElasticSQLParserRULE_booleanValue                = 95
	ElasticSQLParserRULE_nonReserved                 = 96
)

// IElasticSQLContext is an interface to support dynamic dispatch.
type IElasticSQLContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_statement returns the _statement rule contexts.
	Get_statement() IStatementContext

	// Set_statement sets the _statement rule contexts.
	Set_statement(IStatementContext)

	// GetStatements returns the statements rule context list.
	GetStatements() []IStatementContext

	// SetStatements sets the statements rule context list.
	SetStatements([]IStatementContext)

	// IsElasticSQLContext differentiates from other interfaces.
	IsElasticSQLContext()
}

type ElasticSQLContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	_statement IStatementContext
	statements []IStatementContext
}

func NewEmptyElasticSQLContext() *ElasticSQLContext {
	var p = new(ElasticSQLContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_elasticSQL
	return p
}

func (*ElasticSQLContext) IsElasticSQLContext() {}

func NewElasticSQLContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElasticSQLContext {
	var p = new(ElasticSQLContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_elasticSQL

	return p
}

func (s *ElasticSQLContext) GetParser() antlr.Parser { return s.parser }

func (s *ElasticSQLContext) Get_statement() IStatementContext { return s._statement }

func (s *ElasticSQLContext) Set_statement(v IStatementContext) { s._statement = v }

func (s *ElasticSQLContext) GetStatements() []IStatementContext { return s.statements }

func (s *ElasticSQLContext) SetStatements(v []IStatementContext) { s.statements = v }

func (s *ElasticSQLContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ElasticSQLContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ElasticSQLContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElasticSQLContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElasticSQLContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterElasticSQL(s)
	}
}

func (s *ElasticSQLContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitElasticSQL(s)
	}
}

func (s *ElasticSQLContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitElasticSQL(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ElasticSQL() (localctx IElasticSQLContext) {
	localctx = NewElasticSQLContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ElasticSQLParserRULE_elasticSQL)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(194)

		var _x = p.Statement()

		localctx.(*ElasticSQLContext)._statement = _x
	}
	localctx.(*ElasticSQLContext).statements = append(localctx.(*ElasticSQLContext).statements, localctx.(*ElasticSQLContext)._statement)
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__0 {
		{
			p.SetState(195)
			p.Match(ElasticSQLParserT__0)
		}
		{
			p.SetState(196)

			var _x = p.Statement()

			localctx.(*ElasticSQLContext)._statement = _x
		}
		localctx.(*ElasticSQLContext).statements = append(localctx.(*ElasticSQLContext).statements, localctx.(*ElasticSQLContext)._statement)

		p.SetState(201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) QueryStatement() IQueryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryStatementContext)
}

func (s *StatementContext) AnalysisStatement() IAnalysisStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalysisStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalysisStatementContext)
}

func (s *StatementContext) SparkStatement() ISparkStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISparkStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISparkStatementContext)
}

func (s *StatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *StatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *StatementContext) BatchUpdateStatement() IBatchUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBatchUpdateStatementContext)
}

func (s *StatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *StatementContext) DescStatement() IDescStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescStatementContext)
}

func (s *StatementContext) AliasStatement() IAliasStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasStatementContext)
}

func (s *StatementContext) AlterStatement() IAlterStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterStatementContext)
}

func (s *StatementContext) JoinQueryAnalysisStatement() IJoinQueryAnalysisStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinQueryAnalysisStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinQueryAnalysisStatementContext)
}

func (s *StatementContext) Hive2Statement() IHive2StatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHive2StatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHive2StatementContext)
}

func (s *StatementContext) JdbcStatement() IJdbcStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJdbcStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJdbcStatementContext)
}

func (s *StatementContext) FileLoadStatement() IFileLoadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileLoadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileLoadStatementContext)
}

func (s *StatementContext) AnalyzeStatement() IAnalyzeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyzeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyzeStatementContext)
}

func (s *StatementContext) HanLPStatement() IHanLPStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHanLPStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHanLPStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ElasticSQLParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(218)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(202)
			p.QueryStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(203)
			p.AnalysisStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(204)
			p.SparkStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(205)
			p.InsertStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(206)
			p.UpdateStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(207)
			p.BatchUpdateStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(208)
			p.DeleteStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(209)
			p.DescStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(210)
			p.AliasStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(211)
			p.AlterStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(212)
			p.JoinQueryAnalysisStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(213)
			p.Hive2Statement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(214)
			p.JdbcStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(215)
			p.FileLoadStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(216)
			p.AnalyzeStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(217)
			p.HanLPStatement()
		}

	}

	return localctx
}

// IQueryStatementContext is an interface to support dynamic dispatch.
type IQueryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScroll_id returns the scroll_id token.
	GetScroll_id() antlr.Token

	// GetTrack returns the track token.
	GetTrack() antlr.Token

	// GetOffset returns the offset token.
	GetOffset() antlr.Token

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// GetSliceMax returns the sliceMax token.
	GetSliceMax() antlr.Token

	// SetScroll_id sets the scroll_id token.
	SetScroll_id(antlr.Token)

	// SetTrack sets the track token.
	SetTrack(antlr.Token)

	// SetOffset sets the offset token.
	SetOffset(antlr.Token)

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// SetSliceMax sets the sliceMax token.
	SetSliceMax(antlr.Token)

	// GetFront returns the front rule contexts.
	GetFront() IStrictIdentifierContext

	// GetKeep returns the keep rule contexts.
	GetKeep() IStrContext

	// GetScore returns the score rule contexts.
	GetScore() IBooleanValueContext

	// GetMinScore returns the minScore rule contexts.
	GetMinScore() INumberContext

	// Get_fieldIdentifier returns the _fieldIdentifier rule contexts.
	Get_fieldIdentifier() IFieldIdentifierContext

	// GetHlightFields returns the hlightFields rule contexts.
	GetHlightFields() IHighlightContext

	// GetExprFields returns the exprFields rule contexts.
	GetExprFields() IScriptFieldsContext

	// GetInnerFields returns the innerFields rule contexts.
	GetInnerFields() IInnerHitContext

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// Get_sortItem returns the _sortItem rule contexts.
	Get_sortItem() ISortItemContext

	// GetSliceField returns the sliceField rule contexts.
	GetSliceField() IFieldIdentifierContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// SetFront sets the front rule contexts.
	SetFront(IStrictIdentifierContext)

	// SetKeep sets the keep rule contexts.
	SetKeep(IStrContext)

	// SetScore sets the score rule contexts.
	SetScore(IBooleanValueContext)

	// SetMinScore sets the minScore rule contexts.
	SetMinScore(INumberContext)

	// Set_fieldIdentifier sets the _fieldIdentifier rule contexts.
	Set_fieldIdentifier(IFieldIdentifierContext)

	// SetHlightFields sets the hlightFields rule contexts.
	SetHlightFields(IHighlightContext)

	// SetExprFields sets the exprFields rule contexts.
	SetExprFields(IScriptFieldsContext)

	// SetInnerFields sets the innerFields rule contexts.
	SetInnerFields(IInnerHitContext)

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// Set_sortItem sets the _sortItem rule contexts.
	Set_sortItem(ISortItemContext)

	// SetSliceField sets the sliceField rule contexts.
	SetSliceField(IFieldIdentifierContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetFields returns the fields rule context list.
	GetFields() []IFieldIdentifierContext

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// GetSorts returns the sorts rule context list.
	GetSorts() []ISortItemContext

	// SetFields sets the fields rule context list.
	SetFields([]IFieldIdentifierContext)

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// SetSorts sets the sorts rule context list.
	SetSorts([]ISortItemContext)

	// IsQueryStatementContext differentiates from other interfaces.
	IsQueryStatementContext()
}

type QueryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	front            IStrictIdentifierContext
	keep             IStrContext
	score            IBooleanValueContext
	minScore         INumberContext
	_fieldIdentifier IFieldIdentifierContext
	fields           []IFieldIdentifierContext
	hlightFields     IHighlightContext
	exprFields       IScriptFieldsContext
	innerFields      IInnerHitContext
	scroll_id        antlr.Token
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
	_sortItem        ISortItemContext
	sorts            []ISortItemContext
	track            antlr.Token
	offset           antlr.Token
	limit            antlr.Token
	sliceMax         antlr.Token
	sliceField       IFieldIdentifierContext
	statName         IStrictIdentifierContext
}

func NewEmptyQueryStatementContext() *QueryStatementContext {
	var p = new(QueryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_queryStatement
	return p
}

func (*QueryStatementContext) IsQueryStatementContext() {}

func NewQueryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryStatementContext {
	var p = new(QueryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_queryStatement

	return p
}

func (s *QueryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryStatementContext) GetScroll_id() antlr.Token { return s.scroll_id }

func (s *QueryStatementContext) GetTrack() antlr.Token { return s.track }

func (s *QueryStatementContext) GetOffset() antlr.Token { return s.offset }

func (s *QueryStatementContext) GetLimit() antlr.Token { return s.limit }

func (s *QueryStatementContext) GetSliceMax() antlr.Token { return s.sliceMax }

func (s *QueryStatementContext) SetScroll_id(v antlr.Token) { s.scroll_id = v }

func (s *QueryStatementContext) SetTrack(v antlr.Token) { s.track = v }

func (s *QueryStatementContext) SetOffset(v antlr.Token) { s.offset = v }

func (s *QueryStatementContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *QueryStatementContext) SetSliceMax(v antlr.Token) { s.sliceMax = v }

func (s *QueryStatementContext) GetFront() IStrictIdentifierContext { return s.front }

func (s *QueryStatementContext) GetKeep() IStrContext { return s.keep }

func (s *QueryStatementContext) GetScore() IBooleanValueContext { return s.score }

func (s *QueryStatementContext) GetMinScore() INumberContext { return s.minScore }

func (s *QueryStatementContext) Get_fieldIdentifier() IFieldIdentifierContext {
	return s._fieldIdentifier
}

func (s *QueryStatementContext) GetHlightFields() IHighlightContext { return s.hlightFields }

func (s *QueryStatementContext) GetExprFields() IScriptFieldsContext { return s.exprFields }

func (s *QueryStatementContext) GetInnerFields() IInnerHitContext { return s.innerFields }

func (s *QueryStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *QueryStatementContext) Get_sortItem() ISortItemContext { return s._sortItem }

func (s *QueryStatementContext) GetSliceField() IFieldIdentifierContext { return s.sliceField }

func (s *QueryStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *QueryStatementContext) SetFront(v IStrictIdentifierContext) { s.front = v }

func (s *QueryStatementContext) SetKeep(v IStrContext) { s.keep = v }

func (s *QueryStatementContext) SetScore(v IBooleanValueContext) { s.score = v }

func (s *QueryStatementContext) SetMinScore(v INumberContext) { s.minScore = v }

func (s *QueryStatementContext) Set_fieldIdentifier(v IFieldIdentifierContext) {
	s._fieldIdentifier = v
}

func (s *QueryStatementContext) SetHlightFields(v IHighlightContext) { s.hlightFields = v }

func (s *QueryStatementContext) SetExprFields(v IScriptFieldsContext) { s.exprFields = v }

func (s *QueryStatementContext) SetInnerFields(v IInnerHitContext) { s.innerFields = v }

func (s *QueryStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) {
	s._indexIdentifier = v
}

func (s *QueryStatementContext) Set_sortItem(v ISortItemContext) { s._sortItem = v }

func (s *QueryStatementContext) SetSliceField(v IFieldIdentifierContext) { s.sliceField = v }

func (s *QueryStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *QueryStatementContext) GetFields() []IFieldIdentifierContext { return s.fields }

func (s *QueryStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *QueryStatementContext) GetSorts() []ISortItemContext { return s.sorts }

func (s *QueryStatementContext) SetFields(v []IFieldIdentifierContext) { s.fields = v }

func (s *QueryStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *QueryStatementContext) SetSorts(v []ISortItemContext) { s.sorts = v }

func (s *QueryStatementContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSELECT, 0)
}

func (s *QueryStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSING, 0)
}

func (s *QueryStatementContext) AllFieldIdentifier() []IFieldIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem())
	var tst = make([]IFieldIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldIdentifierContext)
		}
	}

	return tst
}

func (s *QueryStatementContext) FieldIdentifier(i int) IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *QueryStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *QueryStatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *QueryStatementContext) AllStrictIdentifier() []IStrictIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem())
	var tst = make([]IStrictIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrictIdentifierContext)
		}
	}

	return tst
}

func (s *QueryStatementContext) StrictIdentifier(i int) IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *QueryStatementContext) Highlight() IHighlightContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHighlightContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHighlightContext)
}

func (s *QueryStatementContext) ScriptFields() IScriptFieldsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptFieldsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptFieldsContext)
}

func (s *QueryStatementContext) InnerHit() IInnerHitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInnerHitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInnerHitContext)
}

func (s *QueryStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *QueryStatementContext) SCROLL_ID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCROLL_ID, 0)
}

func (s *QueryStatementContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *QueryStatementContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *QueryStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFROM, 0)
}

func (s *QueryStatementContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCROLL, 0)
}

func (s *QueryStatementContext) SCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCORE, 0)
}

func (s *QueryStatementContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *QueryStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *QueryStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *QueryStatementContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *QueryStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHERE, 0)
}

func (s *QueryStatementContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *QueryStatementContext) RescoreExpr() IRescoreExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRescoreExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRescoreExprContext)
}

func (s *QueryStatementContext) CollapseExpr() ICollapseExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollapseExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollapseExprContext)
}

func (s *QueryStatementContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, 0)
}

func (s *QueryStatementContext) TRACK_HIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTRACK_HIT, 0)
}

func (s *QueryStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIMIT, 0)
}

func (s *QueryStatementContext) SLICE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSLICE, 0)
}

func (s *QueryStatementContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *QueryStatementContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *QueryStatementContext) AllLONG() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserLONG)
}

func (s *QueryStatementContext) LONG(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, i)
}

func (s *QueryStatementContext) GE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGE, 0)
}

func (s *QueryStatementContext) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *QueryStatementContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *QueryStatementContext) CustomScoreExpr() ICustomScoreExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICustomScoreExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICustomScoreExprContext)
}

func (s *QueryStatementContext) MemSort() IMemSortContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemSortContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemSortContext)
}

func (s *QueryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterQueryStatement(s)
	}
}

func (s *QueryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitQueryStatement(s)
	}
}

func (s *QueryStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitQueryStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) QueryStatement() (localctx IQueryStatementContext) {
	localctx = NewQueryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ElasticSQLParserRULE_queryStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserUSING {
		{
			p.SetState(220)
			p.Match(ElasticSQLParserUSING)
		}
		{
			p.SetState(221)

			var _x = p.StrictIdentifier()

			localctx.(*QueryStatementContext).front = _x
		}

	}
	{
		p.SetState(224)
		p.Match(ElasticSQLParserSELECT)
	}
	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__1 {
		{
			p.SetState(225)
			p.Match(ElasticSQLParserT__1)
		}
		p.SetState(229)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserSCROLL {
			{
				p.SetState(226)
				p.Match(ElasticSQLParserSCROLL)
			}
			{
				p.SetState(227)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(228)

				var _x = p.Str()

				localctx.(*QueryStatementContext).keep = _x
			}

		}
		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserSCORE {
			{
				p.SetState(231)
				p.Match(ElasticSQLParserSCORE)
			}
			p.SetState(236)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case ElasticSQLParserEQ:
				{
					p.SetState(232)
					p.Match(ElasticSQLParserEQ)
				}
				{
					p.SetState(233)

					var _x = p.BooleanValue()

					localctx.(*QueryStatementContext).score = _x
				}

			case ElasticSQLParserGE:
				{
					p.SetState(234)
					p.Match(ElasticSQLParserGE)
				}
				{
					p.SetState(235)

					var _x = p.Number()

					localctx.(*QueryStatementContext).minScore = _x
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		{
			p.SetState(240)
			p.Match(ElasticSQLParserT__2)
		}

	}

	{
		p.SetState(243)

		var _x = p.FieldIdentifier()

		localctx.(*QueryStatementContext)._fieldIdentifier = _x
	}
	localctx.(*QueryStatementContext).fields = append(localctx.(*QueryStatementContext).fields, localctx.(*QueryStatementContext)._fieldIdentifier)
	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(244)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(245)

				var _x = p.FieldIdentifier()

				localctx.(*QueryStatementContext)._fieldIdentifier = _x
			}
			localctx.(*QueryStatementContext).fields = append(localctx.(*QueryStatementContext).fields, localctx.(*QueryStatementContext)._fieldIdentifier)

		}
		p.SetState(250)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}

	p.SetState(255)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		p.SetState(252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__3 {
			{
				p.SetState(251)
				p.Match(ElasticSQLParserT__3)
			}

		}
		{
			p.SetState(254)

			var _x = p.Highlight()

			localctx.(*QueryStatementContext).hlightFields = _x
		}

	}
	p.SetState(259)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(257)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(258)

			var _x = p.ScriptFields()

			localctx.(*QueryStatementContext).exprFields = _x
		}

	}
	p.SetState(263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(261)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(262)

			var _x = p.InnerHit()

			localctx.(*QueryStatementContext).innerFields = _x
		}

	}
	p.SetState(334)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.SetState(269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserBY {
			{
				p.SetState(265)
				p.Match(ElasticSQLParserBY)
			}
			{
				p.SetState(266)
				p.Match(ElasticSQLParserSCROLL_ID)
			}
			{
				p.SetState(267)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(268)

				var _m = p.Match(ElasticSQLParserQUOTASTR)

				localctx.(*QueryStatementContext).scroll_id = _m
			}

		}

	case 2:
		p.SetState(332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserFROM {
			{
				p.SetState(271)
				p.Match(ElasticSQLParserFROM)
			}
			{
				p.SetState(272)

				var _x = p.IndexIdentifier()

				localctx.(*QueryStatementContext)._indexIdentifier = _x
			}
			localctx.(*QueryStatementContext).indexes = append(localctx.(*QueryStatementContext).indexes, localctx.(*QueryStatementContext)._indexIdentifier)
			p.SetState(277)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == ElasticSQLParserT__3 {
				{
					p.SetState(273)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(274)

					var _x = p.IndexIdentifier()

					localctx.(*QueryStatementContext)._indexIdentifier = _x
				}
				localctx.(*QueryStatementContext).indexes = append(localctx.(*QueryStatementContext).indexes, localctx.(*QueryStatementContext)._indexIdentifier)

				p.SetState(279)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(285)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserWHERE {
				{
					p.SetState(280)
					p.Match(ElasticSQLParserWHERE)
				}
				{
					p.SetState(281)
					p.WhereExpression()
				}
				p.SetState(283)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ElasticSQLParserCUSTOM_SCORE {
					{
						p.SetState(282)
						p.CustomScoreExpr()
					}

				}

			}
			p.SetState(288)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserRESCORE {
				{
					p.SetState(287)
					p.RescoreExpr()
				}

			}
			p.SetState(291)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserCOLLAPSE {
				{
					p.SetState(290)
					p.CollapseExpr()
				}

			}
			p.SetState(303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserORDER {
				{
					p.SetState(293)
					p.Match(ElasticSQLParserORDER)
				}
				{
					p.SetState(294)
					p.Match(ElasticSQLParserBY)
				}
				{
					p.SetState(295)

					var _x = p.SortItem()

					localctx.(*QueryStatementContext)._sortItem = _x
				}
				localctx.(*QueryStatementContext).sorts = append(localctx.(*QueryStatementContext).sorts, localctx.(*QueryStatementContext)._sortItem)
				p.SetState(300)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == ElasticSQLParserT__3 {
					{
						p.SetState(296)
						p.Match(ElasticSQLParserT__3)
					}
					{
						p.SetState(297)

						var _x = p.SortItem()

						localctx.(*QueryStatementContext)._sortItem = _x
					}
					localctx.(*QueryStatementContext).sorts = append(localctx.(*QueryStatementContext).sorts, localctx.(*QueryStatementContext)._sortItem)

					p.SetState(302)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			}
			p.SetState(307)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserTRACK_HIT {
				{
					p.SetState(305)
					p.Match(ElasticSQLParserTRACK_HIT)
				}
				{
					p.SetState(306)

					var _m = p.Match(ElasticSQLParserLONG)

					localctx.(*QueryStatementContext).track = _m
				}

			}
			p.SetState(318)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserLIMIT {
				{
					p.SetState(309)
					p.Match(ElasticSQLParserLIMIT)
				}
				p.SetState(312)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(310)

						var _m = p.Match(ElasticSQLParserLONG)

						localctx.(*QueryStatementContext).offset = _m
					}
					{
						p.SetState(311)
						p.Match(ElasticSQLParserT__3)
					}

				}
				{
					p.SetState(314)

					var _m = p.Match(ElasticSQLParserLONG)

					localctx.(*QueryStatementContext).limit = _m
				}
				p.SetState(316)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ElasticSQLParserMEM_SORT {
					{
						p.SetState(315)
						p.MemSort()
					}

				}

			}
			p.SetState(330)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserSLICE {
				{
					p.SetState(320)
					p.Match(ElasticSQLParserSLICE)
				}
				p.SetState(328)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ElasticSQLParserT__4 {
					{
						p.SetState(321)
						p.Match(ElasticSQLParserT__4)
					}
					{
						p.SetState(322)

						var _m = p.Match(ElasticSQLParserLONG)

						localctx.(*QueryStatementContext).sliceMax = _m
					}
					p.SetState(325)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == ElasticSQLParserT__3 {
						{
							p.SetState(323)
							p.Match(ElasticSQLParserT__3)
						}
						{
							p.SetState(324)

							var _x = p.FieldIdentifier()

							localctx.(*QueryStatementContext).sliceField = _x
						}

					}
					{
						p.SetState(327)
						p.Match(ElasticSQLParserT__5)
					}

				}

			}

		}

	}
	p.SetState(338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(336)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(337)

			var _x = p.StrictIdentifier()

			localctx.(*QueryStatementContext).statName = _x
		}

	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(340)
			p.ExportStatement()
		}

	}

	return localctx
}

// ICollapseExprContext is an interface to support dynamic dispatch.
type ICollapseExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// IsCollapseExprContext differentiates from other interfaces.
	IsCollapseExprContext()
}

type CollapseExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	field  IFieldIdentifierContext
}

func NewEmptyCollapseExprContext() *CollapseExprContext {
	var p = new(CollapseExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_collapseExpr
	return p
}

func (*CollapseExprContext) IsCollapseExprContext() {}

func NewCollapseExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollapseExprContext {
	var p = new(CollapseExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_collapseExpr

	return p
}

func (s *CollapseExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CollapseExprContext) GetField() IFieldIdentifierContext { return s.field }

func (s *CollapseExprContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *CollapseExprContext) COLLAPSE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCOLLAPSE, 0)
}

func (s *CollapseExprContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *CollapseExprContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *CollapseExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollapseExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollapseExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterCollapseExpr(s)
	}
}

func (s *CollapseExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitCollapseExpr(s)
	}
}

func (s *CollapseExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitCollapseExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) CollapseExpr() (localctx ICollapseExprContext) {
	localctx = NewCollapseExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ElasticSQLParserRULE_collapseExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(343)
		p.Match(ElasticSQLParserCOLLAPSE)
	}
	{
		p.SetState(344)
		p.Match(ElasticSQLParserBY)
	}
	{
		p.SetState(345)

		var _x = p.FieldIdentifier()

		localctx.(*CollapseExprContext).field = _x
	}

	return localctx
}

// ICustomScoreExprContext is an interface to support dynamic dispatch.
type ICustomScoreExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCustomScoreExprContext differentiates from other interfaces.
	IsCustomScoreExprContext()
}

type CustomScoreExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCustomScoreExprContext() *CustomScoreExprContext {
	var p = new(CustomScoreExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_customScoreExpr
	return p
}

func (*CustomScoreExprContext) IsCustomScoreExprContext() {}

func NewCustomScoreExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CustomScoreExprContext {
	var p = new(CustomScoreExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_customScoreExpr

	return p
}

func (s *CustomScoreExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CustomScoreExprContext) CUSTOM_SCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCUSTOM_SCORE, 0)
}

func (s *CustomScoreExprContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *CustomScoreExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomScoreExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CustomScoreExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterCustomScoreExpr(s)
	}
}

func (s *CustomScoreExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitCustomScoreExpr(s)
	}
}

func (s *CustomScoreExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitCustomScoreExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) CustomScoreExpr() (localctx ICustomScoreExprContext) {
	localctx = NewCustomScoreExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ElasticSQLParserRULE_customScoreExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(347)
		p.Match(ElasticSQLParserCUSTOM_SCORE)
	}
	{
		p.SetState(348)
		p.ScriptPhrase()
	}

	return localctx
}

// IRescoreExprContext is an interface to support dynamic dispatch.
type IRescoreExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWin returns the win token.
	GetWin() antlr.Token

	// GetPre returns the pre token.
	GetPre() antlr.Token

	// GetSec returns the sec token.
	GetSec() antlr.Token

	// SetWin sets the win token.
	SetWin(antlr.Token)

	// SetPre sets the pre token.
	SetPre(antlr.Token)

	// SetSec sets the sec token.
	SetSec(antlr.Token)

	// IsRescoreExprContext differentiates from other interfaces.
	IsRescoreExprContext()
}

type RescoreExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	win    antlr.Token
	pre    antlr.Token
	sec    antlr.Token
}

func NewEmptyRescoreExprContext() *RescoreExprContext {
	var p = new(RescoreExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_rescoreExpr
	return p
}

func (*RescoreExprContext) IsRescoreExprContext() {}

func NewRescoreExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RescoreExprContext {
	var p = new(RescoreExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_rescoreExpr

	return p
}

func (s *RescoreExprContext) GetParser() antlr.Parser { return s.parser }

func (s *RescoreExprContext) GetWin() antlr.Token { return s.win }

func (s *RescoreExprContext) GetPre() antlr.Token { return s.pre }

func (s *RescoreExprContext) GetSec() antlr.Token { return s.sec }

func (s *RescoreExprContext) SetWin(v antlr.Token) { s.win = v }

func (s *RescoreExprContext) SetPre(v antlr.Token) { s.pre = v }

func (s *RescoreExprContext) SetSec(v antlr.Token) { s.sec = v }

func (s *RescoreExprContext) RESCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRESCORE, 0)
}

func (s *RescoreExprContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *RescoreExprContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWINDOWS, 0)
}

func (s *RescoreExprContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *RescoreExprContext) WEIGHT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWEIGHT, 0)
}

func (s *RescoreExprContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *RescoreExprContext) AllDOUBLE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDOUBLE)
}

func (s *RescoreExprContext) DOUBLE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOUBLE, i)
}

func (s *RescoreExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RescoreExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RescoreExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterRescoreExpr(s)
	}
}

func (s *RescoreExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitRescoreExpr(s)
	}
}

func (s *RescoreExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitRescoreExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) RescoreExpr() (localctx IRescoreExprContext) {
	localctx = NewRescoreExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ElasticSQLParserRULE_rescoreExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(350)
		p.Match(ElasticSQLParserRESCORE)
	}
	p.SetState(354)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(351)
			p.Match(ElasticSQLParserWINDOWS)
		}
		{
			p.SetState(352)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(353)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*RescoreExprContext).win = _m
		}

	}
	p.SetState(362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserWEIGHT {
		{
			p.SetState(356)
			p.Match(ElasticSQLParserWEIGHT)
		}
		{
			p.SetState(357)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(358)

			var _m = p.Match(ElasticSQLParserDOUBLE)

			localctx.(*RescoreExprContext).pre = _m
		}
		{
			p.SetState(359)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(360)

			var _m = p.Match(ElasticSQLParserDOUBLE)

			localctx.(*RescoreExprContext).sec = _m
		}
		{
			p.SetState(361)
			p.Match(ElasticSQLParserT__5)
		}

	}
	{
		p.SetState(364)
		p.WhereExpression()
	}

	return localctx
}

// IMemSortContext is an interface to support dynamic dispatch.
type IMemSortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSize returns the size token.
	GetSize() antlr.Token

	// SetSize sets the size token.
	SetSize(antlr.Token)

	// Get_sortItem returns the _sortItem rule contexts.
	Get_sortItem() ISortItemContext

	// Set_sortItem sets the _sortItem rule contexts.
	Set_sortItem(ISortItemContext)

	// GetSorts returns the sorts rule context list.
	GetSorts() []ISortItemContext

	// SetSorts sets the sorts rule context list.
	SetSorts([]ISortItemContext)

	// IsMemSortContext differentiates from other interfaces.
	IsMemSortContext()
}

type MemSortContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	_sortItem ISortItemContext
	sorts     []ISortItemContext
	size      antlr.Token
}

func NewEmptyMemSortContext() *MemSortContext {
	var p = new(MemSortContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_memSort
	return p
}

func (*MemSortContext) IsMemSortContext() {}

func NewMemSortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemSortContext {
	var p = new(MemSortContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_memSort

	return p
}

func (s *MemSortContext) GetParser() antlr.Parser { return s.parser }

func (s *MemSortContext) GetSize() antlr.Token { return s.size }

func (s *MemSortContext) SetSize(v antlr.Token) { s.size = v }

func (s *MemSortContext) Get_sortItem() ISortItemContext { return s._sortItem }

func (s *MemSortContext) Set_sortItem(v ISortItemContext) { s._sortItem = v }

func (s *MemSortContext) GetSorts() []ISortItemContext { return s.sorts }

func (s *MemSortContext) SetSorts(v []ISortItemContext) { s.sorts = v }

func (s *MemSortContext) MEM_SORT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMEM_SORT, 0)
}

func (s *MemSortContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *MemSortContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *MemSortContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *MemSortContext) KEEP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserKEEP, 0)
}

func (s *MemSortContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *MemSortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemSortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemSortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMemSort(s)
	}
}

func (s *MemSortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMemSort(s)
	}
}

func (s *MemSortContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMemSort(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MemSort() (localctx IMemSortContext) {
	localctx = NewMemSortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ElasticSQLParserRULE_memSort)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Match(ElasticSQLParserMEM_SORT)
	}
	{
		p.SetState(367)
		p.Match(ElasticSQLParserBY)
	}
	{
		p.SetState(368)

		var _x = p.SortItem()

		localctx.(*MemSortContext)._sortItem = _x
	}
	localctx.(*MemSortContext).sorts = append(localctx.(*MemSortContext).sorts, localctx.(*MemSortContext)._sortItem)
	p.SetState(373)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(369)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(370)

			var _x = p.SortItem()

			localctx.(*MemSortContext)._sortItem = _x
		}
		localctx.(*MemSortContext).sorts = append(localctx.(*MemSortContext).sorts, localctx.(*MemSortContext)._sortItem)

		p.SetState(375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserKEEP {
		{
			p.SetState(376)
			p.Match(ElasticSQLParserKEEP)
		}
		{
			p.SetState(377)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*MemSortContext).size = _m
		}

	}

	return localctx
}

// IInnerHitContext is an interface to support dynamic dispatch.
type IInnerHitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_prop returns the _prop rule contexts.
	Get_prop() IPropContext

	// GetAs returns the as rule contexts.
	GetAs() IStrictIdentifierContext

	// Set_prop sets the _prop rule contexts.
	Set_prop(IPropContext)

	// SetAs sets the as rule contexts.
	SetAs(IStrictIdentifierContext)

	// GetProps returns the props rule context list.
	GetProps() []IPropContext

	// SetProps sets the props rule context list.
	SetProps([]IPropContext)

	// IsInnerHitContext differentiates from other interfaces.
	IsInnerHitContext()
}

type InnerHitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_prop  IPropContext
	props  []IPropContext
	as     IStrictIdentifierContext
}

func NewEmptyInnerHitContext() *InnerHitContext {
	var p = new(InnerHitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_innerHit
	return p
}

func (*InnerHitContext) IsInnerHitContext() {}

func NewInnerHitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InnerHitContext {
	var p = new(InnerHitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_innerHit

	return p
}

func (s *InnerHitContext) GetParser() antlr.Parser { return s.parser }

func (s *InnerHitContext) Get_prop() IPropContext { return s._prop }

func (s *InnerHitContext) GetAs() IStrictIdentifierContext { return s.as }

func (s *InnerHitContext) Set_prop(v IPropContext) { s._prop = v }

func (s *InnerHitContext) SetAs(v IStrictIdentifierContext) { s.as = v }

func (s *InnerHitContext) GetProps() []IPropContext { return s.props }

func (s *InnerHitContext) SetProps(v []IPropContext) { s.props = v }

func (s *InnerHitContext) INNER_HIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINNER_HIT, 0)
}

func (s *InnerHitContext) AS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, 0)
}

func (s *InnerHitContext) AllProp() []IPropContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropContext)(nil)).Elem())
	var tst = make([]IPropContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropContext)
		}
	}

	return tst
}

func (s *InnerHitContext) Prop(i int) IPropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropContext)
}

func (s *InnerHitContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *InnerHitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerHitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InnerHitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterInnerHit(s)
	}
}

func (s *InnerHitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitInnerHit(s)
	}
}

func (s *InnerHitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitInnerHit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) InnerHit() (localctx IInnerHitContext) {
	localctx = NewInnerHitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ElasticSQLParserRULE_innerHit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(380)
		p.Match(ElasticSQLParserINNER_HIT)
	}
	{
		p.SetState(381)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(382)

		var _x = p.Prop()

		localctx.(*InnerHitContext)._prop = _x
	}
	localctx.(*InnerHitContext).props = append(localctx.(*InnerHitContext).props, localctx.(*InnerHitContext)._prop)
	p.SetState(387)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(383)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(384)

			var _x = p.Prop()

			localctx.(*InnerHitContext)._prop = _x
		}
		localctx.(*InnerHitContext).props = append(localctx.(*InnerHitContext).props, localctx.(*InnerHitContext)._prop)

		p.SetState(389)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(390)
		p.Match(ElasticSQLParserT__5)
	}
	{
		p.SetState(391)
		p.Match(ElasticSQLParserAS)
	}
	{
		p.SetState(392)

		var _x = p.StrictIdentifier()

		localctx.(*InnerHitContext).as = _x
	}

	return localctx
}

// IScriptFieldsContext is an interface to support dynamic dispatch.
type IScriptFieldsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_scriptField returns the _scriptField rule contexts.
	Get_scriptField() IScriptFieldContext

	// Set_scriptField sets the _scriptField rule contexts.
	Set_scriptField(IScriptFieldContext)

	// GetExprField returns the exprField rule context list.
	GetExprField() []IScriptFieldContext

	// SetExprField sets the exprField rule context list.
	SetExprField([]IScriptFieldContext)

	// IsScriptFieldsContext differentiates from other interfaces.
	IsScriptFieldsContext()
}

type ScriptFieldsContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_scriptField IScriptFieldContext
	exprField    []IScriptFieldContext
}

func NewEmptyScriptFieldsContext() *ScriptFieldsContext {
	var p = new(ScriptFieldsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_scriptFields
	return p
}

func (*ScriptFieldsContext) IsScriptFieldsContext() {}

func NewScriptFieldsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptFieldsContext {
	var p = new(ScriptFieldsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_scriptFields

	return p
}

func (s *ScriptFieldsContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptFieldsContext) Get_scriptField() IScriptFieldContext { return s._scriptField }

func (s *ScriptFieldsContext) Set_scriptField(v IScriptFieldContext) { s._scriptField = v }

func (s *ScriptFieldsContext) GetExprField() []IScriptFieldContext { return s.exprField }

func (s *ScriptFieldsContext) SetExprField(v []IScriptFieldContext) { s.exprField = v }

func (s *ScriptFieldsContext) AllScriptField() []IScriptFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IScriptFieldContext)(nil)).Elem())
	var tst = make([]IScriptFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IScriptFieldContext)
		}
	}

	return tst
}

func (s *ScriptFieldsContext) ScriptField(i int) IScriptFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IScriptFieldContext)
}

func (s *ScriptFieldsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptFieldsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptFieldsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterScriptFields(s)
	}
}

func (s *ScriptFieldsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitScriptFields(s)
	}
}

func (s *ScriptFieldsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitScriptFields(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ScriptFields() (localctx IScriptFieldsContext) {
	localctx = NewScriptFieldsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ElasticSQLParserRULE_scriptFields)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(394)

		var _x = p.ScriptField()

		localctx.(*ScriptFieldsContext)._scriptField = _x
	}
	localctx.(*ScriptFieldsContext).exprField = append(localctx.(*ScriptFieldsContext).exprField, localctx.(*ScriptFieldsContext)._scriptField)
	p.SetState(399)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(395)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(396)

				var _x = p.ScriptField()

				localctx.(*ScriptFieldsContext)._scriptField = _x
			}
			localctx.(*ScriptFieldsContext).exprField = append(localctx.(*ScriptFieldsContext).exprField, localctx.(*ScriptFieldsContext)._scriptField)

		}
		p.SetState(401)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// IScriptFieldContext is an interface to support dynamic dispatch.
type IScriptFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// GetAs returns the as rule contexts.
	GetAs() IStrictIdentifierContext

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// SetAs sets the as rule contexts.
	SetAs(IStrictIdentifierContext)

	// IsScriptFieldContext differentiates from other interfaces.
	IsScriptFieldContext()
}

type ScriptFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	script IScriptPhraseContext
	as     IStrictIdentifierContext
}

func NewEmptyScriptFieldContext() *ScriptFieldContext {
	var p = new(ScriptFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_scriptField
	return p
}

func (*ScriptFieldContext) IsScriptFieldContext() {}

func NewScriptFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptFieldContext {
	var p = new(ScriptFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_scriptField

	return p
}

func (s *ScriptFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptFieldContext) GetScript() IScriptPhraseContext { return s.script }

func (s *ScriptFieldContext) GetAs() IStrictIdentifierContext { return s.as }

func (s *ScriptFieldContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *ScriptFieldContext) SetAs(v IStrictIdentifierContext) { s.as = v }

func (s *ScriptFieldContext) AS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, 0)
}

func (s *ScriptFieldContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *ScriptFieldContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *ScriptFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterScriptField(s)
	}
}

func (s *ScriptFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitScriptField(s)
	}
}

func (s *ScriptFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitScriptField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ScriptField() (localctx IScriptFieldContext) {
	localctx = NewScriptFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ElasticSQLParserRULE_scriptField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)

		var _x = p.ScriptPhrase()

		localctx.(*ScriptFieldContext).script = _x
	}

	{
		p.SetState(403)
		p.Match(ElasticSQLParserAS)
	}
	{
		p.SetState(404)

		var _x = p.StrictIdentifier()

		localctx.(*ScriptFieldContext).as = _x
	}

	return localctx
}

// IHighlightContext is an interface to support dynamic dispatch.
type IHighlightContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag returns the tag token.
	GetTag() antlr.Token

	// SetTag sets the tag token.
	SetTag(antlr.Token)

	// IsHighlightContext differentiates from other interfaces.
	IsHighlightContext()
}

type HighlightContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tag    antlr.Token
}

func NewEmptyHighlightContext() *HighlightContext {
	var p = new(HighlightContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_highlight
	return p
}

func (*HighlightContext) IsHighlightContext() {}

func NewHighlightContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HighlightContext {
	var p = new(HighlightContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_highlight

	return p
}

func (s *HighlightContext) GetParser() antlr.Parser { return s.parser }

func (s *HighlightContext) GetTag() antlr.Token { return s.tag }

func (s *HighlightContext) SetTag(v antlr.Token) { s.tag = v }

func (s *HighlightContext) HIGHLIGHT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHIGHLIGHT, 0)
}

func (s *HighlightContext) AllFieldAs() []IFieldAsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldAsContext)(nil)).Elem())
	var tst = make([]IFieldAsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldAsContext)
		}
	}

	return tst
}

func (s *HighlightContext) FieldAs(i int) IFieldAsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldAsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldAsContext)
}

func (s *HighlightContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *HighlightContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *HighlightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HighlightContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HighlightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterHighlight(s)
	}
}

func (s *HighlightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitHighlight(s)
	}
}

func (s *HighlightContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitHighlight(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Highlight() (localctx IHighlightContext) {
	localctx = NewHighlightContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ElasticSQLParserRULE_highlight)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(ElasticSQLParserHIGHLIGHT)
	}
	{
		p.SetState(407)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(408)
		p.FieldAs()
	}
	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(409)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(410)
			p.FieldAs()
		}

		p.SetState(415)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(416)
		p.Match(ElasticSQLParserT__5)
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(417)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(418)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*HighlightContext).tag = _m
		}

	}

	return localctx
}

// IFieldAsContext is an interface to support dynamic dispatch.
type IFieldAsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTag returns the tag token.
	GetTag() antlr.Token

	// SetTag sets the tag token.
	SetTag(antlr.Token)

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetAs returns the as rule contexts.
	GetAs() IStrictIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetAs sets the as rule contexts.
	SetAs(IStrictIdentifierContext)

	// IsFieldAsContext differentiates from other interfaces.
	IsFieldAsContext()
}

type FieldAsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	field  IFieldIdentifierContext
	as     IStrictIdentifierContext
	tag    antlr.Token
}

func NewEmptyFieldAsContext() *FieldAsContext {
	var p = new(FieldAsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fieldAs
	return p
}

func (*FieldAsContext) IsFieldAsContext() {}

func NewFieldAsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldAsContext {
	var p = new(FieldAsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fieldAs

	return p
}

func (s *FieldAsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldAsContext) GetTag() antlr.Token { return s.tag }

func (s *FieldAsContext) SetTag(v antlr.Token) { s.tag = v }

func (s *FieldAsContext) GetField() IFieldIdentifierContext { return s.field }

func (s *FieldAsContext) GetAs() IStrictIdentifierContext { return s.as }

func (s *FieldAsContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *FieldAsContext) SetAs(v IStrictIdentifierContext) { s.as = v }

func (s *FieldAsContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *FieldAsContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *FieldAsContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *FieldAsContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *FieldAsContext) AS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, 0)
}

func (s *FieldAsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldAsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldAsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFieldAs(s)
	}
}

func (s *FieldAsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFieldAs(s)
	}
}

func (s *FieldAsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFieldAs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FieldAs() (localctx IFieldAsContext) {
	localctx = NewFieldAsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ElasticSQLParserRULE_fieldAs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(421)

		var _x = p.FieldIdentifier()

		localctx.(*FieldAsContext).field = _x
	}
	p.SetState(426)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ElasticSQLParserINNER_HIT)|(1<<ElasticSQLParserRESCORE)|(1<<ElasticSQLParserWINDOWS)|(1<<ElasticSQLParserCOLLAPSE)|(1<<ElasticSQLParserSCORE))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(ElasticSQLParserSQL-33))|(1<<(ElasticSQLParserSTRUCT-33))|(1<<(ElasticSQLParserCK-33))|(1<<(ElasticSQLParserURL-33))|(1<<(ElasticSQLParserPASSWORD-33))|(1<<(ElasticSQLParserUSER-33))|(1<<(ElasticSQLParserNUMBER-33))|(1<<(ElasticSQLParserSTRING-33))|(1<<(ElasticSQLParserAS-33))|(1<<(ElasticSQLParserGROUP-33))|(1<<(ElasticSQLParserTEMPLATE-33))|(1<<(ElasticSQLParserALL-33))|(1<<(ElasticSQLParserNOT-33))|(1<<(ElasticSQLParserINTO-33))|(1<<(ElasticSQLParserTO-33))|(1<<(ElasticSQLParserEXCLUDE-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(ElasticSQLParserINCLUDE-65))|(1<<(ElasticSQLParserID-65))|(1<<(ElasticSQLParserSLICE-65))|(1<<(ElasticSQLParserJSON-65))|(1<<(ElasticSQLParserCSV-65))|(1<<(ElasticSQLParserEXCEL-65))|(1<<(ElasticSQLParserSEP-65))|(1<<(ElasticSQLParserSCRIPT-65))|(1<<(ElasticSQLParserLANG-65))|(1<<(ElasticSQLParserRETURN-65))|(1<<(ElasticSQLParserPK-65))|(1<<(ElasticSQLParserUUID-65))|(1<<(ElasticSQLParserMEM-65))|(1<<(ElasticSQLParserRIGHT-65))|(1<<(ElasticSQLParserLEFT-65))|(1<<(ElasticSQLParserALIAS-65))|(1<<(ElasticSQLParserRLIKE-65))|(1<<(ElasticSQLParserLIKE-65))|(1<<(ElasticSQLParserIN-65))|(1<<(ElasticSQLParserOUT-65)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(ElasticSQLParserEXIST-99))|(1<<(ElasticSQLParserMISS-99))|(1<<(ElasticSQLParserQUERY_STRING-99))|(1<<(ElasticSQLParserMATCH-99))|(1<<(ElasticSQLParserMULTI_MATCH-99))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-99))|(1<<(ElasticSQLParserMATCH_PHRASE-99))|(1<<(ElasticSQLParserKNN-99))|(1<<(ElasticSQLParserHAS_CHILD-99))|(1<<(ElasticSQLParserHAS_PARENT-99))|(1<<(ElasticSQLParserCOUNT-99))|(1<<(ElasticSQLParserMAX-99))|(1<<(ElasticSQLParserMIN-99))|(1<<(ElasticSQLParserAVG-99))|(1<<(ElasticSQLParserSUM-99))|(1<<(ElasticSQLParserDISTINCT-99))|(1<<(ElasticSQLParserVALUE_COUNT-99))|(1<<(ElasticSQLParserPERCENTILE_RANKS-99))|(1<<(ElasticSQLParserPERCENTILES-99))|(1<<(ElasticSQLParserPERCENT-99))|(1<<(ElasticSQLParserDISTINCT_PERCENT-99))|(1<<(ElasticSQLParserTOP_HITS-99))|(1<<(ElasticSQLParserMATH-99))|(1<<(ElasticSQLParserRANGE-99))|(1<<(ElasticSQLParserINTERVAL-99))|(1<<(ElasticSQLParserFORMAT-99)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(ElasticSQLParserKEYED-131))|(1<<(ElasticSQLParserSIZE-131))|(1<<(ElasticSQLParserMISSING-131))|(1<<(ElasticSQLParserNULL-131))|(1<<(ElasticSQLParserEND-131))|(1<<(ElasticSQLParserSAMPLE-131))|(1<<(ElasticSQLParserIDS-131))|(1<<(ElasticSQLParserIDS_FILE-131))|(1<<(ElasticSQLParserPUT-131))|(1<<(ElasticSQLParserADD-131))|(1<<(ElasticSQLParserDATETIME_T-131))|(1<<(ElasticSQLParserTIMESTAMP_T-131))|(1<<(ElasticSQLParserDATE_T-131))|(1<<(ElasticSQLParserTIME_T-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(ElasticSQLParserLOCAL-163))|(1<<(ElasticSQLParserDATA-163))|(1<<(ElasticSQLParserLIST-163))|(1<<(ElasticSQLParserSEPARATED-163))|(1<<(ElasticSQLParserANALYZE-163))|(1<<(ElasticSQLParserNLP-163))|(1<<(ElasticSQLParserENABLE-163))|(1<<(ElasticSQLParserSEGMENT-163))|(1<<(ElasticSQLParserNAME-163))|(1<<(ElasticSQLParserORG-163))|(1<<(ElasticSQLParserLOC-163))|(1<<(ElasticSQLParserTIME-163))|(1<<(ElasticSQLParserIDENTIFIER-163)))) != 0) {
		p.SetState(423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserAS {
			{
				p.SetState(422)
				p.Match(ElasticSQLParserAS)
			}

		}
		{
			p.SetState(425)

			var _x = p.StrictIdentifier()

			localctx.(*FieldAsContext).as = _x
		}

	}
	p.SetState(430)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserBY {
		{
			p.SetState(428)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(429)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*FieldAsContext).tag = _m
		}

	}

	return localctx
}

// IWhereExpressionContext is an interface to support dynamic dispatch.
type IWhereExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScore returns the score rule contexts.
	GetScore() IBooleanValueContext

	// SetScore sets the score rule contexts.
	SetScore(IBooleanValueContext)

	// IsWhereExpressionContext differentiates from other interfaces.
	IsWhereExpressionContext()
}

type WhereExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	score  IBooleanValueContext
}

func NewEmptyWhereExpressionContext() *WhereExpressionContext {
	var p = new(WhereExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_whereExpression
	return p
}

func (*WhereExpressionContext) IsWhereExpressionContext() {}

func NewWhereExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereExpressionContext {
	var p = new(WhereExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_whereExpression

	return p
}

func (s *WhereExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereExpressionContext) GetScore() IBooleanValueContext { return s.score }

func (s *WhereExpressionContext) SetScore(v IBooleanValueContext) { s.score = v }

func (s *WhereExpressionContext) ALL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALL, 0)
}

func (s *WhereExpressionContext) LogicalExpr() ILogicalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalExprContext)
}

func (s *WhereExpressionContext) SCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCORE, 0)
}

func (s *WhereExpressionContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *WhereExpressionContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXPLAIN, 0)
}

func (s *WhereExpressionContext) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *WhereExpressionContext) AND() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAND, 0)
}

func (s *WhereExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterWhereExpression(s)
	}
}

func (s *WhereExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitWhereExpression(s)
	}
}

func (s *WhereExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitWhereExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) WhereExpression() (localctx IWhereExpressionContext) {
	localctx = NewWhereExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ElasticSQLParserRULE_whereExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__1 {
		{
			p.SetState(432)
			p.Match(ElasticSQLParserT__1)
		}
		p.SetState(434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserEXPLAIN {
			{
				p.SetState(433)
				p.Match(ElasticSQLParserEXPLAIN)
			}

		}

		{
			p.SetState(436)
			p.Match(ElasticSQLParserSCORE)
		}
		{
			p.SetState(437)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(438)

			var _x = p.BooleanValue()

			localctx.(*WhereExpressionContext).score = _x
		}

		{
			p.SetState(440)
			p.Match(ElasticSQLParserT__2)
		}

	}
	p.SetState(448)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(444)
			p.Match(ElasticSQLParserALL)
		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserAND {
			{
				p.SetState(445)
				p.Match(ElasticSQLParserAND)
			}

		}

	}
	p.SetState(451)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(450)
			p.logicalExpr(0)
		}

	}

	return localctx
}

// ILogicalExprContext is an interface to support dynamic dispatch.
type ILogicalExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOperator returns the operator token.
	GetOperator() antlr.Token

	// SetOperator sets the operator token.
	SetOperator(antlr.Token)

	// GetLeft returns the left rule contexts.
	GetLeft() ILogicalExprContext

	// GetInner returns the inner rule contexts.
	GetInner() ILogicalExprContext

	// GetRight returns the right rule contexts.
	GetRight() ILogicalExprContext

	// SetLeft sets the left rule contexts.
	SetLeft(ILogicalExprContext)

	// SetInner sets the inner rule contexts.
	SetInner(ILogicalExprContext)

	// SetRight sets the right rule contexts.
	SetRight(ILogicalExprContext)

	// IsLogicalExprContext differentiates from other interfaces.
	IsLogicalExprContext()
}

type LogicalExprContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	left     ILogicalExprContext
	inner    ILogicalExprContext
	operator antlr.Token
	right    ILogicalExprContext
}

func NewEmptyLogicalExprContext() *LogicalExprContext {
	var p = new(LogicalExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_logicalExpr
	return p
}

func (*LogicalExprContext) IsLogicalExprContext() {}

func NewLogicalExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalExprContext {
	var p = new(LogicalExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_logicalExpr

	return p
}

func (s *LogicalExprContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalExprContext) GetOperator() antlr.Token { return s.operator }

func (s *LogicalExprContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LogicalExprContext) GetLeft() ILogicalExprContext { return s.left }

func (s *LogicalExprContext) GetInner() ILogicalExprContext { return s.inner }

func (s *LogicalExprContext) GetRight() ILogicalExprContext { return s.right }

func (s *LogicalExprContext) SetLeft(v ILogicalExprContext) { s.left = v }

func (s *LogicalExprContext) SetInner(v ILogicalExprContext) { s.inner = v }

func (s *LogicalExprContext) SetRight(v ILogicalExprContext) { s.right = v }

func (s *LogicalExprContext) ComparableExpression() IComparableExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparableExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparableExpressionContext)
}

func (s *LogicalExprContext) AllLogicalExpr() []ILogicalExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogicalExprContext)(nil)).Elem())
	var tst = make([]ILogicalExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogicalExprContext)
		}
	}

	return tst
}

func (s *LogicalExprContext) LogicalExpr(i int) ILogicalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogicalExprContext)
}

func (s *LogicalExprContext) AND() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAND, 0)
}

func (s *LogicalExprContext) OR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserOR, 0)
}

func (s *LogicalExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterLogicalExpr(s)
	}
}

func (s *LogicalExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitLogicalExpr(s)
	}
}

func (s *LogicalExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitLogicalExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) LogicalExpr() (localctx ILogicalExprContext) {
	return p.logicalExpr(0)
}

func (p *ElasticSQLParser) logicalExpr(_p int) (localctx ILogicalExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 26
	p.EnterRecursionRule(localctx, 26, ElasticSQLParserRULE_logicalExpr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(454)
			p.ComparableExpression()
		}

	case 2:
		{
			p.SetState(455)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(456)

			var _x = p.logicalExpr(0)

			localctx.(*LogicalExprContext).inner = _x
		}
		{
			p.SetState(457)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(467)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLogicalExprContext(p, _parentctx, _parentState)
				localctx.(*LogicalExprContext).left = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ElasticSQLParserRULE_logicalExpr)
				p.SetState(461)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(462)

					var _m = p.Match(ElasticSQLParserAND)

					localctx.(*LogicalExprContext).operator = _m
				}
				{
					p.SetState(463)

					var _x = p.logicalExpr(3)

					localctx.(*LogicalExprContext).right = _x
				}

			case 2:
				localctx = NewLogicalExprContext(p, _parentctx, _parentState)
				localctx.(*LogicalExprContext).left = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ElasticSQLParserRULE_logicalExpr)
				p.SetState(464)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(465)

					var _m = p.Match(ElasticSQLParserOR)

					localctx.(*LogicalExprContext).operator = _m
				}
				{
					p.SetState(466)

					var _x = p.logicalExpr(2)

					localctx.(*LogicalExprContext).right = _x
				}

			}

		}
		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())
	}

	return localctx
}

// IComparableExpressionContext is an interface to support dynamic dispatch.
type IComparableExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNot returns the not token.
	GetNot() antlr.Token

	// SetNot sets the not token.
	SetNot(antlr.Token)

	// GetTCmp returns the tCmp rule contexts.
	GetTCmp() ITermCompareContext

	// GetBtwCmp returns the btwCmp rule contexts.
	GetBtwCmp() IBtwCompareContext

	// GetFuncCmp returns the funcCmp rule contexts.
	GetFuncCmp() IFunctionalCompareContext

	// GetMathCmp returns the mathCmp rule contexts.
	GetMathCmp() IArithmeticExpressionCompareContext

	// SetTCmp sets the tCmp rule contexts.
	SetTCmp(ITermCompareContext)

	// SetBtwCmp sets the btwCmp rule contexts.
	SetBtwCmp(IBtwCompareContext)

	// SetFuncCmp sets the funcCmp rule contexts.
	SetFuncCmp(IFunctionalCompareContext)

	// SetMathCmp sets the mathCmp rule contexts.
	SetMathCmp(IArithmeticExpressionCompareContext)

	// IsComparableExpressionContext differentiates from other interfaces.
	IsComparableExpressionContext()
}

type ComparableExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	not     antlr.Token
	tCmp    ITermCompareContext
	btwCmp  IBtwCompareContext
	funcCmp IFunctionalCompareContext
	mathCmp IArithmeticExpressionCompareContext
}

func NewEmptyComparableExpressionContext() *ComparableExpressionContext {
	var p = new(ComparableExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_comparableExpression
	return p
}

func (*ComparableExpressionContext) IsComparableExpressionContext() {}

func NewComparableExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparableExpressionContext {
	var p = new(ComparableExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_comparableExpression

	return p
}

func (s *ComparableExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparableExpressionContext) GetNot() antlr.Token { return s.not }

func (s *ComparableExpressionContext) SetNot(v antlr.Token) { s.not = v }

func (s *ComparableExpressionContext) GetTCmp() ITermCompareContext { return s.tCmp }

func (s *ComparableExpressionContext) GetBtwCmp() IBtwCompareContext { return s.btwCmp }

func (s *ComparableExpressionContext) GetFuncCmp() IFunctionalCompareContext { return s.funcCmp }

func (s *ComparableExpressionContext) GetMathCmp() IArithmeticExpressionCompareContext {
	return s.mathCmp
}

func (s *ComparableExpressionContext) SetTCmp(v ITermCompareContext) { s.tCmp = v }

func (s *ComparableExpressionContext) SetBtwCmp(v IBtwCompareContext) { s.btwCmp = v }

func (s *ComparableExpressionContext) SetFuncCmp(v IFunctionalCompareContext) { s.funcCmp = v }

func (s *ComparableExpressionContext) SetMathCmp(v IArithmeticExpressionCompareContext) {
	s.mathCmp = v
}

func (s *ComparableExpressionContext) TermCompare() ITermCompareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermCompareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermCompareContext)
}

func (s *ComparableExpressionContext) BtwCompare() IBtwCompareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBtwCompareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBtwCompareContext)
}

func (s *ComparableExpressionContext) FunctionalCompare() IFunctionalCompareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionalCompareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionalCompareContext)
}

func (s *ComparableExpressionContext) ArithmeticExpressionCompare() IArithmeticExpressionCompareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmeticExpressionCompareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArithmeticExpressionCompareContext)
}

func (s *ComparableExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNOT, 0)
}

func (s *ComparableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparableExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparableExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterComparableExpression(s)
	}
}

func (s *ComparableExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitComparableExpression(s)
	}
}

func (s *ComparableExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitComparableExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ComparableExpression() (localctx IComparableExpressionContext) {
	localctx = NewComparableExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ElasticSQLParserRULE_comparableExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(473)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(472)

			var _m = p.Match(ElasticSQLParserNOT)

			localctx.(*ComparableExpressionContext).not = _m
		}

	}
	p.SetState(479)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(475)

			var _x = p.TermCompare()

			localctx.(*ComparableExpressionContext).tCmp = _x
		}

	case 2:
		{
			p.SetState(476)

			var _x = p.BtwCompare()

			localctx.(*ComparableExpressionContext).btwCmp = _x
		}

	case 3:
		{
			p.SetState(477)

			var _x = p.FunctionalCompare()

			localctx.(*ComparableExpressionContext).funcCmp = _x
		}

	case 4:
		{
			p.SetState(478)

			var _x = p.ArithmeticExpressionCompare()

			localctx.(*ComparableExpressionContext).mathCmp = _x
		}

	}

	return localctx
}

// ITermCompareContext is an interface to support dynamic dispatch.
type ITermCompareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetBoost returns the boost rule contexts.
	GetBoost() INumberContext

	// GetOperator returns the operator rule contexts.
	GetOperator() IComparisonOperatorContext

	// GetValue returns the value rule contexts.
	GetValue() IParamContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetBoost sets the boost rule contexts.
	SetBoost(INumberContext)

	// SetOperator sets the operator rule contexts.
	SetOperator(IComparisonOperatorContext)

	// SetValue sets the value rule contexts.
	SetValue(IParamContext)

	// IsTermCompareContext differentiates from other interfaces.
	IsTermCompareContext()
}

type TermCompareContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	field    IFieldIdentifierContext
	boost    INumberContext
	operator IComparisonOperatorContext
	value    IParamContext
}

func NewEmptyTermCompareContext() *TermCompareContext {
	var p = new(TermCompareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_termCompare
	return p
}

func (*TermCompareContext) IsTermCompareContext() {}

func NewTermCompareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermCompareContext {
	var p = new(TermCompareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_termCompare

	return p
}

func (s *TermCompareContext) GetParser() antlr.Parser { return s.parser }

func (s *TermCompareContext) GetField() IFieldIdentifierContext { return s.field }

func (s *TermCompareContext) GetBoost() INumberContext { return s.boost }

func (s *TermCompareContext) GetOperator() IComparisonOperatorContext { return s.operator }

func (s *TermCompareContext) GetValue() IParamContext { return s.value }

func (s *TermCompareContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *TermCompareContext) SetBoost(v INumberContext) { s.boost = v }

func (s *TermCompareContext) SetOperator(v IComparisonOperatorContext) { s.operator = v }

func (s *TermCompareContext) SetValue(v IParamContext) { s.value = v }

func (s *TermCompareContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *TermCompareContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *TermCompareContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *TermCompareContext) POWER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPOWER, 0)
}

func (s *TermCompareContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *TermCompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermCompareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermCompareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterTermCompare(s)
	}
}

func (s *TermCompareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitTermCompare(s)
	}
}

func (s *TermCompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitTermCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) TermCompare() (localctx ITermCompareContext) {
	localctx = NewTermCompareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ElasticSQLParserRULE_termCompare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)

		var _x = p.FieldIdentifier()

		localctx.(*TermCompareContext).field = _x
	}
	p.SetState(484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserPOWER {
		{
			p.SetState(482)
			p.Match(ElasticSQLParserPOWER)
		}
		{
			p.SetState(483)

			var _x = p.Number()

			localctx.(*TermCompareContext).boost = _x
		}

	}
	{
		p.SetState(486)

		var _x = p.ComparisonOperator()

		localctx.(*TermCompareContext).operator = _x
	}
	{
		p.SetState(487)

		var _x = p.Param()

		localctx.(*TermCompareContext).value = _x
	}

	return localctx
}

// IBtwCompareContext is an interface to support dynamic dispatch.
type IBtwCompareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNot returns the not token.
	GetNot() antlr.Token

	// GetGte returns the gte token.
	GetGte() antlr.Token

	// GetLte returns the lte token.
	GetLte() antlr.Token

	// GetGt returns the gt token.
	GetGt() antlr.Token

	// GetLt returns the lt token.
	GetLt() antlr.Token

	// SetNot sets the not token.
	SetNot(antlr.Token)

	// SetGte sets the gte token.
	SetGte(antlr.Token)

	// SetLte sets the lte token.
	SetLte(antlr.Token)

	// SetGt sets the gt token.
	SetGt(antlr.Token)

	// SetLt sets the lt token.
	SetLt(antlr.Token)

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetA returns the a rule contexts.
	GetA() IParamContext

	// GetB returns the b rule contexts.
	GetB() IParamContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetA sets the a rule contexts.
	SetA(IParamContext)

	// SetB sets the b rule contexts.
	SetB(IParamContext)

	// IsBtwCompareContext differentiates from other interfaces.
	IsBtwCompareContext()
}

type BtwCompareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	field  IFieldIdentifierContext
	not    antlr.Token
	gte    antlr.Token
	a      IParamContext
	lte    antlr.Token
	b      IParamContext
	gt     antlr.Token
	lt     antlr.Token
}

func NewEmptyBtwCompareContext() *BtwCompareContext {
	var p = new(BtwCompareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_btwCompare
	return p
}

func (*BtwCompareContext) IsBtwCompareContext() {}

func NewBtwCompareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BtwCompareContext {
	var p = new(BtwCompareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_btwCompare

	return p
}

func (s *BtwCompareContext) GetParser() antlr.Parser { return s.parser }

func (s *BtwCompareContext) GetNot() antlr.Token { return s.not }

func (s *BtwCompareContext) GetGte() antlr.Token { return s.gte }

func (s *BtwCompareContext) GetLte() antlr.Token { return s.lte }

func (s *BtwCompareContext) GetGt() antlr.Token { return s.gt }

func (s *BtwCompareContext) GetLt() antlr.Token { return s.lt }

func (s *BtwCompareContext) SetNot(v antlr.Token) { s.not = v }

func (s *BtwCompareContext) SetGte(v antlr.Token) { s.gte = v }

func (s *BtwCompareContext) SetLte(v antlr.Token) { s.lte = v }

func (s *BtwCompareContext) SetGt(v antlr.Token) { s.gt = v }

func (s *BtwCompareContext) SetLt(v antlr.Token) { s.lt = v }

func (s *BtwCompareContext) GetField() IFieldIdentifierContext { return s.field }

func (s *BtwCompareContext) GetA() IParamContext { return s.a }

func (s *BtwCompareContext) GetB() IParamContext { return s.b }

func (s *BtwCompareContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *BtwCompareContext) SetA(v IParamContext) { s.a = v }

func (s *BtwCompareContext) SetB(v IParamContext) { s.b = v }

func (s *BtwCompareContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *BtwCompareContext) NOT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNOT, 0)
}

func (s *BtwCompareContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRANGE, 0)
}

func (s *BtwCompareContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBETWEEN, 0)
}

func (s *BtwCompareContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *BtwCompareContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *BtwCompareContext) AND() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAND, 0)
}

func (s *BtwCompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BtwCompareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BtwCompareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBtwCompare(s)
	}
}

func (s *BtwCompareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBtwCompare(s)
	}
}

func (s *BtwCompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBtwCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BtwCompare() (localctx IBtwCompareContext) {
	localctx = NewBtwCompareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ElasticSQLParserRULE_btwCompare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(489)

		var _x = p.FieldIdentifier()

		localctx.(*BtwCompareContext).field = _x
	}
	p.SetState(491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserNOT {
		{
			p.SetState(490)

			var _m = p.Match(ElasticSQLParserNOT)

			localctx.(*BtwCompareContext).not = _m
		}

	}
	p.SetState(510)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserBETWEEN:
		{
			p.SetState(493)

			var _m = p.Match(ElasticSQLParserBETWEEN)

			localctx.(*BtwCompareContext).gte = _m
		}
		{
			p.SetState(494)

			var _x = p.Param()

			localctx.(*BtwCompareContext).a = _x
		}
		{
			p.SetState(495)

			var _m = p.Match(ElasticSQLParserAND)

			localctx.(*BtwCompareContext).lte = _m
		}
		{
			p.SetState(496)

			var _x = p.Param()

			localctx.(*BtwCompareContext).b = _x
		}

	case ElasticSQLParserRANGE:
		{
			p.SetState(498)
			p.Match(ElasticSQLParserRANGE)
		}
		p.SetState(501)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ElasticSQLParserT__6:
			{
				p.SetState(499)

				var _m = p.Match(ElasticSQLParserT__6)

				localctx.(*BtwCompareContext).gte = _m
			}

		case ElasticSQLParserT__4:
			{
				p.SetState(500)

				var _m = p.Match(ElasticSQLParserT__4)

				localctx.(*BtwCompareContext).gt = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(503)

			var _x = p.Param()

			localctx.(*BtwCompareContext).a = _x
		}
		{
			p.SetState(504)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(505)

			var _x = p.Param()

			localctx.(*BtwCompareContext).b = _x
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ElasticSQLParserT__7:
			{
				p.SetState(506)

				var _m = p.Match(ElasticSQLParserT__7)

				localctx.(*BtwCompareContext).lte = _m
			}

		case ElasticSQLParserT__5:
			{
				p.SetState(507)

				var _m = p.Match(ElasticSQLParserT__5)

				localctx.(*BtwCompareContext).lt = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArithmeticExpressionCompareContext is an interface to support dynamic dispatch.
type IArithmeticExpressionCompareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirst returns the first rule contexts.
	GetFirst() IArithmeticExpressionContext

	// GetOp returns the op rule contexts.
	GetOp() IComparisonOperatorContext

	// GetSecond returns the second rule contexts.
	GetSecond() IMultiplyingExpressionContext

	// SetFirst sets the first rule contexts.
	SetFirst(IArithmeticExpressionContext)

	// SetOp sets the op rule contexts.
	SetOp(IComparisonOperatorContext)

	// SetSecond sets the second rule contexts.
	SetSecond(IMultiplyingExpressionContext)

	// IsArithmeticExpressionCompareContext differentiates from other interfaces.
	IsArithmeticExpressionCompareContext()
}

type ArithmeticExpressionCompareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	first  IArithmeticExpressionContext
	op     IComparisonOperatorContext
	second IMultiplyingExpressionContext
}

func NewEmptyArithmeticExpressionCompareContext() *ArithmeticExpressionCompareContext {
	var p = new(ArithmeticExpressionCompareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_arithmeticExpressionCompare
	return p
}

func (*ArithmeticExpressionCompareContext) IsArithmeticExpressionCompareContext() {}

func NewArithmeticExpressionCompareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArithmeticExpressionCompareContext {
	var p = new(ArithmeticExpressionCompareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_arithmeticExpressionCompare

	return p
}

func (s *ArithmeticExpressionCompareContext) GetParser() antlr.Parser { return s.parser }

func (s *ArithmeticExpressionCompareContext) GetFirst() IArithmeticExpressionContext { return s.first }

func (s *ArithmeticExpressionCompareContext) GetOp() IComparisonOperatorContext { return s.op }

func (s *ArithmeticExpressionCompareContext) GetSecond() IMultiplyingExpressionContext {
	return s.second
}

func (s *ArithmeticExpressionCompareContext) SetFirst(v IArithmeticExpressionContext) { s.first = v }

func (s *ArithmeticExpressionCompareContext) SetOp(v IComparisonOperatorContext) { s.op = v }

func (s *ArithmeticExpressionCompareContext) SetSecond(v IMultiplyingExpressionContext) { s.second = v }

func (s *ArithmeticExpressionCompareContext) ArithmeticExpression() IArithmeticExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmeticExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArithmeticExpressionContext)
}

func (s *ArithmeticExpressionCompareContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *ArithmeticExpressionCompareContext) MultiplyingExpression() IMultiplyingExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplyingExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplyingExpressionContext)
}

func (s *ArithmeticExpressionCompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticExpressionCompareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArithmeticExpressionCompareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterArithmeticExpressionCompare(s)
	}
}

func (s *ArithmeticExpressionCompareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitArithmeticExpressionCompare(s)
	}
}

func (s *ArithmeticExpressionCompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitArithmeticExpressionCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ArithmeticExpressionCompare() (localctx IArithmeticExpressionCompareContext) {
	localctx = NewArithmeticExpressionCompareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ElasticSQLParserRULE_arithmeticExpressionCompare)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(512)

		var _x = p.ArithmeticExpression()

		localctx.(*ArithmeticExpressionCompareContext).first = _x
	}
	{
		p.SetState(513)

		var _x = p.ComparisonOperator()

		localctx.(*ArithmeticExpressionCompareContext).op = _x
	}
	{
		p.SetState(514)

		var _x = p.MultiplyingExpression()

		localctx.(*ArithmeticExpressionCompareContext).second = _x
	}

	return localctx
}

// IArithmeticExpressionContext is an interface to support dynamic dispatch.
type IArithmeticExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirst returns the first rule contexts.
	GetFirst() IMultiplyingExpressionContext

	// Get_addition returns the _addition rule contexts.
	Get_addition() IAdditionContext

	// SetFirst sets the first rule contexts.
	SetFirst(IMultiplyingExpressionContext)

	// Set_addition sets the _addition rule contexts.
	Set_addition(IAdditionContext)

	// GetRest returns the rest rule context list.
	GetRest() []IAdditionContext

	// SetRest sets the rest rule context list.
	SetRest([]IAdditionContext)

	// IsArithmeticExpressionContext differentiates from other interfaces.
	IsArithmeticExpressionContext()
}

type ArithmeticExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	first     IMultiplyingExpressionContext
	_addition IAdditionContext
	rest      []IAdditionContext
}

func NewEmptyArithmeticExpressionContext() *ArithmeticExpressionContext {
	var p = new(ArithmeticExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_arithmeticExpression
	return p
}

func (*ArithmeticExpressionContext) IsArithmeticExpressionContext() {}

func NewArithmeticExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArithmeticExpressionContext {
	var p = new(ArithmeticExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_arithmeticExpression

	return p
}

func (s *ArithmeticExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ArithmeticExpressionContext) GetFirst() IMultiplyingExpressionContext { return s.first }

func (s *ArithmeticExpressionContext) Get_addition() IAdditionContext { return s._addition }

func (s *ArithmeticExpressionContext) SetFirst(v IMultiplyingExpressionContext) { s.first = v }

func (s *ArithmeticExpressionContext) Set_addition(v IAdditionContext) { s._addition = v }

func (s *ArithmeticExpressionContext) GetRest() []IAdditionContext { return s.rest }

func (s *ArithmeticExpressionContext) SetRest(v []IAdditionContext) { s.rest = v }

func (s *ArithmeticExpressionContext) MultiplyingExpression() IMultiplyingExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplyingExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplyingExpressionContext)
}

func (s *ArithmeticExpressionContext) AllAddition() []IAdditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdditionContext)(nil)).Elem())
	var tst = make([]IAdditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdditionContext)
		}
	}

	return tst
}

func (s *ArithmeticExpressionContext) Addition(i int) IAdditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdditionContext)
}

func (s *ArithmeticExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArithmeticExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterArithmeticExpression(s)
	}
}

func (s *ArithmeticExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitArithmeticExpression(s)
	}
}

func (s *ArithmeticExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitArithmeticExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ArithmeticExpression() (localctx IArithmeticExpressionContext) {
	localctx = NewArithmeticExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ElasticSQLParserRULE_arithmeticExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(516)

		var _x = p.MultiplyingExpression()

		localctx.(*ArithmeticExpressionContext).first = _x
	}
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(517)

				var _x = p.Addition()

				localctx.(*ArithmeticExpressionContext)._addition = _x
			}
			localctx.(*ArithmeticExpressionContext).rest = append(localctx.(*ArithmeticExpressionContext).rest, localctx.(*ArithmeticExpressionContext)._addition)

		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditionContext is an interface to support dynamic dispatch.
type IAdditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetNext returns the next rule contexts.
	GetNext() IMultiplyingExpressionContext

	// SetNext sets the next rule contexts.
	SetNext(IMultiplyingExpressionContext)

	// IsAdditionContext differentiates from other interfaces.
	IsAdditionContext()
}

type AdditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
	next   IMultiplyingExpressionContext
}

func NewEmptyAdditionContext() *AdditionContext {
	var p = new(AdditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_addition
	return p
}

func (*AdditionContext) IsAdditionContext() {}

func NewAdditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditionContext {
	var p = new(AdditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_addition

	return p
}

func (s *AdditionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditionContext) GetOp() antlr.Token { return s.op }

func (s *AdditionContext) SetOp(v antlr.Token) { s.op = v }

func (s *AdditionContext) GetNext() IMultiplyingExpressionContext { return s.next }

func (s *AdditionContext) SetNext(v IMultiplyingExpressionContext) { s.next = v }

func (s *AdditionContext) MultiplyingExpression() IMultiplyingExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplyingExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplyingExpressionContext)
}

func (s *AdditionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMINUS, 0)
}

func (s *AdditionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPLUS, 0)
}

func (s *AdditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAddition(s)
	}
}

func (s *AdditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAddition(s)
	}
}

func (s *AdditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAddition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Addition() (localctx IAdditionContext) {
	localctx = NewAdditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ElasticSQLParserRULE_addition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(523)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AdditionContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserPLUS || _la == ElasticSQLParserMINUS) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AdditionContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(524)

		var _x = p.MultiplyingExpression()

		localctx.(*AdditionContext).next = _x
	}

	return localctx
}

// IMultiplyingExpressionContext is an interface to support dynamic dispatch.
type IMultiplyingExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirst returns the first rule contexts.
	GetFirst() IAtomContext

	// Get_multi returns the _multi rule contexts.
	Get_multi() IMultiContext

	// SetFirst sets the first rule contexts.
	SetFirst(IAtomContext)

	// Set_multi sets the _multi rule contexts.
	Set_multi(IMultiContext)

	// GetRest returns the rest rule context list.
	GetRest() []IMultiContext

	// SetRest sets the rest rule context list.
	SetRest([]IMultiContext)

	// IsMultiplyingExpressionContext differentiates from other interfaces.
	IsMultiplyingExpressionContext()
}

type MultiplyingExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	first  IAtomContext
	_multi IMultiContext
	rest   []IMultiContext
}

func NewEmptyMultiplyingExpressionContext() *MultiplyingExpressionContext {
	var p = new(MultiplyingExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_multiplyingExpression
	return p
}

func (*MultiplyingExpressionContext) IsMultiplyingExpressionContext() {}

func NewMultiplyingExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplyingExpressionContext {
	var p = new(MultiplyingExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_multiplyingExpression

	return p
}

func (s *MultiplyingExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplyingExpressionContext) GetFirst() IAtomContext { return s.first }

func (s *MultiplyingExpressionContext) Get_multi() IMultiContext { return s._multi }

func (s *MultiplyingExpressionContext) SetFirst(v IAtomContext) { s.first = v }

func (s *MultiplyingExpressionContext) Set_multi(v IMultiContext) { s._multi = v }

func (s *MultiplyingExpressionContext) GetRest() []IMultiContext { return s.rest }

func (s *MultiplyingExpressionContext) SetRest(v []IMultiContext) { s.rest = v }

func (s *MultiplyingExpressionContext) Atom() IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *MultiplyingExpressionContext) AllMulti() []IMultiContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiContext)(nil)).Elem())
	var tst = make([]IMultiContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiContext)
		}
	}

	return tst
}

func (s *MultiplyingExpressionContext) Multi(i int) IMultiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiContext)
}

func (s *MultiplyingExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplyingExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplyingExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMultiplyingExpression(s)
	}
}

func (s *MultiplyingExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMultiplyingExpression(s)
	}
}

func (s *MultiplyingExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMultiplyingExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MultiplyingExpression() (localctx IMultiplyingExpressionContext) {
	localctx = NewMultiplyingExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ElasticSQLParserRULE_multiplyingExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(526)

		var _x = p.Atom()

		localctx.(*MultiplyingExpressionContext).first = _x
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(527)

				var _x = p.Multi()

				localctx.(*MultiplyingExpressionContext)._multi = _x
			}
			localctx.(*MultiplyingExpressionContext).rest = append(localctx.(*MultiplyingExpressionContext).rest, localctx.(*MultiplyingExpressionContext)._multi)

		}
		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
	}

	return localctx
}

// IMultiContext is an interface to support dynamic dispatch.
type IMultiContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetNext returns the next rule contexts.
	GetNext() IAtomContext

	// SetNext sets the next rule contexts.
	SetNext(IAtomContext)

	// IsMultiContext differentiates from other interfaces.
	IsMultiContext()
}

type MultiContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
	next   IAtomContext
}

func NewEmptyMultiContext() *MultiContext {
	var p = new(MultiContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_multi
	return p
}

func (*MultiContext) IsMultiContext() {}

func NewMultiContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiContext {
	var p = new(MultiContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_multi

	return p
}

func (s *MultiContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiContext) GetOp() antlr.Token { return s.op }

func (s *MultiContext) SetOp(v antlr.Token) { s.op = v }

func (s *MultiContext) GetNext() IAtomContext { return s.next }

func (s *MultiContext) SetNext(v IAtomContext) { s.next = v }

func (s *MultiContext) Atom() IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *MultiContext) MUL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMUL, 0)
}

func (s *MultiContext) DIV() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDIV, 0)
}

func (s *MultiContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMulti(s)
	}
}

func (s *MultiContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMulti(s)
	}
}

func (s *MultiContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMulti(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Multi() (localctx IMultiContext) {
	localctx = NewMultiContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ElasticSQLParserRULE_multi)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(533)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MultiContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserMUL || _la == ElasticSQLParserDIV) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MultiContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(534)

		var _x = p.Atom()

		localctx.(*MultiContext).next = _x
	}

	return localctx
}

// IAtomContext is an interface to support dynamic dispatch.
type IAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetData returns the data rule contexts.
	GetData() IParamContext

	// GetInner returns the inner rule contexts.
	GetInner() IArithmeticExpressionContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetData sets the data rule contexts.
	SetData(IParamContext)

	// SetInner sets the inner rule contexts.
	SetInner(IArithmeticExpressionContext)

	// IsAtomContext differentiates from other interfaces.
	IsAtomContext()
}

type AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	field  IFieldIdentifierContext
	data   IParamContext
	inner  IArithmeticExpressionContext
}

func NewEmptyAtomContext() *AtomContext {
	var p = new(AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_atom
	return p
}

func (*AtomContext) IsAtomContext() {}

func NewAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomContext {
	var p = new(AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_atom

	return p
}

func (s *AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomContext) GetField() IFieldIdentifierContext { return s.field }

func (s *AtomContext) GetData() IParamContext { return s.data }

func (s *AtomContext) GetInner() IArithmeticExpressionContext { return s.inner }

func (s *AtomContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *AtomContext) SetData(v IParamContext) { s.data = v }

func (s *AtomContext) SetInner(v IArithmeticExpressionContext) { s.inner = v }

func (s *AtomContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *AtomContext) TIME() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIME, 0)
}

func (s *AtomContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *AtomContext) ArithmeticExpression() IArithmeticExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmeticExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArithmeticExpressionContext)
}

func (s *AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAtom(s)
	}
}

func (s *AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAtom(s)
	}
}

func (s *AtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Atom() (localctx IAtomContext) {
	localctx = NewAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ElasticSQLParserRULE_atom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(536)

			var _x = p.FieldIdentifier()

			localctx.(*AtomContext).field = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(537)
			p.Match(ElasticSQLParserTIME)
		}
		{
			p.SetState(538)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(539)

			var _x = p.FieldIdentifier()

			localctx.(*AtomContext).field = _x
		}
		{
			p.SetState(540)
			p.Match(ElasticSQLParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(542)

			var _x = p.Param()

			localctx.(*AtomContext).data = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(543)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(544)

			var _x = p.ArithmeticExpression()

			localctx.(*AtomContext).inner = _x
		}
		{
			p.SetState(545)
			p.Match(ElasticSQLParserT__5)
		}

	}

	return localctx
}

// IFunctionalCompareContext is an interface to support dynamic dispatch.
type IFunctionalCompareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionalCompareContext differentiates from other interfaces.
	IsFunctionalCompareContext()
}

type FunctionalCompareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionalCompareContext() *FunctionalCompareContext {
	var p = new(FunctionalCompareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_functionalCompare
	return p
}

func (*FunctionalCompareContext) IsFunctionalCompareContext() {}

func NewFunctionalCompareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionalCompareContext {
	var p = new(FunctionalCompareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_functionalCompare

	return p
}

func (s *FunctionalCompareContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionalCompareContext) TermLevelFunction() ITermLevelFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermLevelFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermLevelFunctionContext)
}

func (s *FunctionalCompareContext) FullLevelFunction() IFullLevelFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullLevelFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullLevelFunctionContext)
}

func (s *FunctionalCompareContext) ScriptFunction() IScriptFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptFunctionContext)
}

func (s *FunctionalCompareContext) JoinFunction() IJoinFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinFunctionContext)
}

func (s *FunctionalCompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionalCompareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionalCompareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFunctionalCompare(s)
	}
}

func (s *FunctionalCompareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFunctionalCompare(s)
	}
}

func (s *FunctionalCompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFunctionalCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FunctionalCompare() (localctx IFunctionalCompareContext) {
	localctx = NewFunctionalCompareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ElasticSQLParserRULE_functionalCompare)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(553)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(549)
			p.TermLevelFunction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(550)
			p.FullLevelFunction()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(551)
			p.ScriptFunction()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(552)
			p.JoinFunction()
		}

	}

	return localctx
}

// IJoinFunctionContext is an interface to support dynamic dispatch.
type IJoinFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFuncName returns the funcName rule contexts.
	GetFuncName() IJoinFunctionNamesContext

	// GetRelationName returns the relationName rule contexts.
	GetRelationName() IStrictIdentifierContext

	// GetJoinCondition returns the joinCondition rule contexts.
	GetJoinCondition() IWhereExpressionContext

	// SetFuncName sets the funcName rule contexts.
	SetFuncName(IJoinFunctionNamesContext)

	// SetRelationName sets the relationName rule contexts.
	SetRelationName(IStrictIdentifierContext)

	// SetJoinCondition sets the joinCondition rule contexts.
	SetJoinCondition(IWhereExpressionContext)

	// IsJoinFunctionContext differentiates from other interfaces.
	IsJoinFunctionContext()
}

type JoinFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	funcName      IJoinFunctionNamesContext
	relationName  IStrictIdentifierContext
	joinCondition IWhereExpressionContext
}

func NewEmptyJoinFunctionContext() *JoinFunctionContext {
	var p = new(JoinFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_joinFunction
	return p
}

func (*JoinFunctionContext) IsJoinFunctionContext() {}

func NewJoinFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinFunctionContext {
	var p = new(JoinFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_joinFunction

	return p
}

func (s *JoinFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinFunctionContext) GetFuncName() IJoinFunctionNamesContext { return s.funcName }

func (s *JoinFunctionContext) GetRelationName() IStrictIdentifierContext { return s.relationName }

func (s *JoinFunctionContext) GetJoinCondition() IWhereExpressionContext { return s.joinCondition }

func (s *JoinFunctionContext) SetFuncName(v IJoinFunctionNamesContext) { s.funcName = v }

func (s *JoinFunctionContext) SetRelationName(v IStrictIdentifierContext) { s.relationName = v }

func (s *JoinFunctionContext) SetJoinCondition(v IWhereExpressionContext) { s.joinCondition = v }

func (s *JoinFunctionContext) JoinFunctionNames() IJoinFunctionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinFunctionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinFunctionNamesContext)
}

func (s *JoinFunctionContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *JoinFunctionContext) ON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserON, 0)
}

func (s *JoinFunctionContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *JoinFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterJoinFunction(s)
	}
}

func (s *JoinFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitJoinFunction(s)
	}
}

func (s *JoinFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitJoinFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) JoinFunction() (localctx IJoinFunctionContext) {
	localctx = NewJoinFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ElasticSQLParserRULE_joinFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(555)

		var _x = p.JoinFunctionNames()

		localctx.(*JoinFunctionContext).funcName = _x
	}
	{
		p.SetState(556)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(557)

		var _x = p.StrictIdentifier()

		localctx.(*JoinFunctionContext).relationName = _x
	}
	p.SetState(560)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserON {
		{
			p.SetState(558)
			p.Match(ElasticSQLParserON)
		}
		{
			p.SetState(559)

			var _x = p.WhereExpression()

			localctx.(*JoinFunctionContext).joinCondition = _x
		}

	}
	{
		p.SetState(562)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IJoinFunctionNamesContext is an interface to support dynamic dispatch.
type IJoinFunctionNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinFunctionNamesContext differentiates from other interfaces.
	IsJoinFunctionNamesContext()
}

type JoinFunctionNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinFunctionNamesContext() *JoinFunctionNamesContext {
	var p = new(JoinFunctionNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_joinFunctionNames
	return p
}

func (*JoinFunctionNamesContext) IsJoinFunctionNamesContext() {}

func NewJoinFunctionNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinFunctionNamesContext {
	var p = new(JoinFunctionNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_joinFunctionNames

	return p
}

func (s *JoinFunctionNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinFunctionNamesContext) HAS_PARENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_PARENT, 0)
}

func (s *JoinFunctionNamesContext) HAS_CHILD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_CHILD, 0)
}

func (s *JoinFunctionNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinFunctionNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinFunctionNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterJoinFunctionNames(s)
	}
}

func (s *JoinFunctionNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitJoinFunctionNames(s)
	}
}

func (s *JoinFunctionNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitJoinFunctionNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) JoinFunctionNames() (localctx IJoinFunctionNamesContext) {
	localctx = NewJoinFunctionNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ElasticSQLParserRULE_joinFunctionNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserHAS_CHILD || _la == ElasticSQLParserHAS_PARENT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IScriptFunctionContext is an interface to support dynamic dispatch.
type IScriptFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// IsScriptFunctionContext differentiates from other interfaces.
	IsScriptFunctionContext()
}

type ScriptFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	script IScriptPhraseContext
}

func NewEmptyScriptFunctionContext() *ScriptFunctionContext {
	var p = new(ScriptFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_scriptFunction
	return p
}

func (*ScriptFunctionContext) IsScriptFunctionContext() {}

func NewScriptFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptFunctionContext {
	var p = new(ScriptFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_scriptFunction

	return p
}

func (s *ScriptFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptFunctionContext) GetScript() IScriptPhraseContext { return s.script }

func (s *ScriptFunctionContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *ScriptFunctionContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *ScriptFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterScriptFunction(s)
	}
}

func (s *ScriptFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitScriptFunction(s)
	}
}

func (s *ScriptFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitScriptFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ScriptFunction() (localctx IScriptFunctionContext) {
	localctx = NewScriptFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ElasticSQLParserRULE_scriptFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(566)

		var _x = p.ScriptPhrase()

		localctx.(*ScriptFunctionContext).script = _x
	}

	return localctx
}

// IFullLevelFunctionContext is an interface to support dynamic dispatch.
type IFullLevelFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFuncName returns the funcName rule contexts.
	GetFuncName() IFullLevelFunctionNamesContext

	// Get_prop returns the _prop rule contexts.
	Get_prop() IPropContext

	// SetFuncName sets the funcName rule contexts.
	SetFuncName(IFullLevelFunctionNamesContext)

	// Set_prop sets the _prop rule contexts.
	Set_prop(IPropContext)

	// GetProps returns the props rule context list.
	GetProps() []IPropContext

	// SetProps sets the props rule context list.
	SetProps([]IPropContext)

	// IsFullLevelFunctionContext differentiates from other interfaces.
	IsFullLevelFunctionContext()
}

type FullLevelFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	funcName IFullLevelFunctionNamesContext
	_prop    IPropContext
	props    []IPropContext
}

func NewEmptyFullLevelFunctionContext() *FullLevelFunctionContext {
	var p = new(FullLevelFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fullLevelFunction
	return p
}

func (*FullLevelFunctionContext) IsFullLevelFunctionContext() {}

func NewFullLevelFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullLevelFunctionContext {
	var p = new(FullLevelFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fullLevelFunction

	return p
}

func (s *FullLevelFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *FullLevelFunctionContext) GetFuncName() IFullLevelFunctionNamesContext { return s.funcName }

func (s *FullLevelFunctionContext) Get_prop() IPropContext { return s._prop }

func (s *FullLevelFunctionContext) SetFuncName(v IFullLevelFunctionNamesContext) { s.funcName = v }

func (s *FullLevelFunctionContext) Set_prop(v IPropContext) { s._prop = v }

func (s *FullLevelFunctionContext) GetProps() []IPropContext { return s.props }

func (s *FullLevelFunctionContext) SetProps(v []IPropContext) { s.props = v }

func (s *FullLevelFunctionContext) FullLevelFunctionNames() IFullLevelFunctionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullLevelFunctionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullLevelFunctionNamesContext)
}

func (s *FullLevelFunctionContext) AllProp() []IPropContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropContext)(nil)).Elem())
	var tst = make([]IPropContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropContext)
		}
	}

	return tst
}

func (s *FullLevelFunctionContext) Prop(i int) IPropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropContext)
}

func (s *FullLevelFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullLevelFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullLevelFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFullLevelFunction(s)
	}
}

func (s *FullLevelFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFullLevelFunction(s)
	}
}

func (s *FullLevelFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFullLevelFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FullLevelFunction() (localctx IFullLevelFunctionContext) {
	localctx = NewFullLevelFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ElasticSQLParserRULE_fullLevelFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(568)

		var _x = p.FullLevelFunctionNames()

		localctx.(*FullLevelFunctionContext).funcName = _x
	}
	{
		p.SetState(569)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(570)

		var _x = p.Prop()

		localctx.(*FullLevelFunctionContext)._prop = _x
	}
	localctx.(*FullLevelFunctionContext).props = append(localctx.(*FullLevelFunctionContext).props, localctx.(*FullLevelFunctionContext)._prop)
	p.SetState(575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(571)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(572)

			var _x = p.Prop()

			localctx.(*FullLevelFunctionContext)._prop = _x
		}
		localctx.(*FullLevelFunctionContext).props = append(localctx.(*FullLevelFunctionContext).props, localctx.(*FullLevelFunctionContext)._prop)

		p.SetState(577)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(578)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IFullLevelFunctionNamesContext is an interface to support dynamic dispatch.
type IFullLevelFunctionNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullLevelFunctionNamesContext differentiates from other interfaces.
	IsFullLevelFunctionNamesContext()
}

type FullLevelFunctionNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullLevelFunctionNamesContext() *FullLevelFunctionNamesContext {
	var p = new(FullLevelFunctionNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fullLevelFunctionNames
	return p
}

func (*FullLevelFunctionNamesContext) IsFullLevelFunctionNamesContext() {}

func NewFullLevelFunctionNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullLevelFunctionNamesContext {
	var p = new(FullLevelFunctionNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fullLevelFunctionNames

	return p
}

func (s *FullLevelFunctionNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *FullLevelFunctionNamesContext) QUERY_STRING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUERY_STRING, 0)
}

func (s *FullLevelFunctionNamesContext) MATCH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH, 0)
}

func (s *FullLevelFunctionNamesContext) MULTI_MATCH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMULTI_MATCH, 0)
}

func (s *FullLevelFunctionNamesContext) MATCH_PHRASE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH_PHRASE, 0)
}

func (s *FullLevelFunctionNamesContext) MATCH_PHRASE_PREFIX() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH_PHRASE_PREFIX, 0)
}

func (s *FullLevelFunctionNamesContext) KNN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserKNN, 0)
}

func (s *FullLevelFunctionNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullLevelFunctionNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullLevelFunctionNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFullLevelFunctionNames(s)
	}
}

func (s *FullLevelFunctionNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFullLevelFunctionNames(s)
	}
}

func (s *FullLevelFunctionNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFullLevelFunctionNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FullLevelFunctionNames() (localctx IFullLevelFunctionNamesContext) {
	localctx = NewFullLevelFunctionNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ElasticSQLParserRULE_fullLevelFunctionNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(580)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ElasticSQLParserQUERY_STRING-101))|(1<<(ElasticSQLParserMATCH-101))|(1<<(ElasticSQLParserMULTI_MATCH-101))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-101))|(1<<(ElasticSQLParserMATCH_PHRASE-101))|(1<<(ElasticSQLParserKNN-101)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITermLevelFunctionContext is an interface to support dynamic dispatch.
type ITermLevelFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetBoost returns the boost rule contexts.
	GetBoost() INumberContext

	// GetFuncName returns the funcName rule contexts.
	GetFuncName() ITermLevelFunctionNamesContext

	// Get_param2 returns the _param2 rule contexts.
	Get_param2() IParam2Context

	// GetUseField returns the useField rule contexts.
	GetUseField() IFieldIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetBoost sets the boost rule contexts.
	SetBoost(INumberContext)

	// SetFuncName sets the funcName rule contexts.
	SetFuncName(ITermLevelFunctionNamesContext)

	// Set_param2 sets the _param2 rule contexts.
	Set_param2(IParam2Context)

	// SetUseField sets the useField rule contexts.
	SetUseField(IFieldIdentifierContext)

	// GetParams returns the params rule context list.
	GetParams() []IParam2Context

	// SetParams sets the params rule context list.
	SetParams([]IParam2Context)

	// IsTermLevelFunctionContext differentiates from other interfaces.
	IsTermLevelFunctionContext()
}

type TermLevelFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	field    IFieldIdentifierContext
	boost    INumberContext
	funcName ITermLevelFunctionNamesContext
	_param2  IParam2Context
	params   []IParam2Context
	useField IFieldIdentifierContext
}

func NewEmptyTermLevelFunctionContext() *TermLevelFunctionContext {
	var p = new(TermLevelFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_termLevelFunction
	return p
}

func (*TermLevelFunctionContext) IsTermLevelFunctionContext() {}

func NewTermLevelFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermLevelFunctionContext {
	var p = new(TermLevelFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_termLevelFunction

	return p
}

func (s *TermLevelFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TermLevelFunctionContext) GetField() IFieldIdentifierContext { return s.field }

func (s *TermLevelFunctionContext) GetBoost() INumberContext { return s.boost }

func (s *TermLevelFunctionContext) GetFuncName() ITermLevelFunctionNamesContext { return s.funcName }

func (s *TermLevelFunctionContext) Get_param2() IParam2Context { return s._param2 }

func (s *TermLevelFunctionContext) GetUseField() IFieldIdentifierContext { return s.useField }

func (s *TermLevelFunctionContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *TermLevelFunctionContext) SetBoost(v INumberContext) { s.boost = v }

func (s *TermLevelFunctionContext) SetFuncName(v ITermLevelFunctionNamesContext) { s.funcName = v }

func (s *TermLevelFunctionContext) Set_param2(v IParam2Context) { s._param2 = v }

func (s *TermLevelFunctionContext) SetUseField(v IFieldIdentifierContext) { s.useField = v }

func (s *TermLevelFunctionContext) GetParams() []IParam2Context { return s.params }

func (s *TermLevelFunctionContext) SetParams(v []IParam2Context) { s.params = v }

func (s *TermLevelFunctionContext) TermLevelFunctionNames() ITermLevelFunctionNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermLevelFunctionNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermLevelFunctionNamesContext)
}

func (s *TermLevelFunctionContext) AllParam2() []IParam2Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParam2Context)(nil)).Elem())
	var tst = make([]IParam2Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParam2Context)
		}
	}

	return tst
}

func (s *TermLevelFunctionContext) Param2(i int) IParam2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam2Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParam2Context)
}

func (s *TermLevelFunctionContext) AllFieldIdentifier() []IFieldIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem())
	var tst = make([]IFieldIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldIdentifierContext)
		}
	}

	return tst
}

func (s *TermLevelFunctionContext) FieldIdentifier(i int) IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *TermLevelFunctionContext) POWER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPOWER, 0)
}

func (s *TermLevelFunctionContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *TermLevelFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermLevelFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermLevelFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterTermLevelFunction(s)
	}
}

func (s *TermLevelFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitTermLevelFunction(s)
	}
}

func (s *TermLevelFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitTermLevelFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) TermLevelFunction() (localctx ITermLevelFunctionContext) {
	localctx = NewTermLevelFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ElasticSQLParserRULE_termLevelFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(587)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(582)

				var _x = p.FieldIdentifier()

				localctx.(*TermLevelFunctionContext).field = _x
			}
			p.SetState(585)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserPOWER {
				{
					p.SetState(583)
					p.Match(ElasticSQLParserPOWER)
				}
				{
					p.SetState(584)

					var _x = p.Number()

					localctx.(*TermLevelFunctionContext).boost = _x
				}

			}

		}
		{
			p.SetState(589)

			var _x = p.TermLevelFunctionNames()

			localctx.(*TermLevelFunctionContext).funcName = _x
		}
		{
			p.SetState(590)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(591)

			var _x = p.Param2()

			localctx.(*TermLevelFunctionContext)._param2 = _x
		}
		localctx.(*TermLevelFunctionContext).params = append(localctx.(*TermLevelFunctionContext).params, localctx.(*TermLevelFunctionContext)._param2)
		p.SetState(596)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(592)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(593)

				var _x = p.Param2()

				localctx.(*TermLevelFunctionContext)._param2 = _x
			}
			localctx.(*TermLevelFunctionContext).params = append(localctx.(*TermLevelFunctionContext).params, localctx.(*TermLevelFunctionContext)._param2)

			p.SetState(598)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(599)
			p.Match(ElasticSQLParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(601)

			var _x = p.TermLevelFunctionNames()

			localctx.(*TermLevelFunctionContext).funcName = _x
		}
		{
			p.SetState(602)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(603)

			var _x = p.FieldIdentifier()

			localctx.(*TermLevelFunctionContext).field = _x
		}
		p.SetState(606)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserPOWER {
			{
				p.SetState(604)
				p.Match(ElasticSQLParserPOWER)
			}
			{
				p.SetState(605)

				var _x = p.Number()

				localctx.(*TermLevelFunctionContext).boost = _x
			}

		}
		p.SetState(612)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(608)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(609)

				var _x = p.Param2()

				localctx.(*TermLevelFunctionContext)._param2 = _x
			}
			localctx.(*TermLevelFunctionContext).params = append(localctx.(*TermLevelFunctionContext).params, localctx.(*TermLevelFunctionContext)._param2)

			p.SetState(614)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(615)
			p.Match(ElasticSQLParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(622)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(617)

				var _x = p.FieldIdentifier()

				localctx.(*TermLevelFunctionContext).field = _x
			}
			p.SetState(620)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserPOWER {
				{
					p.SetState(618)
					p.Match(ElasticSQLParserPOWER)
				}
				{
					p.SetState(619)

					var _x = p.Number()

					localctx.(*TermLevelFunctionContext).boost = _x
				}

			}

		}
		{
			p.SetState(624)

			var _x = p.TermLevelFunctionNames()

			localctx.(*TermLevelFunctionContext).funcName = _x
		}
		{
			p.SetState(625)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(626)

			var _x = p.FieldIdentifier()

			localctx.(*TermLevelFunctionContext).useField = _x
		}
		{
			p.SetState(627)
			p.Match(ElasticSQLParserT__5)
		}

	}

	return localctx
}

// ITermLevelFunctionNamesContext is an interface to support dynamic dispatch.
type ITermLevelFunctionNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermLevelFunctionNamesContext differentiates from other interfaces.
	IsTermLevelFunctionNamesContext()
}

type TermLevelFunctionNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermLevelFunctionNamesContext() *TermLevelFunctionNamesContext {
	var p = new(TermLevelFunctionNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_termLevelFunctionNames
	return p
}

func (*TermLevelFunctionNamesContext) IsTermLevelFunctionNamesContext() {}

func NewTermLevelFunctionNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermLevelFunctionNamesContext {
	var p = new(TermLevelFunctionNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_termLevelFunctionNames

	return p
}

func (s *TermLevelFunctionNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *TermLevelFunctionNamesContext) IN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIN, 0)
}

func (s *TermLevelFunctionNamesContext) OUT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserOUT, 0)
}

func (s *TermLevelFunctionNamesContext) HAS_ALL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_ALL, 0)
}

func (s *TermLevelFunctionNamesContext) HAS_ANY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_ANY, 0)
}

func (s *TermLevelFunctionNamesContext) EXIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXIST, 0)
}

func (s *TermLevelFunctionNamesContext) MISS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISS, 0)
}

func (s *TermLevelFunctionNamesContext) RLIKE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRLIKE, 0)
}

func (s *TermLevelFunctionNamesContext) LIKE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIKE, 0)
}

func (s *TermLevelFunctionNamesContext) NOT_LIKE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNOT_LIKE, 0)
}

func (s *TermLevelFunctionNamesContext) IDS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS, 0)
}

func (s *TermLevelFunctionNamesContext) STARTS_WITH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTARTS_WITH, 0)
}

func (s *TermLevelFunctionNamesContext) LOCAL_FILE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOCAL_FILE, 0)
}

func (s *TermLevelFunctionNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermLevelFunctionNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermLevelFunctionNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterTermLevelFunctionNames(s)
	}
}

func (s *TermLevelFunctionNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitTermLevelFunctionNames(s)
	}
}

func (s *TermLevelFunctionNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitTermLevelFunctionNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) TermLevelFunctionNames() (localctx ITermLevelFunctionNamesContext) {
	localctx = NewTermLevelFunctionNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ElasticSQLParserRULE_termLevelFunctionNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-91)&-(0x1f+1)) == 0 && ((1<<uint((_la-91)))&((1<<(ElasticSQLParserRLIKE-91))|(1<<(ElasticSQLParserLIKE-91))|(1<<(ElasticSQLParserNOT_LIKE-91))|(1<<(ElasticSQLParserSTARTS_WITH-91))|(1<<(ElasticSQLParserIN-91))|(1<<(ElasticSQLParserOUT-91))|(1<<(ElasticSQLParserHAS_ANY-91))|(1<<(ElasticSQLParserHAS_ALL-91))|(1<<(ElasticSQLParserEXIST-91))|(1<<(ElasticSQLParserMISS-91))|(1<<(ElasticSQLParserLOCAL_FILE-91)))) != 0) || _la == ElasticSQLParserIDS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPropContext is an interface to support dynamic dispatch.
type IPropContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k rule contexts.
	GetK() IStrictIdentifierContext

	// GetV returns the v rule contexts.
	GetV() IParamContext

	// SetK sets the k rule contexts.
	SetK(IStrictIdentifierContext)

	// SetV sets the v rule contexts.
	SetV(IParamContext)

	// IsPropContext differentiates from other interfaces.
	IsPropContext()
}

type PropContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      IStrictIdentifierContext
	v      IParamContext
}

func NewEmptyPropContext() *PropContext {
	var p = new(PropContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_prop
	return p
}

func (*PropContext) IsPropContext() {}

func NewPropContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropContext {
	var p = new(PropContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_prop

	return p
}

func (s *PropContext) GetParser() antlr.Parser { return s.parser }

func (s *PropContext) GetK() IStrictIdentifierContext { return s.k }

func (s *PropContext) GetV() IParamContext { return s.v }

func (s *PropContext) SetK(v IStrictIdentifierContext) { s.k = v }

func (s *PropContext) SetV(v IParamContext) { s.v = v }

func (s *PropContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *PropContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *PropContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *PropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterProp(s)
	}
}

func (s *PropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitProp(s)
	}
}

func (s *PropContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitProp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Prop() (localctx IPropContext) {
	localctx = NewPropContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ElasticSQLParserRULE_prop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(633)

		var _x = p.StrictIdentifier()

		localctx.(*PropContext).k = _x
	}
	{
		p.SetState(634)
		p.Match(ElasticSQLParserEQ)
	}
	{
		p.SetState(635)

		var _x = p.Param()

		localctx.(*PropContext).v = _x
	}

	return localctx
}

// IParamContext is an interface to support dynamic dispatch.
type IParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParamContext differentiates from other interfaces.
	IsParamContext()
}

type ParamContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamContext() *ParamContext {
	var p = new(ParamContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_param
	return p
}

func (*ParamContext) IsParamContext() {}

func NewParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamContext {
	var p = new(ParamContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_param

	return p
}

func (s *ParamContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamContext) ArrayValue() IArrayValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayValueContext)
}

func (s *ParamContext) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *ParamContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *ParamContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOUBLE, 0)
}

func (s *ParamContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *ParamContext) MUL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMUL, 0)
}

func (s *ParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterParam(s)
	}
}

func (s *ParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitParam(s)
	}
}

func (s *ParamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitParam(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Param() (localctx IParamContext) {
	localctx = NewParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ElasticSQLParserRULE_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(643)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserARRAY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(637)
			p.ArrayValue()
		}

	case ElasticSQLParserFALSE, ElasticSQLParserTRUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(638)
			p.BooleanValue()
		}

	case ElasticSQLParserLONG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(639)
			p.Match(ElasticSQLParserLONG)
		}

	case ElasticSQLParserDOUBLE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(640)
			p.Match(ElasticSQLParserDOUBLE)
		}

	case ElasticSQLParserQUOTASTR, ElasticSQLParserIDENTIFIER, ElasticSQLParserEXT_IDENTIFIER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(641)
			p.Str()
		}

	case ElasticSQLParserMUL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(642)
			p.Match(ElasticSQLParserMUL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParam2Context is an interface to support dynamic dispatch.
type IParam2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParam2Context differentiates from other interfaces.
	IsParam2Context()
}

type Param2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParam2Context() *Param2Context {
	var p = new(Param2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_param2
	return p
}

func (*Param2Context) IsParam2Context() {}

func NewParam2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param2Context {
	var p = new(Param2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_param2

	return p
}

func (s *Param2Context) GetParser() antlr.Parser { return s.parser }

func (s *Param2Context) ArrayValue() IArrayValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayValueContext)
}

func (s *Param2Context) BooleanValue() IBooleanValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanValueContext)
}

func (s *Param2Context) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *Param2Context) DOUBLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOUBLE, 0)
}

func (s *Param2Context) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *Param2Context) MUL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMUL, 0)
}

func (s *Param2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Param2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterParam2(s)
	}
}

func (s *Param2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitParam2(s)
	}
}

func (s *Param2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitParam2(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Param2() (localctx IParam2Context) {
	localctx = NewParam2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ElasticSQLParserRULE_param2)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(651)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserARRAY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(645)
			p.ArrayValue()
		}

	case ElasticSQLParserFALSE, ElasticSQLParserTRUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(646)
			p.BooleanValue()
		}

	case ElasticSQLParserLONG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(647)
			p.Match(ElasticSQLParserLONG)
		}

	case ElasticSQLParserDOUBLE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(648)
			p.Match(ElasticSQLParserDOUBLE)
		}

	case ElasticSQLParserQUOTASTR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(649)
			p.Match(ElasticSQLParserQUOTASTR)
		}

	case ElasticSQLParserMUL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(650)
			p.Match(ElasticSQLParserMUL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrayValueContext is an interface to support dynamic dispatch.
type IArrayValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayValueContext differentiates from other interfaces.
	IsArrayValueContext()
}

type ArrayValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayValueContext() *ArrayValueContext {
	var p = new(ArrayValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_arrayValue
	return p
}

func (*ArrayValueContext) IsArrayValueContext() {}

func NewArrayValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayValueContext {
	var p = new(ArrayValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_arrayValue

	return p
}

func (s *ArrayValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayValueContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserARRAY, 0)
}

func (s *ArrayValueContext) ParamValues() IParamValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamValuesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamValuesContext)
}

func (s *ArrayValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterArrayValue(s)
	}
}

func (s *ArrayValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitArrayValue(s)
	}
}

func (s *ArrayValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitArrayValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ArrayValue() (localctx IArrayValueContext) {
	localctx = NewArrayValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ElasticSQLParserRULE_arrayValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(653)
		p.Match(ElasticSQLParserARRAY)
	}
	{
		p.SetState(654)
		p.ParamValues()
	}

	return localctx
}

// ISortItemContext is an interface to support dynamic dispatch.
type ISortItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDType returns the dType token.
	GetDType() antlr.Token

	// GetFilter returns the filter token.
	GetFilter() antlr.Token

	// GetOrdering returns the ordering token.
	GetOrdering() antlr.Token

	// GetMd returns the md token.
	GetMd() antlr.Token

	// SetDType sets the dType token.
	SetDType(antlr.Token)

	// SetFilter sets the filter token.
	SetFilter(antlr.Token)

	// SetOrdering sets the ordering token.
	SetOrdering(antlr.Token)

	// SetMd sets the md token.
	SetMd(antlr.Token)

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// IsSortItemContext differentiates from other interfaces.
	IsSortItemContext()
}

type SortItemContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	field    IFieldIdentifierContext
	dType    antlr.Token
	script   IScriptPhraseContext
	filter   antlr.Token
	ordering antlr.Token
	md       antlr.Token
}

func NewEmptySortItemContext() *SortItemContext {
	var p = new(SortItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_sortItem
	return p
}

func (*SortItemContext) IsSortItemContext() {}

func NewSortItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SortItemContext {
	var p = new(SortItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_sortItem

	return p
}

func (s *SortItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SortItemContext) GetDType() antlr.Token { return s.dType }

func (s *SortItemContext) GetFilter() antlr.Token { return s.filter }

func (s *SortItemContext) GetOrdering() antlr.Token { return s.ordering }

func (s *SortItemContext) GetMd() antlr.Token { return s.md }

func (s *SortItemContext) SetDType(v antlr.Token) { s.dType = v }

func (s *SortItemContext) SetFilter(v antlr.Token) { s.filter = v }

func (s *SortItemContext) SetOrdering(v antlr.Token) { s.ordering = v }

func (s *SortItemContext) SetMd(v antlr.Token) { s.md = v }

func (s *SortItemContext) GetField() IFieldIdentifierContext { return s.field }

func (s *SortItemContext) GetScript() IScriptPhraseContext { return s.script }

func (s *SortItemContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *SortItemContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *SortItemContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *SortItemContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *SortItemContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *SortItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserASC, 0)
}

func (s *SortItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDESC, 0)
}

func (s *SortItemContext) SUM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSUM, 0)
}

func (s *SortItemContext) AVG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAVG, 0)
}

func (s *SortItemContext) MAX() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAX, 0)
}

func (s *SortItemContext) MIN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMIN, 0)
}

func (s *SortItemContext) STRING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTRING, 0)
}

func (s *SortItemContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNUMBER, 0)
}

func (s *SortItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SortItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SortItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterSortItem(s)
	}
}

func (s *SortItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitSortItem(s)
	}
}

func (s *SortItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitSortItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) SortItem() (localctx ISortItemContext) {
	localctx = NewSortItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ElasticSQLParserRULE_sortItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(661)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(656)

			var _x = p.FieldIdentifier()

			localctx.(*SortItemContext).field = _x
		}

	case 2:
		p.SetState(658)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(657)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SortItemContext).dType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == ElasticSQLParserNUMBER || _la == ElasticSQLParserSTRING) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SortItemContext).dType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

		{
			p.SetState(660)

			var _x = p.ScriptPhrase()

			localctx.(*SortItemContext).script = _x
		}

	}
	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__4 {
		{
			p.SetState(663)

			var _m = p.Match(ElasticSQLParserT__4)

			localctx.(*SortItemContext).filter = _m
		}
		{
			p.SetState(664)
			p.WhereExpression()
		}
		{
			p.SetState(665)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserASC || _la == ElasticSQLParserDESC {
		{
			p.SetState(669)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).ordering = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ElasticSQLParserASC || _la == ElasticSQLParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).ordering = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(ElasticSQLParserMAX-111))|(1<<(ElasticSQLParserMIN-111))|(1<<(ElasticSQLParserAVG-111))|(1<<(ElasticSQLParserSUM-111)))) != 0 {
		{
			p.SetState(672)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).md = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(ElasticSQLParserMAX-111))|(1<<(ElasticSQLParserMIN-111))|(1<<(ElasticSQLParserAVG-111))|(1<<(ElasticSQLParserSUM-111)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).md = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFileType returns the fileType token.
	GetFileType() antlr.Token

	// GetSep returns the sep token.
	GetSep() antlr.Token

	// SetFileType sets the fileType token.
	SetFileType(antlr.Token)

	// SetSep sets the sep token.
	SetSep(antlr.Token)

	// Get_exportField returns the _exportField rule contexts.
	Get_exportField() IExportFieldContext

	// Get_str returns the _str rule contexts.
	Get_str() IStrContext

	// GetFileName returns the fileName rule contexts.
	GetFileName() IStrContext

	// Set_exportField sets the _exportField rule contexts.
	Set_exportField(IExportFieldContext)

	// Set_str sets the _str rule contexts.
	Set_str(IStrContext)

	// SetFileName sets the fileName rule contexts.
	SetFileName(IStrContext)

	// GetFields returns the fields rule context list.
	GetFields() []IExportFieldContext

	// GetHeads returns the heads rule context list.
	GetHeads() []IStrContext

	// SetFields sets the fields rule context list.
	SetFields([]IExportFieldContext)

	// SetHeads sets the heads rule context list.
	SetHeads([]IStrContext)

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_exportField IExportFieldContext
	fields       []IExportFieldContext
	_str         IStrContext
	heads        []IStrContext
	fileType     antlr.Token
	sep          antlr.Token
	fileName     IStrContext
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) GetFileType() antlr.Token { return s.fileType }

func (s *ExportStatementContext) GetSep() antlr.Token { return s.sep }

func (s *ExportStatementContext) SetFileType(v antlr.Token) { s.fileType = v }

func (s *ExportStatementContext) SetSep(v antlr.Token) { s.sep = v }

func (s *ExportStatementContext) Get_exportField() IExportFieldContext { return s._exportField }

func (s *ExportStatementContext) Get_str() IStrContext { return s._str }

func (s *ExportStatementContext) GetFileName() IStrContext { return s.fileName }

func (s *ExportStatementContext) Set_exportField(v IExportFieldContext) { s._exportField = v }

func (s *ExportStatementContext) Set_str(v IStrContext) { s._str = v }

func (s *ExportStatementContext) SetFileName(v IStrContext) { s.fileName = v }

func (s *ExportStatementContext) GetFields() []IExportFieldContext { return s.fields }

func (s *ExportStatementContext) GetHeads() []IStrContext { return s.heads }

func (s *ExportStatementContext) SetFields(v []IExportFieldContext) { s.fields = v }

func (s *ExportStatementContext) SetHeads(v []IStrContext) { s.heads = v }

func (s *ExportStatementContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXPORT, 0)
}

func (s *ExportStatementContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *ExportStatementContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDISTINCT, 0)
}

func (s *ExportStatementContext) HEADER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHEADER, 0)
}

func (s *ExportStatementContext) AllExportField() []IExportFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExportFieldContext)(nil)).Elem())
	var tst = make([]IExportFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExportFieldContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) ExportField(i int) IExportFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExportFieldContext)
}

func (s *ExportStatementContext) JSON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserJSON, 0)
}

func (s *ExportStatementContext) CSV() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCSV, 0)
}

func (s *ExportStatementContext) EXCEL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXCEL, 0)
}

func (s *ExportStatementContext) SEP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEP, 0)
}

func (s *ExportStatementContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *ExportStatementContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterExportStatement(s)
	}
}

func (s *ExportStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitExportStatement(s)
	}
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ElasticSQLParserRULE_exportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(675)
		p.Match(ElasticSQLParserEXPORT)
	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserDISTINCT {
		{
			p.SetState(676)
			p.Match(ElasticSQLParserDISTINCT)
		}

	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__4 {
		{
			p.SetState(679)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(680)

			var _x = p.ExportField()

			localctx.(*ExportStatementContext)._exportField = _x
		}
		localctx.(*ExportStatementContext).fields = append(localctx.(*ExportStatementContext).fields, localctx.(*ExportStatementContext)._exportField)
		p.SetState(685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(681)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(682)

				var _x = p.ExportField()

				localctx.(*ExportStatementContext)._exportField = _x
			}
			localctx.(*ExportStatementContext).fields = append(localctx.(*ExportStatementContext).fields, localctx.(*ExportStatementContext)._exportField)

			p.SetState(687)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(688)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.SetState(706)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserHEADER {
		{
			p.SetState(692)
			p.Match(ElasticSQLParserHEADER)
		}
		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__4 {
			{
				p.SetState(693)
				p.Match(ElasticSQLParserT__4)
			}
			{
				p.SetState(694)

				var _x = p.Str()

				localctx.(*ExportStatementContext)._str = _x
			}
			localctx.(*ExportStatementContext).heads = append(localctx.(*ExportStatementContext).heads, localctx.(*ExportStatementContext)._str)
			p.SetState(699)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == ElasticSQLParserT__3 {
				{
					p.SetState(695)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(696)

					var _x = p.Str()

					localctx.(*ExportStatementContext)._str = _x
				}
				localctx.(*ExportStatementContext).heads = append(localctx.(*ExportStatementContext).heads, localctx.(*ExportStatementContext)._str)

				p.SetState(701)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(702)
				p.Match(ElasticSQLParserT__5)
			}

		}

	}
	p.SetState(714)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(ElasticSQLParserJSON-74))|(1<<(ElasticSQLParserCSV-74))|(1<<(ElasticSQLParserEXCEL-74)))) != 0 {
		{
			p.SetState(708)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExportStatementContext).fileType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(ElasticSQLParserJSON-74))|(1<<(ElasticSQLParserCSV-74))|(1<<(ElasticSQLParserEXCEL-74)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExportStatementContext).fileType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserSEP {
			{
				p.SetState(709)
				p.Match(ElasticSQLParserSEP)
			}
			{
				p.SetState(710)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(711)

				var _m = p.Match(ElasticSQLParserQUOTASTR)

				localctx.(*ExportStatementContext).sep = _m
			}

		}

	}
	{
		p.SetState(716)

		var _x = p.Str()

		localctx.(*ExportStatementContext).fileName = _x
	}

	return localctx
}

// IExportFieldContext is an interface to support dynamic dispatch.
type IExportFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportFieldContext differentiates from other interfaces.
	IsExportFieldContext()
}

type ExportFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportFieldContext() *ExportFieldContext {
	var p = new(ExportFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_exportField
	return p
}

func (*ExportFieldContext) IsExportFieldContext() {}

func NewExportFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportFieldContext {
	var p = new(ExportFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_exportField

	return p
}

func (s *ExportFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportFieldContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *ExportFieldContext) MetricNames() IMetricNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetricNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetricNamesContext)
}

func (s *ExportFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterExportField(s)
	}
}

func (s *ExportFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitExportField(s)
	}
}

func (s *ExportFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitExportField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ExportField() (localctx IExportFieldContext) {
	localctx = NewExportFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ElasticSQLParserRULE_exportField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(718)
			p.FieldIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(719)
			p.MetricNames()
		}

	}

	return localctx
}

// IAnalysisStatementContext is an interface to support dynamic dispatch.
type IAnalysisStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFront returns the front rule contexts.
	GetFront() IStrictIdentifierContext

	// SetFront sets the front rule contexts.
	SetFront(IStrictIdentifierContext)

	// IsAnalysisStatementContext differentiates from other interfaces.
	IsAnalysisStatementContext()
}

type AnalysisStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	front  IStrictIdentifierContext
}

func NewEmptyAnalysisStatementContext() *AnalysisStatementContext {
	var p = new(AnalysisStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_analysisStatement
	return p
}

func (*AnalysisStatementContext) IsAnalysisStatementContext() {}

func NewAnalysisStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalysisStatementContext {
	var p = new(AnalysisStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_analysisStatement

	return p
}

func (s *AnalysisStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalysisStatementContext) GetFront() IStrictIdentifierContext { return s.front }

func (s *AnalysisStatementContext) SetFront(v IStrictIdentifierContext) { s.front = v }

func (s *AnalysisStatementContext) AllAggStatement() []IAggStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAggStatementContext)(nil)).Elem())
	var tst = make([]IAggStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAggStatementContext)
		}
	}

	return tst
}

func (s *AnalysisStatementContext) AggStatement(i int) IAggStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAggStatementContext)
}

func (s *AnalysisStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSING, 0)
}

func (s *AnalysisStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *AnalysisStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalysisStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalysisStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAnalysisStatement(s)
	}
}

func (s *AnalysisStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAnalysisStatement(s)
	}
}

func (s *AnalysisStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAnalysisStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AnalysisStatement() (localctx IAnalysisStatementContext) {
	localctx = NewAnalysisStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ElasticSQLParserRULE_analysisStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserUSING {
		{
			p.SetState(722)
			p.Match(ElasticSQLParserUSING)
		}
		{
			p.SetState(723)

			var _x = p.StrictIdentifier()

			localctx.(*AnalysisStatementContext).front = _x
		}

	}
	{
		p.SetState(726)
		p.AggStatement()
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__8 {
		{
			p.SetState(727)
			p.Match(ElasticSQLParserT__8)
		}
		{
			p.SetState(728)
			p.AggStatement()
		}

		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAggStatementContext is an interface to support dynamic dispatch.
type IAggStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// GetWhere returns the where rule contexts.
	GetWhere() IWhereExpressionContext

	// Get_metricAgg returns the _metricAgg rule contexts.
	Get_metricAgg() IMetricAggContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// SetWhere sets the where rule contexts.
	SetWhere(IWhereExpressionContext)

	// Set_metricAgg sets the _metricAgg rule contexts.
	Set_metricAgg(IMetricAggContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetMetrics returns the metrics rule context list.
	GetMetrics() []IMetricAggContext

	// SetMetrics sets the metrics rule context list.
	SetMetrics([]IMetricAggContext)

	// IsAggStatementContext differentiates from other interfaces.
	IsAggStatementContext()
}

type AggStatementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	where      IWhereExpressionContext
	_metricAgg IMetricAggContext
	metrics    []IMetricAggContext
	limit      antlr.Token
	statName   IStrictIdentifierContext
}

func NewEmptyAggStatementContext() *AggStatementContext {
	var p = new(AggStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_aggStatement
	return p
}

func (*AggStatementContext) IsAggStatementContext() {}

func NewAggStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggStatementContext {
	var p = new(AggStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_aggStatement

	return p
}

func (s *AggStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AggStatementContext) GetLimit() antlr.Token { return s.limit }

func (s *AggStatementContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *AggStatementContext) GetWhere() IWhereExpressionContext { return s.where }

func (s *AggStatementContext) Get_metricAgg() IMetricAggContext { return s._metricAgg }

func (s *AggStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *AggStatementContext) SetWhere(v IWhereExpressionContext) { s.where = v }

func (s *AggStatementContext) Set_metricAgg(v IMetricAggContext) { s._metricAgg = v }

func (s *AggStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *AggStatementContext) GetMetrics() []IMetricAggContext { return s.metrics }

func (s *AggStatementContext) SetMetrics(v []IMetricAggContext) { s.metrics = v }

func (s *AggStatementContext) AllMetricAgg() []IMetricAggContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMetricAggContext)(nil)).Elem())
	var tst = make([]IMetricAggContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMetricAggContext)
		}
	}

	return tst
}

func (s *AggStatementContext) MetricAgg(i int) IMetricAggContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetricAggContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMetricAggContext)
}

func (s *AggStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHERE, 0)
}

func (s *AggStatementContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGROUP, 0)
}

func (s *AggStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *AggStatementContext) BucketAggList() IBucketAggListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBucketAggListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBucketAggListContext)
}

func (s *AggStatementContext) HavingExpr() IHavingExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingExprContext)
}

func (s *AggStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIMIT, 0)
}

func (s *AggStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *AggStatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *AggStatementContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *AggStatementContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *AggStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *AggStatementContext) COUNT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCOUNT, 0)
}

func (s *AggStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAggStatement(s)
	}
}

func (s *AggStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAggStatement(s)
	}
}

func (s *AggStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAggStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AggStatement() (localctx IAggStatementContext) {
	localctx = NewAggStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ElasticSQLParserRULE_aggStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserWHERE {
		{
			p.SetState(734)
			p.Match(ElasticSQLParserWHERE)
		}
		p.SetState(736)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(735)
				p.Match(ElasticSQLParserCOUNT)
			}

		}
		{
			p.SetState(738)

			var _x = p.WhereExpression()

			localctx.(*AggStatementContext).where = _x
		}

	}
	{
		p.SetState(741)

		var _x = p.MetricAgg()

		localctx.(*AggStatementContext)._metricAgg = _x
	}
	localctx.(*AggStatementContext).metrics = append(localctx.(*AggStatementContext).metrics, localctx.(*AggStatementContext)._metricAgg)
	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(742)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(743)

			var _x = p.MetricAgg()

			localctx.(*AggStatementContext)._metricAgg = _x
		}
		localctx.(*AggStatementContext).metrics = append(localctx.(*AggStatementContext).metrics, localctx.(*AggStatementContext)._metricAgg)

		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserGROUP {
		{
			p.SetState(749)
			p.Match(ElasticSQLParserGROUP)
		}
		{
			p.SetState(750)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(751)
			p.BucketAggList()
		}

	}
	p.SetState(755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserHAVING {
		{
			p.SetState(754)
			p.HavingExpr()
		}

	}
	p.SetState(759)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserLIMIT {
		{
			p.SetState(757)
			p.Match(ElasticSQLParserLIMIT)
		}
		{
			p.SetState(758)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*AggStatementContext).limit = _m
		}

	}
	p.SetState(763)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(761)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(762)

			var _x = p.StrictIdentifier()

			localctx.(*AggStatementContext).statName = _x
		}

	}
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(765)
			p.ExportStatement()
		}

	}

	return localctx
}

// IMetricAggContext is an interface to support dynamic dispatch.
type IMetricAggContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpr returns the expr token.
	GetExpr() antlr.Token

	// SetExpr sets the expr token.
	SetExpr(antlr.Token)

	// GetWith returns the with rule contexts.
	GetWith() IWhereExpressionContext

	// GetMetricName returns the metricName rule contexts.
	GetMetricName() IMetricNamesContext

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetMetircAs returns the metircAs rule contexts.
	GetMetircAs() IExportFieldContext

	// SetWith sets the with rule contexts.
	SetWith(IWhereExpressionContext)

	// SetMetricName sets the metricName rule contexts.
	SetMetricName(IMetricNamesContext)

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetMetircAs sets the metircAs rule contexts.
	SetMetircAs(IExportFieldContext)

	// IsMetricAggContext differentiates from other interfaces.
	IsMetricAggContext()
}

type MetricAggContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	with       IWhereExpressionContext
	metricName IMetricNamesContext
	field      IFieldIdentifierContext
	expr       antlr.Token
	metircAs   IExportFieldContext
}

func NewEmptyMetricAggContext() *MetricAggContext {
	var p = new(MetricAggContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_metricAgg
	return p
}

func (*MetricAggContext) IsMetricAggContext() {}

func NewMetricAggContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetricAggContext {
	var p = new(MetricAggContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_metricAgg

	return p
}

func (s *MetricAggContext) GetParser() antlr.Parser { return s.parser }

func (s *MetricAggContext) GetExpr() antlr.Token { return s.expr }

func (s *MetricAggContext) SetExpr(v antlr.Token) { s.expr = v }

func (s *MetricAggContext) GetWith() IWhereExpressionContext { return s.with }

func (s *MetricAggContext) GetMetricName() IMetricNamesContext { return s.metricName }

func (s *MetricAggContext) GetField() IFieldIdentifierContext { return s.field }

func (s *MetricAggContext) GetMetircAs() IExportFieldContext { return s.metircAs }

func (s *MetricAggContext) SetWith(v IWhereExpressionContext) { s.with = v }

func (s *MetricAggContext) SetMetricName(v IMetricNamesContext) { s.metricName = v }

func (s *MetricAggContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *MetricAggContext) SetMetircAs(v IExportFieldContext) { s.metircAs = v }

func (s *MetricAggContext) MetricParams() IMetricParamsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetricParamsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetricParamsContext)
}

func (s *MetricAggContext) WITH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWITH, 0)
}

func (s *MetricAggContext) MetricNames() IMetricNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetricNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetricNamesContext)
}

func (s *MetricAggContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *MetricAggContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *MetricAggContext) ExportField() IExportFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportFieldContext)
}

func (s *MetricAggContext) AS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, 0)
}

func (s *MetricAggContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetricAggContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetricAggContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMetricAgg(s)
	}
}

func (s *MetricAggContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMetricAgg(s)
	}
}

func (s *MetricAggContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMetricAgg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MetricAgg() (localctx IMetricAggContext) {
	localctx = NewMetricAggContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ElasticSQLParserRULE_metricAgg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserWITH {
		{
			p.SetState(768)
			p.Match(ElasticSQLParserWITH)
		}
		{
			p.SetState(769)

			var _x = p.WhereExpression()

			localctx.(*MetricAggContext).with = _x
		}

	}
	p.SetState(790)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(772)

			var _x = p.MetricNames()

			localctx.(*MetricAggContext).metricName = _x
		}
		{
			p.SetState(773)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(774)
			p.Match(ElasticSQLParserT__5)
		}

	case 2:
		{
			p.SetState(776)

			var _x = p.MetricNames()

			localctx.(*MetricAggContext).metricName = _x
		}
		{
			p.SetState(777)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(778)

			var _x = p.FieldIdentifier()

			localctx.(*MetricAggContext).field = _x
		}
		p.SetState(781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__3 {
			{
				p.SetState(779)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(780)
				p.MetricParams()
			}

		}
		{
			p.SetState(783)
			p.Match(ElasticSQLParserT__5)
		}

	case 3:
		{
			p.SetState(785)

			var _x = p.MetricNames()

			localctx.(*MetricAggContext).metricName = _x
		}
		{
			p.SetState(786)

			var _m = p.Match(ElasticSQLParserT__4)

			localctx.(*MetricAggContext).expr = _m
		}
		{
			p.SetState(787)
			p.MetricParams()
		}
		{
			p.SetState(788)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
		p.SetState(793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserAS {
			{
				p.SetState(792)
				p.Match(ElasticSQLParserAS)
			}

		}
		{
			p.SetState(795)

			var _x = p.ExportField()

			localctx.(*MetricAggContext).metircAs = _x
		}

	}

	return localctx
}

// IMetricNamesContext is an interface to support dynamic dispatch.
type IMetricNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetricNamesContext differentiates from other interfaces.
	IsMetricNamesContext()
}

type MetricNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetricNamesContext() *MetricNamesContext {
	var p = new(MetricNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_metricNames
	return p
}

func (*MetricNamesContext) IsMetricNamesContext() {}

func NewMetricNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetricNamesContext {
	var p = new(MetricNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_metricNames

	return p
}

func (s *MetricNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *MetricNamesContext) SCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCORE, 0)
}

func (s *MetricNamesContext) COUNT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCOUNT, 0)
}

func (s *MetricNamesContext) AVG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAVG, 0)
}

func (s *MetricNamesContext) AVG_DATE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAVG_DATE, 0)
}

func (s *MetricNamesContext) SUM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSUM, 0)
}

func (s *MetricNamesContext) MAX() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAX, 0)
}

func (s *MetricNamesContext) MIN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMIN, 0)
}

func (s *MetricNamesContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDISTINCT, 0)
}

func (s *MetricNamesContext) VALUE_COUNT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserVALUE_COUNT, 0)
}

func (s *MetricNamesContext) PERCENTILES() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENTILES, 0)
}

func (s *MetricNamesContext) PERCENTILE_RANKS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENTILE_RANKS, 0)
}

func (s *MetricNamesContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENT, 0)
}

func (s *MetricNamesContext) DISTINCT_PERCENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDISTINCT_PERCENT, 0)
}

func (s *MetricNamesContext) TOP_HITS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTOP_HITS, 0)
}

func (s *MetricNamesContext) POST_EXPR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPOST_EXPR, 0)
}

func (s *MetricNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetricNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetricNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMetricNames(s)
	}
}

func (s *MetricNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMetricNames(s)
	}
}

func (s *MetricNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMetricNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MetricNames() (localctx IMetricNamesContext) {
	localctx = NewMetricNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ElasticSQLParserRULE_metricNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(798)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserSCORE || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(ElasticSQLParserCOUNT-110))|(1<<(ElasticSQLParserMAX-110))|(1<<(ElasticSQLParserMIN-110))|(1<<(ElasticSQLParserAVG-110))|(1<<(ElasticSQLParserAVG_DATE-110))|(1<<(ElasticSQLParserSUM-110))|(1<<(ElasticSQLParserDISTINCT-110))|(1<<(ElasticSQLParserVALUE_COUNT-110))|(1<<(ElasticSQLParserPERCENTILE_RANKS-110))|(1<<(ElasticSQLParserPERCENTILES-110))|(1<<(ElasticSQLParserPERCENT-110))|(1<<(ElasticSQLParserDISTINCT_PERCENT-110))|(1<<(ElasticSQLParserTOP_HITS-110))|(1<<(ElasticSQLParserPOST_EXPR-110)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMetricParamsContext is an interface to support dynamic dispatch.
type IMetricParamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_mkv returns the _mkv rule contexts.
	Get_mkv() IMkvContext

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// Set_mkv sets the _mkv rule contexts.
	Set_mkv(IMkvContext)

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// GetKvs returns the kvs rule context list.
	GetKvs() []IMkvContext

	// SetKvs sets the kvs rule context list.
	SetKvs([]IMkvContext)

	// IsMetricParamsContext differentiates from other interfaces.
	IsMetricParamsContext()
}

type MetricParamsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_mkv   IMkvContext
	kvs    []IMkvContext
	script IScriptPhraseContext
}

func NewEmptyMetricParamsContext() *MetricParamsContext {
	var p = new(MetricParamsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_metricParams
	return p
}

func (*MetricParamsContext) IsMetricParamsContext() {}

func NewMetricParamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetricParamsContext {
	var p = new(MetricParamsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_metricParams

	return p
}

func (s *MetricParamsContext) GetParser() antlr.Parser { return s.parser }

func (s *MetricParamsContext) Get_mkv() IMkvContext { return s._mkv }

func (s *MetricParamsContext) GetScript() IScriptPhraseContext { return s.script }

func (s *MetricParamsContext) Set_mkv(v IMkvContext) { s._mkv = v }

func (s *MetricParamsContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *MetricParamsContext) GetKvs() []IMkvContext { return s.kvs }

func (s *MetricParamsContext) SetKvs(v []IMkvContext) { s.kvs = v }

func (s *MetricParamsContext) AllMkv() []IMkvContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMkvContext)(nil)).Elem())
	var tst = make([]IMkvContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMkvContext)
		}
	}

	return tst
}

func (s *MetricParamsContext) Mkv(i int) IMkvContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMkvContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMkvContext)
}

func (s *MetricParamsContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *MetricParamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetricParamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetricParamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMetricParams(s)
	}
}

func (s *MetricParamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMetricParams(s)
	}
}

func (s *MetricParamsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMetricParams(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MetricParams() (localctx IMetricParamsContext) {
	localctx = NewMetricParamsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ElasticSQLParserRULE_metricParams)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(800)

			var _x = p.Mkv()

			localctx.(*MetricParamsContext)._mkv = _x
		}
		localctx.(*MetricParamsContext).kvs = append(localctx.(*MetricParamsContext).kvs, localctx.(*MetricParamsContext)._mkv)
		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(801)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(802)

					var _x = p.Mkv()

					localctx.(*MetricParamsContext)._mkv = _x
				}
				localctx.(*MetricParamsContext).kvs = append(localctx.(*MetricParamsContext).kvs, localctx.(*MetricParamsContext)._mkv)

			}
			p.SetState(807)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
		}
		p.SetState(810)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__3 {
			{
				p.SetState(808)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(809)

				var _x = p.ScriptPhrase()

				localctx.(*MetricParamsContext).script = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(812)

			var _x = p.ScriptPhrase()

			localctx.(*MetricParamsContext).script = _x
		}

	}

	return localctx
}

// IMkvContext is an interface to support dynamic dispatch.
type IMkvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k rule contexts.
	GetK() IMetricParamNamesContext

	// GetV returns the v rule contexts.
	GetV() IParamContext

	// SetK sets the k rule contexts.
	SetK(IMetricParamNamesContext)

	// SetV sets the v rule contexts.
	SetV(IParamContext)

	// IsMkvContext differentiates from other interfaces.
	IsMkvContext()
}

type MkvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      IMetricParamNamesContext
	v      IParamContext
}

func NewEmptyMkvContext() *MkvContext {
	var p = new(MkvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_mkv
	return p
}

func (*MkvContext) IsMkvContext() {}

func NewMkvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MkvContext {
	var p = new(MkvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_mkv

	return p
}

func (s *MkvContext) GetParser() antlr.Parser { return s.parser }

func (s *MkvContext) GetK() IMetricParamNamesContext { return s.k }

func (s *MkvContext) GetV() IParamContext { return s.v }

func (s *MkvContext) SetK(v IMetricParamNamesContext) { s.k = v }

func (s *MkvContext) SetV(v IParamContext) { s.v = v }

func (s *MkvContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *MkvContext) MetricParamNames() IMetricParamNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetricParamNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetricParamNamesContext)
}

func (s *MkvContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *MkvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MkvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MkvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMkv(s)
	}
}

func (s *MkvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMkv(s)
	}
}

func (s *MkvContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMkv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Mkv() (localctx IMkvContext) {
	localctx = NewMkvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ElasticSQLParserRULE_mkv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)

		var _x = p.MetricParamNames()

		localctx.(*MkvContext).k = _x
	}
	{
		p.SetState(816)
		p.Match(ElasticSQLParserEQ)
	}
	{
		p.SetState(817)

		var _x = p.Param()

		localctx.(*MkvContext).v = _x
	}

	return localctx
}

// IMetricParamNamesContext is an interface to support dynamic dispatch.
type IMetricParamNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetricParamNamesContext differentiates from other interfaces.
	IsMetricParamNamesContext()
}

type MetricParamNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetricParamNamesContext() *MetricParamNamesContext {
	var p = new(MetricParamNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_metricParamNames
	return p
}

func (*MetricParamNamesContext) IsMetricParamNamesContext() {}

func NewMetricParamNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetricParamNamesContext {
	var p = new(MetricParamNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_metricParamNames

	return p
}

func (s *MetricParamNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *MetricParamNamesContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *MetricParamNamesContext) KEYED() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserKEYED, 0)
}

func (s *MetricParamNamesContext) SIZE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSIZE, 0)
}

func (s *MetricParamNamesContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, 0)
}

func (s *MetricParamNamesContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINCLUDE, 0)
}

func (s *MetricParamNamesContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFORMAT, 0)
}

func (s *MetricParamNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetricParamNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetricParamNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterMetricParamNames(s)
	}
}

func (s *MetricParamNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitMetricParamNames(s)
	}
}

func (s *MetricParamNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitMetricParamNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) MetricParamNames() (localctx IMetricParamNamesContext) {
	localctx = NewMetricParamNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ElasticSQLParserRULE_metricParamNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(819)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserT__9 || _la == ElasticSQLParserT__10 || _la == ElasticSQLParserORDER || _la == ElasticSQLParserINCLUDE || (((_la-130)&-(0x1f+1)) == 0 && ((1<<uint((_la-130)))&((1<<(ElasticSQLParserFORMAT-130))|(1<<(ElasticSQLParserKEYED-130))|(1<<(ElasticSQLParserSIZE-130))|(1<<(ElasticSQLParserMISSING-130)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IScriptPhraseContext is an interface to support dynamic dispatch.
type IScriptPhraseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetScript returns the script token.
	GetScript() antlr.Token

	// SetScript sets the script token.
	SetScript(antlr.Token)

	// GetLang returns the lang rule contexts.
	GetLang() IStrContext

	// Get_prop returns the _prop rule contexts.
	Get_prop() IPropContext

	// GetArithmetic returns the arithmetic rule contexts.
	GetArithmetic() IArithmeticExpressionContext

	// SetLang sets the lang rule contexts.
	SetLang(IStrContext)

	// Set_prop sets the _prop rule contexts.
	Set_prop(IPropContext)

	// SetArithmetic sets the arithmetic rule contexts.
	SetArithmetic(IArithmeticExpressionContext)

	// GetProps returns the props rule context list.
	GetProps() []IPropContext

	// SetProps sets the props rule context list.
	SetProps([]IPropContext)

	// IsScriptPhraseContext differentiates from other interfaces.
	IsScriptPhraseContext()
}

type ScriptPhraseContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	lang       IStrContext
	script     antlr.Token
	_prop      IPropContext
	props      []IPropContext
	arithmetic IArithmeticExpressionContext
}

func NewEmptyScriptPhraseContext() *ScriptPhraseContext {
	var p = new(ScriptPhraseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_scriptPhrase
	return p
}

func (*ScriptPhraseContext) IsScriptPhraseContext() {}

func NewScriptPhraseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptPhraseContext {
	var p = new(ScriptPhraseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_scriptPhrase

	return p
}

func (s *ScriptPhraseContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptPhraseContext) GetScript() antlr.Token { return s.script }

func (s *ScriptPhraseContext) SetScript(v antlr.Token) { s.script = v }

func (s *ScriptPhraseContext) GetLang() IStrContext { return s.lang }

func (s *ScriptPhraseContext) Get_prop() IPropContext { return s._prop }

func (s *ScriptPhraseContext) GetArithmetic() IArithmeticExpressionContext { return s.arithmetic }

func (s *ScriptPhraseContext) SetLang(v IStrContext) { s.lang = v }

func (s *ScriptPhraseContext) Set_prop(v IPropContext) { s._prop = v }

func (s *ScriptPhraseContext) SetArithmetic(v IArithmeticExpressionContext) { s.arithmetic = v }

func (s *ScriptPhraseContext) GetProps() []IPropContext { return s.props }

func (s *ScriptPhraseContext) SetProps(v []IPropContext) { s.props = v }

func (s *ScriptPhraseContext) SCRIPT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCRIPT, 0)
}

func (s *ScriptPhraseContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *ScriptPhraseContext) AllProp() []IPropContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropContext)(nil)).Elem())
	var tst = make([]IPropContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropContext)
		}
	}

	return tst
}

func (s *ScriptPhraseContext) Prop(i int) IPropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropContext)
}

func (s *ScriptPhraseContext) LANG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLANG, 0)
}

func (s *ScriptPhraseContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *ScriptPhraseContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *ScriptPhraseContext) ArithmeticExpression() IArithmeticExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmeticExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArithmeticExpressionContext)
}

func (s *ScriptPhraseContext) MATH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATH, 0)
}

func (s *ScriptPhraseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptPhraseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptPhraseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterScriptPhrase(s)
	}
}

func (s *ScriptPhraseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitScriptPhrase(s)
	}
}

func (s *ScriptPhraseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitScriptPhrase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ScriptPhrase() (localctx IScriptPhraseContext) {
	localctx = NewScriptPhraseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ElasticSQLParserRULE_scriptPhrase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(845)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(821)
			p.Match(ElasticSQLParserSCRIPT)
		}
		p.SetState(829)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__1 {
			{
				p.SetState(822)
				p.Match(ElasticSQLParserT__1)
			}

			{
				p.SetState(823)
				p.Match(ElasticSQLParserLANG)
			}
			{
				p.SetState(824)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(825)

				var _x = p.Str()

				localctx.(*ScriptPhraseContext).lang = _x
			}

			{
				p.SetState(827)
				p.Match(ElasticSQLParserT__2)
			}

		}
		{
			p.SetState(831)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(832)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*ScriptPhraseContext).script = _m
		}
		p.SetState(837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(833)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(834)

				var _x = p.Prop()

				localctx.(*ScriptPhraseContext)._prop = _x
			}
			localctx.(*ScriptPhraseContext).props = append(localctx.(*ScriptPhraseContext).props, localctx.(*ScriptPhraseContext)._prop)

			p.SetState(839)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(840)
			p.Match(ElasticSQLParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(842)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(841)
				p.Match(ElasticSQLParserMATH)
			}

		}
		{
			p.SetState(844)

			var _x = p.ArithmeticExpression()

			localctx.(*ScriptPhraseContext).arithmetic = _x
		}

	}

	return localctx
}

// IBucketAggListContext is an interface to support dynamic dispatch.
type IBucketAggListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_bucketAgg returns the _bucketAgg rule contexts.
	Get_bucketAgg() IBucketAggContext

	// Set_bucketAgg sets the _bucketAgg rule contexts.
	Set_bucketAgg(IBucketAggContext)

	// GetBuckets returns the buckets rule context list.
	GetBuckets() []IBucketAggContext

	// SetBuckets sets the buckets rule context list.
	SetBuckets([]IBucketAggContext)

	// IsBucketAggListContext differentiates from other interfaces.
	IsBucketAggListContext()
}

type BucketAggListContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	_bucketAgg IBucketAggContext
	buckets    []IBucketAggContext
}

func NewEmptyBucketAggListContext() *BucketAggListContext {
	var p = new(BucketAggListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_bucketAggList
	return p
}

func (*BucketAggListContext) IsBucketAggListContext() {}

func NewBucketAggListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BucketAggListContext {
	var p = new(BucketAggListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_bucketAggList

	return p
}

func (s *BucketAggListContext) GetParser() antlr.Parser { return s.parser }

func (s *BucketAggListContext) Get_bucketAgg() IBucketAggContext { return s._bucketAgg }

func (s *BucketAggListContext) Set_bucketAgg(v IBucketAggContext) { s._bucketAgg = v }

func (s *BucketAggListContext) GetBuckets() []IBucketAggContext { return s.buckets }

func (s *BucketAggListContext) SetBuckets(v []IBucketAggContext) { s.buckets = v }

func (s *BucketAggListContext) AllBucketAgg() []IBucketAggContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBucketAggContext)(nil)).Elem())
	var tst = make([]IBucketAggContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBucketAggContext)
		}
	}

	return tst
}

func (s *BucketAggListContext) BucketAgg(i int) IBucketAggContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBucketAggContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBucketAggContext)
}

func (s *BucketAggListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BucketAggListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BucketAggListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBucketAggList(s)
	}
}

func (s *BucketAggListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBucketAggList(s)
	}
}

func (s *BucketAggListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBucketAggList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BucketAggList() (localctx IBucketAggListContext) {
	localctx = NewBucketAggListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ElasticSQLParserRULE_bucketAggList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(859)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(847)

			var _x = p.BucketAgg()

			localctx.(*BucketAggListContext)._bucketAgg = _x
		}
		localctx.(*BucketAggListContext).buckets = append(localctx.(*BucketAggListContext).buckets, localctx.(*BucketAggListContext)._bucketAgg)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(848)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(849)

			var _x = p.BucketAgg()

			localctx.(*BucketAggListContext)._bucketAgg = _x
		}
		localctx.(*BucketAggListContext).buckets = append(localctx.(*BucketAggListContext).buckets, localctx.(*BucketAggListContext)._bucketAgg)
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(850)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(851)

				var _x = p.BucketAgg()

				localctx.(*BucketAggListContext)._bucketAgg = _x
			}
			localctx.(*BucketAggListContext).buckets = append(localctx.(*BucketAggListContext).buckets, localctx.(*BucketAggListContext)._bucketAgg)

			p.SetState(856)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(857)
			p.Match(ElasticSQLParserT__5)
		}

	}

	return localctx
}

// IBucketAggContext is an interface to support dynamic dispatch.
type IBucketAggContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBucket returns the bucket rule contexts.
	GetBucket() IBucketAggChoiceContext

	// GetBucketAs returns the bucketAs rule contexts.
	GetBucketAs() IExportFieldContext

	// SetBucket sets the bucket rule contexts.
	SetBucket(IBucketAggChoiceContext)

	// SetBucketAs sets the bucketAs rule contexts.
	SetBucketAs(IExportFieldContext)

	// IsBucketAggContext differentiates from other interfaces.
	IsBucketAggContext()
}

type BucketAggContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	bucket   IBucketAggChoiceContext
	bucketAs IExportFieldContext
}

func NewEmptyBucketAggContext() *BucketAggContext {
	var p = new(BucketAggContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_bucketAgg
	return p
}

func (*BucketAggContext) IsBucketAggContext() {}

func NewBucketAggContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BucketAggContext {
	var p = new(BucketAggContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_bucketAgg

	return p
}

func (s *BucketAggContext) GetParser() antlr.Parser { return s.parser }

func (s *BucketAggContext) GetBucket() IBucketAggChoiceContext { return s.bucket }

func (s *BucketAggContext) GetBucketAs() IExportFieldContext { return s.bucketAs }

func (s *BucketAggContext) SetBucket(v IBucketAggChoiceContext) { s.bucket = v }

func (s *BucketAggContext) SetBucketAs(v IExportFieldContext) { s.bucketAs = v }

func (s *BucketAggContext) BucketAggChoice() IBucketAggChoiceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBucketAggChoiceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBucketAggChoiceContext)
}

func (s *BucketAggContext) ExportField() IExportFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportFieldContext)
}

func (s *BucketAggContext) AS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, 0)
}

func (s *BucketAggContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BucketAggContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BucketAggContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBucketAgg(s)
	}
}

func (s *BucketAggContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBucketAgg(s)
	}
}

func (s *BucketAggContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBucketAgg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BucketAgg() (localctx IBucketAggContext) {
	localctx = NewBucketAggContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ElasticSQLParserRULE_bucketAgg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(861)

		var _x = p.BucketAggChoice()

		localctx.(*BucketAggContext).bucket = _x
	}
	p.SetState(866)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ElasticSQLParserINNER_HIT)|(1<<ElasticSQLParserRESCORE)|(1<<ElasticSQLParserWINDOWS)|(1<<ElasticSQLParserCOLLAPSE)|(1<<ElasticSQLParserSCORE))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(ElasticSQLParserSQL-33))|(1<<(ElasticSQLParserSTRUCT-33))|(1<<(ElasticSQLParserCK-33))|(1<<(ElasticSQLParserURL-33))|(1<<(ElasticSQLParserPASSWORD-33))|(1<<(ElasticSQLParserUSER-33))|(1<<(ElasticSQLParserNUMBER-33))|(1<<(ElasticSQLParserSTRING-33))|(1<<(ElasticSQLParserAS-33))|(1<<(ElasticSQLParserGROUP-33))|(1<<(ElasticSQLParserTEMPLATE-33))|(1<<(ElasticSQLParserALL-33))|(1<<(ElasticSQLParserNOT-33))|(1<<(ElasticSQLParserINTO-33))|(1<<(ElasticSQLParserTO-33))|(1<<(ElasticSQLParserEXCLUDE-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(ElasticSQLParserINCLUDE-65))|(1<<(ElasticSQLParserID-65))|(1<<(ElasticSQLParserSLICE-65))|(1<<(ElasticSQLParserJSON-65))|(1<<(ElasticSQLParserCSV-65))|(1<<(ElasticSQLParserEXCEL-65))|(1<<(ElasticSQLParserSEP-65))|(1<<(ElasticSQLParserSCRIPT-65))|(1<<(ElasticSQLParserLANG-65))|(1<<(ElasticSQLParserRETURN-65))|(1<<(ElasticSQLParserPK-65))|(1<<(ElasticSQLParserUUID-65))|(1<<(ElasticSQLParserMEM-65))|(1<<(ElasticSQLParserRIGHT-65))|(1<<(ElasticSQLParserLEFT-65))|(1<<(ElasticSQLParserALIAS-65))|(1<<(ElasticSQLParserRLIKE-65))|(1<<(ElasticSQLParserLIKE-65))|(1<<(ElasticSQLParserIN-65))|(1<<(ElasticSQLParserOUT-65)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(ElasticSQLParserEXIST-99))|(1<<(ElasticSQLParserMISS-99))|(1<<(ElasticSQLParserQUERY_STRING-99))|(1<<(ElasticSQLParserMATCH-99))|(1<<(ElasticSQLParserMULTI_MATCH-99))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-99))|(1<<(ElasticSQLParserMATCH_PHRASE-99))|(1<<(ElasticSQLParserKNN-99))|(1<<(ElasticSQLParserHAS_CHILD-99))|(1<<(ElasticSQLParserHAS_PARENT-99))|(1<<(ElasticSQLParserCOUNT-99))|(1<<(ElasticSQLParserMAX-99))|(1<<(ElasticSQLParserMIN-99))|(1<<(ElasticSQLParserAVG-99))|(1<<(ElasticSQLParserAVG_DATE-99))|(1<<(ElasticSQLParserSUM-99))|(1<<(ElasticSQLParserDISTINCT-99))|(1<<(ElasticSQLParserVALUE_COUNT-99))|(1<<(ElasticSQLParserPERCENTILE_RANKS-99))|(1<<(ElasticSQLParserPERCENTILES-99))|(1<<(ElasticSQLParserPERCENT-99))|(1<<(ElasticSQLParserDISTINCT_PERCENT-99))|(1<<(ElasticSQLParserTOP_HITS-99))|(1<<(ElasticSQLParserPOST_EXPR-99))|(1<<(ElasticSQLParserMATH-99))|(1<<(ElasticSQLParserRANGE-99))|(1<<(ElasticSQLParserINTERVAL-99))|(1<<(ElasticSQLParserFORMAT-99)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(ElasticSQLParserKEYED-131))|(1<<(ElasticSQLParserSIZE-131))|(1<<(ElasticSQLParserMISSING-131))|(1<<(ElasticSQLParserNULL-131))|(1<<(ElasticSQLParserEND-131))|(1<<(ElasticSQLParserSAMPLE-131))|(1<<(ElasticSQLParserIDS-131))|(1<<(ElasticSQLParserIDS_FILE-131))|(1<<(ElasticSQLParserPUT-131))|(1<<(ElasticSQLParserADD-131))|(1<<(ElasticSQLParserDATETIME_T-131))|(1<<(ElasticSQLParserTIMESTAMP_T-131))|(1<<(ElasticSQLParserDATE_T-131))|(1<<(ElasticSQLParserTIME_T-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(ElasticSQLParserLOCAL-163))|(1<<(ElasticSQLParserDATA-163))|(1<<(ElasticSQLParserLIST-163))|(1<<(ElasticSQLParserSEPARATED-163))|(1<<(ElasticSQLParserANALYZE-163))|(1<<(ElasticSQLParserNLP-163))|(1<<(ElasticSQLParserENABLE-163))|(1<<(ElasticSQLParserSEGMENT-163))|(1<<(ElasticSQLParserNAME-163))|(1<<(ElasticSQLParserORG-163))|(1<<(ElasticSQLParserLOC-163))|(1<<(ElasticSQLParserTIME-163))|(1<<(ElasticSQLParserMUL-163))|(1<<(ElasticSQLParserIDENTIFIER-163)))) != 0) {
		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserAS {
			{
				p.SetState(862)
				p.Match(ElasticSQLParserAS)
			}

		}
		{
			p.SetState(865)

			var _x = p.ExportField()

			localctx.(*BucketAggContext).bucketAs = _x
		}

	}

	return localctx
}

// IBucketAggChoiceContext is an interface to support dynamic dispatch.
type IBucketAggChoiceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBucketAggChoiceContext differentiates from other interfaces.
	IsBucketAggChoiceContext()
}

type BucketAggChoiceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBucketAggChoiceContext() *BucketAggChoiceContext {
	var p = new(BucketAggChoiceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_bucketAggChoice
	return p
}

func (*BucketAggChoiceContext) IsBucketAggChoiceContext() {}

func NewBucketAggChoiceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BucketAggChoiceContext {
	var p = new(BucketAggChoiceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_bucketAggChoice

	return p
}

func (s *BucketAggChoiceContext) GetParser() antlr.Parser { return s.parser }

func (s *BucketAggChoiceContext) TermsBucket() ITermsBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsBucketContext)
}

func (s *BucketAggChoiceContext) RangeBucket() IRangeBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRangeBucketContext)
}

func (s *BucketAggChoiceContext) DateRangeBucket() IDateRangeBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateRangeBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDateRangeBucketContext)
}

func (s *BucketAggChoiceContext) HistogramBucket() IHistogramBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHistogramBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHistogramBucketContext)
}

func (s *BucketAggChoiceContext) DateHistogramBucket() IDateHistogramBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateHistogramBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDateHistogramBucketContext)
}

func (s *BucketAggChoiceContext) FiltersBucket() IFiltersBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFiltersBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFiltersBucketContext)
}

func (s *BucketAggChoiceContext) SignificantBucket() ISignificantBucketContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignificantBucketContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignificantBucketContext)
}

func (s *BucketAggChoiceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BucketAggChoiceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BucketAggChoiceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBucketAggChoice(s)
	}
}

func (s *BucketAggChoiceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBucketAggChoice(s)
	}
}

func (s *BucketAggChoiceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBucketAggChoice(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BucketAggChoice() (localctx IBucketAggChoiceContext) {
	localctx = NewBucketAggChoiceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ElasticSQLParserRULE_bucketAggChoice)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(875)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(868)
			p.TermsBucket()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(869)
			p.RangeBucket()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(870)
			p.DateRangeBucket()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(871)
			p.HistogramBucket()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(872)
			p.DateHistogramBucket()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(873)
			p.FiltersBucket()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(874)
			p.SignificantBucket()
		}

	}

	return localctx
}

// ITermsBucketContext is an interface to support dynamic dispatch.
type ITermsBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMinDocCount returns the minDocCount token.
	GetMinDocCount() antlr.Token

	// GetTop returns the top token.
	GetTop() antlr.Token

	// GetOrder returns the order token.
	GetOrder() antlr.Token

	// SetMinDocCount sets the minDocCount token.
	SetMinDocCount(antlr.Token)

	// SetTop sets the top token.
	SetTop(antlr.Token)

	// SetOrder sets the order token.
	SetOrder(antlr.Token)

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// Get_param returns the _param rule contexts.
	Get_param() IParamContext

	// GetMissing returns the missing rule contexts.
	GetMissing() IParamContext

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// GetOrderPath returns the orderPath rule contexts.
	GetOrderPath() IPathIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// Set_param sets the _param rule contexts.
	Set_param(IParamContext)

	// SetMissing sets the missing rule contexts.
	SetMissing(IParamContext)

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// SetOrderPath sets the orderPath rule contexts.
	SetOrderPath(IPathIdentifierContext)

	// GetInclude returns the include rule context list.
	GetInclude() []IParamContext

	// GetExclude returns the exclude rule context list.
	GetExclude() []IParamContext

	// SetInclude sets the include rule context list.
	SetInclude([]IParamContext)

	// SetExclude sets the exclude rule context list.
	SetExclude([]IParamContext)

	// IsTermsBucketContext differentiates from other interfaces.
	IsTermsBucketContext()
}

type TermsBucketContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	field       IFieldIdentifierContext
	_param      IParamContext
	include     []IParamContext
	exclude     []IParamContext
	minDocCount antlr.Token
	missing     IParamContext
	script      IScriptPhraseContext
	top         antlr.Token
	orderPath   IPathIdentifierContext
	order       antlr.Token
}

func NewEmptyTermsBucketContext() *TermsBucketContext {
	var p = new(TermsBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_termsBucket
	return p
}

func (*TermsBucketContext) IsTermsBucketContext() {}

func NewTermsBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermsBucketContext {
	var p = new(TermsBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_termsBucket

	return p
}

func (s *TermsBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *TermsBucketContext) GetMinDocCount() antlr.Token { return s.minDocCount }

func (s *TermsBucketContext) GetTop() antlr.Token { return s.top }

func (s *TermsBucketContext) GetOrder() antlr.Token { return s.order }

func (s *TermsBucketContext) SetMinDocCount(v antlr.Token) { s.minDocCount = v }

func (s *TermsBucketContext) SetTop(v antlr.Token) { s.top = v }

func (s *TermsBucketContext) SetOrder(v antlr.Token) { s.order = v }

func (s *TermsBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *TermsBucketContext) Get_param() IParamContext { return s._param }

func (s *TermsBucketContext) GetMissing() IParamContext { return s.missing }

func (s *TermsBucketContext) GetScript() IScriptPhraseContext { return s.script }

func (s *TermsBucketContext) GetOrderPath() IPathIdentifierContext { return s.orderPath }

func (s *TermsBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *TermsBucketContext) Set_param(v IParamContext) { s._param = v }

func (s *TermsBucketContext) SetMissing(v IParamContext) { s.missing = v }

func (s *TermsBucketContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *TermsBucketContext) SetOrderPath(v IPathIdentifierContext) { s.orderPath = v }

func (s *TermsBucketContext) GetInclude() []IParamContext { return s.include }

func (s *TermsBucketContext) GetExclude() []IParamContext { return s.exclude }

func (s *TermsBucketContext) SetInclude(v []IParamContext) { s.include = v }

func (s *TermsBucketContext) SetExclude(v []IParamContext) { s.exclude = v }

func (s *TermsBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *TermsBucketContext) AllINCLUDE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserINCLUDE)
}

func (s *TermsBucketContext) INCLUDE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINCLUDE, i)
}

func (s *TermsBucketContext) AllEXCLUDE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEXCLUDE)
}

func (s *TermsBucketContext) EXCLUDE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXCLUDE, i)
}

func (s *TermsBucketContext) AllDOC_COUNT() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDOC_COUNT)
}

func (s *TermsBucketContext) DOC_COUNT(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOC_COUNT, i)
}

func (s *TermsBucketContext) AllMISSING() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserMISSING)
}

func (s *TermsBucketContext) MISSING(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, i)
}

func (s *TermsBucketContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserAS)
}

func (s *TermsBucketContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, i)
}

func (s *TermsBucketContext) AllTOP() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserTOP)
}

func (s *TermsBucketContext) TOP(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTOP, i)
}

func (s *TermsBucketContext) AllORDER() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserORDER)
}

func (s *TermsBucketContext) ORDER(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, i)
}

func (s *TermsBucketContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserBY)
}

func (s *TermsBucketContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, i)
}

func (s *TermsBucketContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *TermsBucketContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *TermsBucketContext) AllLONG() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserLONG)
}

func (s *TermsBucketContext) LONG(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, i)
}

func (s *TermsBucketContext) AllScriptPhrase() []IScriptPhraseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem())
	var tst = make([]IScriptPhraseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IScriptPhraseContext)
		}
	}

	return tst
}

func (s *TermsBucketContext) ScriptPhrase(i int) IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *TermsBucketContext) AllPathIdentifier() []IPathIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem())
	var tst = make([]IPathIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPathIdentifierContext)
		}
	}

	return tst
}

func (s *TermsBucketContext) PathIdentifier(i int) IPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *TermsBucketContext) AllDESC() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDESC)
}

func (s *TermsBucketContext) DESC(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDESC, i)
}

func (s *TermsBucketContext) AllASC() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserASC)
}

func (s *TermsBucketContext) ASC(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserASC, i)
}

func (s *TermsBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermsBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermsBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterTermsBucket(s)
	}
}

func (s *TermsBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitTermsBucket(s)
	}
}

func (s *TermsBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitTermsBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) TermsBucket() (localctx ITermsBucketContext) {
	localctx = NewTermsBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ElasticSQLParserRULE_termsBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(878)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(877)

			var _x = p.FieldIdentifier()

			localctx.(*TermsBucketContext).field = _x
		}

	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(919)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(880)
					p.Match(ElasticSQLParserINCLUDE)
				}
				{
					p.SetState(881)
					p.Match(ElasticSQLParserT__4)
				}
				{
					p.SetState(882)

					var _x = p.Param()

					localctx.(*TermsBucketContext)._param = _x
				}
				localctx.(*TermsBucketContext).include = append(localctx.(*TermsBucketContext).include, localctx.(*TermsBucketContext)._param)
				p.SetState(887)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == ElasticSQLParserT__3 {
					{
						p.SetState(883)
						p.Match(ElasticSQLParserT__3)
					}
					{
						p.SetState(884)

						var _x = p.Param()

						localctx.(*TermsBucketContext)._param = _x
					}
					localctx.(*TermsBucketContext).include = append(localctx.(*TermsBucketContext).include, localctx.(*TermsBucketContext)._param)

					p.SetState(889)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(890)
					p.Match(ElasticSQLParserT__5)
				}

			case 2:
				{
					p.SetState(892)
					p.Match(ElasticSQLParserEXCLUDE)
				}
				{
					p.SetState(893)
					p.Match(ElasticSQLParserT__4)
				}
				{
					p.SetState(894)

					var _x = p.Param()

					localctx.(*TermsBucketContext)._param = _x
				}
				localctx.(*TermsBucketContext).exclude = append(localctx.(*TermsBucketContext).exclude, localctx.(*TermsBucketContext)._param)
				p.SetState(899)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == ElasticSQLParserT__3 {
					{
						p.SetState(895)
						p.Match(ElasticSQLParserT__3)
					}
					{
						p.SetState(896)

						var _x = p.Param()

						localctx.(*TermsBucketContext)._param = _x
					}
					localctx.(*TermsBucketContext).exclude = append(localctx.(*TermsBucketContext).exclude, localctx.(*TermsBucketContext)._param)

					p.SetState(901)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(902)
					p.Match(ElasticSQLParserT__5)
				}

			case 3:
				{
					p.SetState(904)
					p.Match(ElasticSQLParserDOC_COUNT)
				}
				{
					p.SetState(905)

					var _m = p.Match(ElasticSQLParserLONG)

					localctx.(*TermsBucketContext).minDocCount = _m
				}

			case 4:
				{
					p.SetState(906)
					p.Match(ElasticSQLParserMISSING)
				}
				{
					p.SetState(907)
					p.Match(ElasticSQLParserAS)
				}
				{
					p.SetState(908)

					var _x = p.Param()

					localctx.(*TermsBucketContext).missing = _x
				}

			case 5:
				{
					p.SetState(909)

					var _x = p.ScriptPhrase()

					localctx.(*TermsBucketContext).script = _x
				}

			case 6:
				{
					p.SetState(910)
					p.Match(ElasticSQLParserTOP)
				}
				{
					p.SetState(911)

					var _m = p.Match(ElasticSQLParserLONG)

					localctx.(*TermsBucketContext).top = _m
				}

			case 7:
				{
					p.SetState(912)
					p.Match(ElasticSQLParserORDER)
				}
				{
					p.SetState(913)
					p.Match(ElasticSQLParserBY)
				}
				{
					p.SetState(914)

					var _x = p.PathIdentifier()

					localctx.(*TermsBucketContext).orderPath = _x
				}
				p.SetState(917)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ElasticSQLParserASC:
					{
						p.SetState(915)

						var _m = p.Match(ElasticSQLParserASC)

						localctx.(*TermsBucketContext).order = _m
					}

				case ElasticSQLParserDESC:
					{
						p.SetState(916)
						p.Match(ElasticSQLParserDESC)
					}

				case ElasticSQLParserEOF, ElasticSQLParserT__0, ElasticSQLParserT__3, ElasticSQLParserT__4, ElasticSQLParserT__5, ElasticSQLParserT__8, ElasticSQLParserINNER_HIT, ElasticSQLParserRESCORE, ElasticSQLParserWINDOWS, ElasticSQLParserCOLLAPSE, ElasticSQLParserSCORE, ElasticSQLParserLIMIT, ElasticSQLParserSQL, ElasticSQLParserSTRUCT, ElasticSQLParserCK, ElasticSQLParserURL, ElasticSQLParserPASSWORD, ElasticSQLParserUSER, ElasticSQLParserNUMBER, ElasticSQLParserSTRING, ElasticSQLParserAS, ElasticSQLParserMAP, ElasticSQLParserGROUP, ElasticSQLParserORDER, ElasticSQLParserTEMPLATE, ElasticSQLParserALL, ElasticSQLParserNOT, ElasticSQLParserINTO, ElasticSQLParserTO, ElasticSQLParserHAVING, ElasticSQLParserEXCLUDE, ElasticSQLParserINCLUDE, ElasticSQLParserDOC_COUNT, ElasticSQLParserTOP, ElasticSQLParserID, ElasticSQLParserSLICE, ElasticSQLParserEXPORT, ElasticSQLParserJSON, ElasticSQLParserCSV, ElasticSQLParserEXCEL, ElasticSQLParserSEP, ElasticSQLParserSCRIPT, ElasticSQLParserLANG, ElasticSQLParserRETURN, ElasticSQLParserPK, ElasticSQLParserUUID, ElasticSQLParserMEM, ElasticSQLParserRIGHT, ElasticSQLParserLEFT, ElasticSQLParserALIAS, ElasticSQLParserRLIKE, ElasticSQLParserLIKE, ElasticSQLParserIN, ElasticSQLParserOUT, ElasticSQLParserEXIST, ElasticSQLParserMISS, ElasticSQLParserQUERY_STRING, ElasticSQLParserMATCH, ElasticSQLParserMULTI_MATCH, ElasticSQLParserMATCH_PHRASE_PREFIX, ElasticSQLParserMATCH_PHRASE, ElasticSQLParserKNN, ElasticSQLParserHAS_CHILD, ElasticSQLParserHAS_PARENT, ElasticSQLParserCOUNT, ElasticSQLParserMAX, ElasticSQLParserMIN, ElasticSQLParserAVG, ElasticSQLParserAVG_DATE, ElasticSQLParserSUM, ElasticSQLParserDISTINCT, ElasticSQLParserVALUE_COUNT, ElasticSQLParserPERCENTILE_RANKS, ElasticSQLParserPERCENTILES, ElasticSQLParserPERCENT, ElasticSQLParserDISTINCT_PERCENT, ElasticSQLParserTOP_HITS, ElasticSQLParserPOST_EXPR, ElasticSQLParserMATH, ElasticSQLParserRANGE, ElasticSQLParserINTERVAL, ElasticSQLParserFORMAT, ElasticSQLParserKEYED, ElasticSQLParserSIZE, ElasticSQLParserMISSING, ElasticSQLParserNULL, ElasticSQLParserEND, ElasticSQLParserSAMPLE, ElasticSQLParserIDS, ElasticSQLParserIDS_FILE, ElasticSQLParserPUT, ElasticSQLParserADD, ElasticSQLParserARRAY, ElasticSQLParserFALSE, ElasticSQLParserTRUE, ElasticSQLParserDATETIME_T, ElasticSQLParserTIMESTAMP_T, ElasticSQLParserDATE_T, ElasticSQLParserTIME_T, ElasticSQLParserLOCAL, ElasticSQLParserDATA, ElasticSQLParserLIST, ElasticSQLParserSEPARATED, ElasticSQLParserANALYZE, ElasticSQLParserNLP, ElasticSQLParserENABLE, ElasticSQLParserSEGMENT, ElasticSQLParserNAME, ElasticSQLParserORG, ElasticSQLParserLOC, ElasticSQLParserTIME, ElasticSQLParserMUL, ElasticSQLParserLONG, ElasticSQLParserDOUBLE, ElasticSQLParserQUOTASTR, ElasticSQLParserIDENTIFIER, ElasticSQLParserEXT_IDENTIFIER:

				default:
				}

			}

		}
		p.SetState(923)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())
	}

	return localctx
}

// IHavingExprContext is an interface to support dynamic dispatch.
type IHavingExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBucketPath returns the bucketPath rule contexts.
	GetBucketPath() IPathIdentifierContext

	// GetScript returns the script rule contexts.
	GetScript() IStrContext

	// SetBucketPath sets the bucketPath rule contexts.
	SetBucketPath(IPathIdentifierContext)

	// SetScript sets the script rule contexts.
	SetScript(IStrContext)

	// IsHavingExprContext differentiates from other interfaces.
	IsHavingExprContext()
}

type HavingExprContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	bucketPath IPathIdentifierContext
	script     IStrContext
}

func NewEmptyHavingExprContext() *HavingExprContext {
	var p = new(HavingExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_havingExpr
	return p
}

func (*HavingExprContext) IsHavingExprContext() {}

func NewHavingExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingExprContext {
	var p = new(HavingExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_havingExpr

	return p
}

func (s *HavingExprContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingExprContext) GetBucketPath() IPathIdentifierContext { return s.bucketPath }

func (s *HavingExprContext) GetScript() IStrContext { return s.script }

func (s *HavingExprContext) SetBucketPath(v IPathIdentifierContext) { s.bucketPath = v }

func (s *HavingExprContext) SetScript(v IStrContext) { s.script = v }

func (s *HavingExprContext) HAVING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAVING, 0)
}

func (s *HavingExprContext) PathIdentifier() IPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *HavingExprContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *HavingExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterHavingExpr(s)
	}
}

func (s *HavingExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitHavingExpr(s)
	}
}

func (s *HavingExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitHavingExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) HavingExpr() (localctx IHavingExprContext) {
	localctx = NewHavingExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ElasticSQLParserRULE_havingExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(924)
		p.Match(ElasticSQLParserHAVING)
	}
	{
		p.SetState(925)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(926)

		var _x = p.PathIdentifier()

		localctx.(*HavingExprContext).bucketPath = _x
	}
	{
		p.SetState(927)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(928)

		var _x = p.Str()

		localctx.(*HavingExprContext).script = _x
	}
	{
		p.SetState(929)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IRangeBucketContext is an interface to support dynamic dispatch.
type IRangeBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetMissing returns the missing rule contexts.
	GetMissing() IParamContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetMissing sets the missing rule contexts.
	SetMissing(IParamContext)

	// IsRangeBucketContext differentiates from other interfaces.
	IsRangeBucketContext()
}

type RangeBucketContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	field   IFieldIdentifierContext
	missing IParamContext
}

func NewEmptyRangeBucketContext() *RangeBucketContext {
	var p = new(RangeBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_rangeBucket
	return p
}

func (*RangeBucketContext) IsRangeBucketContext() {}

func NewRangeBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeBucketContext {
	var p = new(RangeBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_rangeBucket

	return p
}

func (s *RangeBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *RangeBucketContext) GetMissing() IParamContext { return s.missing }

func (s *RangeBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *RangeBucketContext) SetMissing(v IParamContext) { s.missing = v }

func (s *RangeBucketContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRANGE, 0)
}

func (s *RangeBucketContext) RangeExpr() IRangeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRangeExprContext)
}

func (s *RangeBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *RangeBucketContext) Param() IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *RangeBucketContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *RangeBucketContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *RangeBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterRangeBucket(s)
	}
}

func (s *RangeBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitRangeBucket(s)
	}
}

func (s *RangeBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitRangeBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) RangeBucket() (localctx IRangeBucketContext) {
	localctx = NewRangeBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ElasticSQLParserRULE_rangeBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(931)
		p.Match(ElasticSQLParserRANGE)
	}
	{
		p.SetState(932)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(933)

		var _x = p.FieldIdentifier()

		localctx.(*RangeBucketContext).field = _x
	}
	p.SetState(940)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(934)
			p.Match(ElasticSQLParserT__3)
		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserMISSING {
			{
				p.SetState(935)
				p.Match(ElasticSQLParserMISSING)
			}
			{
				p.SetState(936)
				p.Match(ElasticSQLParserEQ)
			}

		}
		{
			p.SetState(939)

			var _x = p.Param()

			localctx.(*RangeBucketContext).missing = _x
		}

	}
	{
		p.SetState(942)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(943)
		p.RangeExpr()
	}
	{
		p.SetState(944)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IRangeExprContext is an interface to support dynamic dispatch.
type IRangeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_rangeUnit returns the _rangeUnit rule contexts.
	Get_rangeUnit() IRangeUnitContext

	// Set_rangeUnit sets the _rangeUnit rule contexts.
	Set_rangeUnit(IRangeUnitContext)

	// GetRanges returns the ranges rule context list.
	GetRanges() []IRangeUnitContext

	// SetRanges sets the ranges rule context list.
	SetRanges([]IRangeUnitContext)

	// IsRangeExprContext differentiates from other interfaces.
	IsRangeExprContext()
}

type RangeExprContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	_rangeUnit IRangeUnitContext
	ranges     []IRangeUnitContext
}

func NewEmptyRangeExprContext() *RangeExprContext {
	var p = new(RangeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_rangeExpr
	return p
}

func (*RangeExprContext) IsRangeExprContext() {}

func NewRangeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeExprContext {
	var p = new(RangeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_rangeExpr

	return p
}

func (s *RangeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeExprContext) Get_rangeUnit() IRangeUnitContext { return s._rangeUnit }

func (s *RangeExprContext) Set_rangeUnit(v IRangeUnitContext) { s._rangeUnit = v }

func (s *RangeExprContext) GetRanges() []IRangeUnitContext { return s.ranges }

func (s *RangeExprContext) SetRanges(v []IRangeUnitContext) { s.ranges = v }

func (s *RangeExprContext) AllRangeUnit() []IRangeUnitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRangeUnitContext)(nil)).Elem())
	var tst = make([]IRangeUnitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRangeUnitContext)
		}
	}

	return tst
}

func (s *RangeExprContext) RangeUnit(i int) IRangeUnitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeUnitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRangeUnitContext)
}

func (s *RangeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterRangeExpr(s)
	}
}

func (s *RangeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitRangeExpr(s)
	}
}

func (s *RangeExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitRangeExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) RangeExpr() (localctx IRangeExprContext) {
	localctx = NewRangeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ElasticSQLParserRULE_rangeExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(946)

		var _x = p.RangeUnit()

		localctx.(*RangeExprContext)._rangeUnit = _x
	}
	localctx.(*RangeExprContext).ranges = append(localctx.(*RangeExprContext).ranges, localctx.(*RangeExprContext)._rangeUnit)
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(947)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(948)

			var _x = p.RangeUnit()

			localctx.(*RangeExprContext)._rangeUnit = _x
		}
		localctx.(*RangeExprContext).ranges = append(localctx.(*RangeExprContext).ranges, localctx.(*RangeExprContext)._rangeUnit)

		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRangeUnitContext is an interface to support dynamic dispatch.
type IRangeUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFrom returns the from rule contexts.
	GetFrom() IRangeFromToContext

	// GetTo returns the to rule contexts.
	GetTo() IRangeFromToContext

	// GetKey returns the key rule contexts.
	GetKey() IStrContext

	// SetFrom sets the from rule contexts.
	SetFrom(IRangeFromToContext)

	// SetTo sets the to rule contexts.
	SetTo(IRangeFromToContext)

	// SetKey sets the key rule contexts.
	SetKey(IStrContext)

	// IsRangeUnitContext differentiates from other interfaces.
	IsRangeUnitContext()
}

type RangeUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	from   IRangeFromToContext
	to     IRangeFromToContext
	key    IStrContext
}

func NewEmptyRangeUnitContext() *RangeUnitContext {
	var p = new(RangeUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_rangeUnit
	return p
}

func (*RangeUnitContext) IsRangeUnitContext() {}

func NewRangeUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeUnitContext {
	var p = new(RangeUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_rangeUnit

	return p
}

func (s *RangeUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeUnitContext) GetFrom() IRangeFromToContext { return s.from }

func (s *RangeUnitContext) GetTo() IRangeFromToContext { return s.to }

func (s *RangeUnitContext) GetKey() IStrContext { return s.key }

func (s *RangeUnitContext) SetFrom(v IRangeFromToContext) { s.from = v }

func (s *RangeUnitContext) SetTo(v IRangeFromToContext) { s.to = v }

func (s *RangeUnitContext) SetKey(v IStrContext) { s.key = v }

func (s *RangeUnitContext) AllRangeFromTo() []IRangeFromToContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRangeFromToContext)(nil)).Elem())
	var tst = make([]IRangeFromToContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRangeFromToContext)
		}
	}

	return tst
}

func (s *RangeUnitContext) RangeFromTo(i int) IRangeFromToContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeFromToContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRangeFromToContext)
}

func (s *RangeUnitContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *RangeUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterRangeUnit(s)
	}
}

func (s *RangeUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitRangeUnit(s)
	}
}

func (s *RangeUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitRangeUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) RangeUnit() (localctx IRangeUnitContext) {
	localctx = NewRangeUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ElasticSQLParserRULE_rangeUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(954)
		p.Match(ElasticSQLParserT__6)
	}
	{
		p.SetState(955)

		var _x = p.RangeFromTo()

		localctx.(*RangeUnitContext).from = _x
	}
	{
		p.SetState(956)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(957)

		var _x = p.RangeFromTo()

		localctx.(*RangeUnitContext).to = _x
	}
	p.SetState(960)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(958)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(959)

			var _x = p.Str()

			localctx.(*RangeUnitContext).key = _x
		}

	}
	{
		p.SetState(962)
		p.Match(ElasticSQLParserT__7)
	}

	return localctx
}

// IRangeFromToContext is an interface to support dynamic dispatch.
type IRangeFromToContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeFromToContext differentiates from other interfaces.
	IsRangeFromToContext()
}

type RangeFromToContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeFromToContext() *RangeFromToContext {
	var p = new(RangeFromToContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_rangeFromTo
	return p
}

func (*RangeFromToContext) IsRangeFromToContext() {}

func NewRangeFromToContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeFromToContext {
	var p = new(RangeFromToContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_rangeFromTo

	return p
}

func (s *RangeFromToContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeFromToContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMINUS, 0)
}

func (s *RangeFromToContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *RangeFromToContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeFromToContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeFromToContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterRangeFromTo(s)
	}
}

func (s *RangeFromToContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitRangeFromTo(s)
	}
}

func (s *RangeFromToContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitRangeFromTo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) RangeFromTo() (localctx IRangeFromToContext) {
	localctx = NewRangeFromToContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ElasticSQLParserRULE_rangeFromTo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(966)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(964)
			p.Match(ElasticSQLParserMINUS)
		}

	case ElasticSQLParserLONG, ElasticSQLParserDOUBLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(965)
			p.Number()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDateRangeBucketContext is an interface to support dynamic dispatch.
type IDateRangeBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetFormat returns the format rule contexts.
	GetFormat() IStrContext

	// GetMissing returns the missing rule contexts.
	GetMissing() IStrContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetFormat sets the format rule contexts.
	SetFormat(IStrContext)

	// SetMissing sets the missing rule contexts.
	SetMissing(IStrContext)

	// IsDateRangeBucketContext differentiates from other interfaces.
	IsDateRangeBucketContext()
}

type DateRangeBucketContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	field   IFieldIdentifierContext
	format  IStrContext
	missing IStrContext
}

func NewEmptyDateRangeBucketContext() *DateRangeBucketContext {
	var p = new(DateRangeBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dateRangeBucket
	return p
}

func (*DateRangeBucketContext) IsDateRangeBucketContext() {}

func NewDateRangeBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateRangeBucketContext {
	var p = new(DateRangeBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dateRangeBucket

	return p
}

func (s *DateRangeBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *DateRangeBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *DateRangeBucketContext) GetFormat() IStrContext { return s.format }

func (s *DateRangeBucketContext) GetMissing() IStrContext { return s.missing }

func (s *DateRangeBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *DateRangeBucketContext) SetFormat(v IStrContext) { s.format = v }

func (s *DateRangeBucketContext) SetMissing(v IStrContext) { s.missing = v }

func (s *DateRangeBucketContext) DATE_RANGE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATE_RANGE, 0)
}

func (s *DateRangeBucketContext) DateRangeExpr() IDateRangeExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateRangeExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDateRangeExprContext)
}

func (s *DateRangeBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *DateRangeBucketContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *DateRangeBucketContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *DateRangeBucketContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *DateRangeBucketContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *DateRangeBucketContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *DateRangeBucketContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFORMAT, 0)
}

func (s *DateRangeBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateRangeBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateRangeBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDateRangeBucket(s)
	}
}

func (s *DateRangeBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDateRangeBucket(s)
	}
}

func (s *DateRangeBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDateRangeBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DateRangeBucket() (localctx IDateRangeBucketContext) {
	localctx = NewDateRangeBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ElasticSQLParserRULE_dateRangeBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(968)
		p.Match(ElasticSQLParserDATE_RANGE)
	}
	{
		p.SetState(969)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(970)

		var _x = p.FieldIdentifier()

		localctx.(*DateRangeBucketContext).field = _x
	}
	p.SetState(977)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(971)
			p.Match(ElasticSQLParserT__3)
		}
		p.SetState(974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserFORMAT {
			{
				p.SetState(972)
				p.Match(ElasticSQLParserFORMAT)
			}
			{
				p.SetState(973)
				p.Match(ElasticSQLParserEQ)
			}

		}
		{
			p.SetState(976)

			var _x = p.Str()

			localctx.(*DateRangeBucketContext).format = _x
		}

	}
	p.SetState(983)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(979)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(980)
			p.Match(ElasticSQLParserMISSING)
		}
		{
			p.SetState(981)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(982)

			var _x = p.Str()

			localctx.(*DateRangeBucketContext).missing = _x
		}

	}
	{
		p.SetState(985)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(986)
		p.DateRangeExpr()
	}
	{
		p.SetState(987)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IDateRangeExprContext is an interface to support dynamic dispatch.
type IDateRangeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_dateRange returns the _dateRange rule contexts.
	Get_dateRange() IDateRangeContext

	// Set_dateRange sets the _dateRange rule contexts.
	Set_dateRange(IDateRangeContext)

	// GetRanges returns the ranges rule context list.
	GetRanges() []IDateRangeContext

	// SetRanges sets the ranges rule context list.
	SetRanges([]IDateRangeContext)

	// IsDateRangeExprContext differentiates from other interfaces.
	IsDateRangeExprContext()
}

type DateRangeExprContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	_dateRange IDateRangeContext
	ranges     []IDateRangeContext
}

func NewEmptyDateRangeExprContext() *DateRangeExprContext {
	var p = new(DateRangeExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dateRangeExpr
	return p
}

func (*DateRangeExprContext) IsDateRangeExprContext() {}

func NewDateRangeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateRangeExprContext {
	var p = new(DateRangeExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dateRangeExpr

	return p
}

func (s *DateRangeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *DateRangeExprContext) Get_dateRange() IDateRangeContext { return s._dateRange }

func (s *DateRangeExprContext) Set_dateRange(v IDateRangeContext) { s._dateRange = v }

func (s *DateRangeExprContext) GetRanges() []IDateRangeContext { return s.ranges }

func (s *DateRangeExprContext) SetRanges(v []IDateRangeContext) { s.ranges = v }

func (s *DateRangeExprContext) AllDateRange() []IDateRangeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDateRangeContext)(nil)).Elem())
	var tst = make([]IDateRangeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDateRangeContext)
		}
	}

	return tst
}

func (s *DateRangeExprContext) DateRange(i int) IDateRangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateRangeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDateRangeContext)
}

func (s *DateRangeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateRangeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateRangeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDateRangeExpr(s)
	}
}

func (s *DateRangeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDateRangeExpr(s)
	}
}

func (s *DateRangeExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDateRangeExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DateRangeExpr() (localctx IDateRangeExprContext) {
	localctx = NewDateRangeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ElasticSQLParserRULE_dateRangeExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(989)

		var _x = p.DateRange()

		localctx.(*DateRangeExprContext)._dateRange = _x
	}
	localctx.(*DateRangeExprContext).ranges = append(localctx.(*DateRangeExprContext).ranges, localctx.(*DateRangeExprContext)._dateRange)
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(990)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(991)

			var _x = p.DateRange()

			localctx.(*DateRangeExprContext)._dateRange = _x
		}
		localctx.(*DateRangeExprContext).ranges = append(localctx.(*DateRangeExprContext).ranges, localctx.(*DateRangeExprContext)._dateRange)

		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDateRangeContext is an interface to support dynamic dispatch.
type IDateRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFrom returns the from rule contexts.
	GetFrom() IDateRangeFromToContext

	// GetTo returns the to rule contexts.
	GetTo() IDateRangeFromToContext

	// GetKey returns the key rule contexts.
	GetKey() IStrContext

	// SetFrom sets the from rule contexts.
	SetFrom(IDateRangeFromToContext)

	// SetTo sets the to rule contexts.
	SetTo(IDateRangeFromToContext)

	// SetKey sets the key rule contexts.
	SetKey(IStrContext)

	// IsDateRangeContext differentiates from other interfaces.
	IsDateRangeContext()
}

type DateRangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	from   IDateRangeFromToContext
	to     IDateRangeFromToContext
	key    IStrContext
}

func NewEmptyDateRangeContext() *DateRangeContext {
	var p = new(DateRangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dateRange
	return p
}

func (*DateRangeContext) IsDateRangeContext() {}

func NewDateRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateRangeContext {
	var p = new(DateRangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dateRange

	return p
}

func (s *DateRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *DateRangeContext) GetFrom() IDateRangeFromToContext { return s.from }

func (s *DateRangeContext) GetTo() IDateRangeFromToContext { return s.to }

func (s *DateRangeContext) GetKey() IStrContext { return s.key }

func (s *DateRangeContext) SetFrom(v IDateRangeFromToContext) { s.from = v }

func (s *DateRangeContext) SetTo(v IDateRangeFromToContext) { s.to = v }

func (s *DateRangeContext) SetKey(v IStrContext) { s.key = v }

func (s *DateRangeContext) AllDateRangeFromTo() []IDateRangeFromToContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDateRangeFromToContext)(nil)).Elem())
	var tst = make([]IDateRangeFromToContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDateRangeFromToContext)
		}
	}

	return tst
}

func (s *DateRangeContext) DateRangeFromTo(i int) IDateRangeFromToContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDateRangeFromToContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDateRangeFromToContext)
}

func (s *DateRangeContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *DateRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDateRange(s)
	}
}

func (s *DateRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDateRange(s)
	}
}

func (s *DateRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDateRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DateRange() (localctx IDateRangeContext) {
	localctx = NewDateRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ElasticSQLParserRULE_dateRange)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(997)
		p.Match(ElasticSQLParserT__6)
	}
	{
		p.SetState(998)

		var _x = p.DateRangeFromTo()

		localctx.(*DateRangeContext).from = _x
	}
	{
		p.SetState(999)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(1000)

		var _x = p.DateRangeFromTo()

		localctx.(*DateRangeContext).to = _x
	}
	p.SetState(1003)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(1001)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1002)

			var _x = p.Str()

			localctx.(*DateRangeContext).key = _x
		}

	}
	{
		p.SetState(1005)
		p.Match(ElasticSQLParserT__7)
	}

	return localctx
}

// IDateRangeFromToContext is an interface to support dynamic dispatch.
type IDateRangeFromToContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDateRangeFromToContext differentiates from other interfaces.
	IsDateRangeFromToContext()
}

type DateRangeFromToContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDateRangeFromToContext() *DateRangeFromToContext {
	var p = new(DateRangeFromToContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dateRangeFromTo
	return p
}

func (*DateRangeFromToContext) IsDateRangeFromToContext() {}

func NewDateRangeFromToContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateRangeFromToContext {
	var p = new(DateRangeFromToContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dateRangeFromTo

	return p
}

func (s *DateRangeFromToContext) GetParser() antlr.Parser { return s.parser }

func (s *DateRangeFromToContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMINUS, 0)
}

func (s *DateRangeFromToContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *DateRangeFromToContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *DateRangeFromToContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateRangeFromToContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateRangeFromToContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDateRangeFromTo(s)
	}
}

func (s *DateRangeFromToContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDateRangeFromTo(s)
	}
}

func (s *DateRangeFromToContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDateRangeFromTo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DateRangeFromTo() (localctx IDateRangeFromToContext) {
	localctx = NewDateRangeFromToContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ElasticSQLParserRULE_dateRangeFromTo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1010)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1007)
			p.Match(ElasticSQLParserMINUS)
		}

	case ElasticSQLParserLONG:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1008)
			p.Match(ElasticSQLParserLONG)
		}

	case ElasticSQLParserQUOTASTR, ElasticSQLParserIDENTIFIER, ElasticSQLParserEXT_IDENTIFIER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1009)
			p.Str()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHistogramBucketContext is an interface to support dynamic dispatch.
type IHistogramBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetInterval returns the interval rule contexts.
	GetInterval() IParamContext

	// GetMissing returns the missing rule contexts.
	GetMissing() IParamContext

	// GetOffset returns the offset rule contexts.
	GetOffset() IParamContext

	// GetOrder returns the order rule contexts.
	GetOrder() IPathIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetInterval sets the interval rule contexts.
	SetInterval(IParamContext)

	// SetMissing sets the missing rule contexts.
	SetMissing(IParamContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(IParamContext)

	// SetOrder sets the order rule contexts.
	SetOrder(IPathIdentifierContext)

	// IsHistogramBucketContext differentiates from other interfaces.
	IsHistogramBucketContext()
}

type HistogramBucketContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	field    IFieldIdentifierContext
	interval IParamContext
	missing  IParamContext
	offset   IParamContext
	order    IPathIdentifierContext
}

func NewEmptyHistogramBucketContext() *HistogramBucketContext {
	var p = new(HistogramBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_histogramBucket
	return p
}

func (*HistogramBucketContext) IsHistogramBucketContext() {}

func NewHistogramBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HistogramBucketContext {
	var p = new(HistogramBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_histogramBucket

	return p
}

func (s *HistogramBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *HistogramBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *HistogramBucketContext) GetInterval() IParamContext { return s.interval }

func (s *HistogramBucketContext) GetMissing() IParamContext { return s.missing }

func (s *HistogramBucketContext) GetOffset() IParamContext { return s.offset }

func (s *HistogramBucketContext) GetOrder() IPathIdentifierContext { return s.order }

func (s *HistogramBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *HistogramBucketContext) SetInterval(v IParamContext) { s.interval = v }

func (s *HistogramBucketContext) SetMissing(v IParamContext) { s.missing = v }

func (s *HistogramBucketContext) SetOffset(v IParamContext) { s.offset = v }

func (s *HistogramBucketContext) SetOrder(v IPathIdentifierContext) { s.order = v }

func (s *HistogramBucketContext) HISTOGRAM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHISTOGRAM, 0)
}

func (s *HistogramBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *HistogramBucketContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *HistogramBucketContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *HistogramBucketContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTERVAL, 0)
}

func (s *HistogramBucketContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *HistogramBucketContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *HistogramBucketContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *HistogramBucketContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserOFFSET, 0)
}

func (s *HistogramBucketContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, 0)
}

func (s *HistogramBucketContext) PathIdentifier() IPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *HistogramBucketContext) ASC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserASC, 0)
}

func (s *HistogramBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HistogramBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HistogramBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterHistogramBucket(s)
	}
}

func (s *HistogramBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitHistogramBucket(s)
	}
}

func (s *HistogramBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitHistogramBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) HistogramBucket() (localctx IHistogramBucketContext) {
	localctx = NewHistogramBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ElasticSQLParserRULE_histogramBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1012)
		p.Match(ElasticSQLParserHISTOGRAM)
	}
	{
		p.SetState(1013)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1014)

		var _x = p.FieldIdentifier()

		localctx.(*HistogramBucketContext).field = _x
	}
	{
		p.SetState(1015)
		p.Match(ElasticSQLParserT__3)
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserINTERVAL {
		{
			p.SetState(1016)
			p.Match(ElasticSQLParserINTERVAL)
		}
		{
			p.SetState(1017)
			p.Match(ElasticSQLParserEQ)
		}

	}
	{
		p.SetState(1020)

		var _x = p.Param()

		localctx.(*HistogramBucketContext).interval = _x
	}
	p.SetState(1025)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1021)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1022)
			p.Match(ElasticSQLParserMISSING)
		}
		{
			p.SetState(1023)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1024)

			var _x = p.Param()

			localctx.(*HistogramBucketContext).missing = _x
		}

	}
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1027)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1028)
			p.Match(ElasticSQLParserOFFSET)
		}
		{
			p.SetState(1029)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1030)

			var _x = p.Param()

			localctx.(*HistogramBucketContext).offset = _x
		}

	}
	p.SetState(1040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(1033)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1034)
			p.Match(ElasticSQLParserORDER)
		}
		{
			p.SetState(1035)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1036)

			var _x = p.PathIdentifier()

			localctx.(*HistogramBucketContext).order = _x
		}
		p.SetState(1038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserASC {
			{
				p.SetState(1037)
				p.Match(ElasticSQLParserASC)
			}

		}

	}
	{
		p.SetState(1042)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IDateHistogramBucketContext is an interface to support dynamic dispatch.
type IDateHistogramBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetInterval returns the interval rule contexts.
	GetInterval() IStrContext

	// GetFormat returns the format rule contexts.
	GetFormat() IStrContext

	// GetMissing returns the missing rule contexts.
	GetMissing() IParamContext

	// GetOffset returns the offset rule contexts.
	GetOffset() IParamContext

	// GetOrder returns the order rule contexts.
	GetOrder() IPathIdentifierContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetInterval sets the interval rule contexts.
	SetInterval(IStrContext)

	// SetFormat sets the format rule contexts.
	SetFormat(IStrContext)

	// SetMissing sets the missing rule contexts.
	SetMissing(IParamContext)

	// SetOffset sets the offset rule contexts.
	SetOffset(IParamContext)

	// SetOrder sets the order rule contexts.
	SetOrder(IPathIdentifierContext)

	// IsDateHistogramBucketContext differentiates from other interfaces.
	IsDateHistogramBucketContext()
}

type DateHistogramBucketContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	field    IFieldIdentifierContext
	interval IStrContext
	format   IStrContext
	missing  IParamContext
	offset   IParamContext
	order    IPathIdentifierContext
}

func NewEmptyDateHistogramBucketContext() *DateHistogramBucketContext {
	var p = new(DateHistogramBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dateHistogramBucket
	return p
}

func (*DateHistogramBucketContext) IsDateHistogramBucketContext() {}

func NewDateHistogramBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateHistogramBucketContext {
	var p = new(DateHistogramBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dateHistogramBucket

	return p
}

func (s *DateHistogramBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *DateHistogramBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *DateHistogramBucketContext) GetInterval() IStrContext { return s.interval }

func (s *DateHistogramBucketContext) GetFormat() IStrContext { return s.format }

func (s *DateHistogramBucketContext) GetMissing() IParamContext { return s.missing }

func (s *DateHistogramBucketContext) GetOffset() IParamContext { return s.offset }

func (s *DateHistogramBucketContext) GetOrder() IPathIdentifierContext { return s.order }

func (s *DateHistogramBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *DateHistogramBucketContext) SetInterval(v IStrContext) { s.interval = v }

func (s *DateHistogramBucketContext) SetFormat(v IStrContext) { s.format = v }

func (s *DateHistogramBucketContext) SetMissing(v IParamContext) { s.missing = v }

func (s *DateHistogramBucketContext) SetOffset(v IParamContext) { s.offset = v }

func (s *DateHistogramBucketContext) SetOrder(v IPathIdentifierContext) { s.order = v }

func (s *DateHistogramBucketContext) DATE_HISTOGRAM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATE_HISTOGRAM, 0)
}

func (s *DateHistogramBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *DateHistogramBucketContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *DateHistogramBucketContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *DateHistogramBucketContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTERVAL, 0)
}

func (s *DateHistogramBucketContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *DateHistogramBucketContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *DateHistogramBucketContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFORMAT, 0)
}

func (s *DateHistogramBucketContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *DateHistogramBucketContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserOFFSET, 0)
}

func (s *DateHistogramBucketContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, 0)
}

func (s *DateHistogramBucketContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *DateHistogramBucketContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *DateHistogramBucketContext) PathIdentifier() IPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *DateHistogramBucketContext) ASC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserASC, 0)
}

func (s *DateHistogramBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateHistogramBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateHistogramBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDateHistogramBucket(s)
	}
}

func (s *DateHistogramBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDateHistogramBucket(s)
	}
}

func (s *DateHistogramBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDateHistogramBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DateHistogramBucket() (localctx IDateHistogramBucketContext) {
	localctx = NewDateHistogramBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ElasticSQLParserRULE_dateHistogramBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1044)
		p.Match(ElasticSQLParserDATE_HISTOGRAM)
	}
	{
		p.SetState(1045)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1046)

		var _x = p.FieldIdentifier()

		localctx.(*DateHistogramBucketContext).field = _x
	}
	{
		p.SetState(1047)
		p.Match(ElasticSQLParserT__3)
	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserINTERVAL {
		{
			p.SetState(1048)
			p.Match(ElasticSQLParserINTERVAL)
		}
		{
			p.SetState(1049)
			p.Match(ElasticSQLParserEQ)
		}

	}
	{
		p.SetState(1052)

		var _x = p.Str()

		localctx.(*DateHistogramBucketContext).interval = _x
	}
	p.SetState(1057)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1053)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1054)
			p.Match(ElasticSQLParserFORMAT)
		}
		{
			p.SetState(1055)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1056)

			var _x = p.Str()

			localctx.(*DateHistogramBucketContext).format = _x
		}

	}
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1059)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1060)
			p.Match(ElasticSQLParserMISSING)
		}
		{
			p.SetState(1061)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1062)

			var _x = p.Param()

			localctx.(*DateHistogramBucketContext).missing = _x
		}

	}
	p.SetState(1069)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1065)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1066)
			p.Match(ElasticSQLParserOFFSET)
		}
		{
			p.SetState(1067)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1068)

			var _x = p.Param()

			localctx.(*DateHistogramBucketContext).offset = _x
		}

	}
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(1071)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1072)
			p.Match(ElasticSQLParserORDER)
		}
		{
			p.SetState(1073)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1074)

			var _x = p.PathIdentifier()

			localctx.(*DateHistogramBucketContext).order = _x
		}
		p.SetState(1076)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserASC {
			{
				p.SetState(1075)
				p.Match(ElasticSQLParserASC)
			}

		}

	}
	{
		p.SetState(1080)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// ISignificantBucketContext is an interface to support dynamic dispatch.
type ISignificantBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSmp returns the smp token.
	GetSmp() antlr.Token

	// GetMinDocCount returns the minDocCount token.
	GetMinDocCount() antlr.Token

	// GetTop returns the top token.
	GetTop() antlr.Token

	// SetSmp sets the smp token.
	SetSmp(antlr.Token)

	// SetMinDocCount sets the minDocCount token.
	SetMinDocCount(antlr.Token)

	// SetTop sets the top token.
	SetTop(antlr.Token)

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// GetScoreAlg returns the scoreAlg rule contexts.
	GetScoreAlg() IStrContext

	// Get_param returns the _param rule contexts.
	Get_param() IParamContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// SetScoreAlg sets the scoreAlg rule contexts.
	SetScoreAlg(IStrContext)

	// Set_param sets the _param rule contexts.
	Set_param(IParamContext)

	// GetExclude returns the exclude rule context list.
	GetExclude() []IParamContext

	// GetInclude returns the include rule context list.
	GetInclude() []IParamContext

	// SetExclude sets the exclude rule context list.
	SetExclude([]IParamContext)

	// SetInclude sets the include rule context list.
	SetInclude([]IParamContext)

	// IsSignificantBucketContext differentiates from other interfaces.
	IsSignificantBucketContext()
}

type SignificantBucketContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	field       IFieldIdentifierContext
	smp         antlr.Token
	minDocCount antlr.Token
	scoreAlg    IStrContext
	_param      IParamContext
	exclude     []IParamContext
	include     []IParamContext
	top         antlr.Token
}

func NewEmptySignificantBucketContext() *SignificantBucketContext {
	var p = new(SignificantBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_significantBucket
	return p
}

func (*SignificantBucketContext) IsSignificantBucketContext() {}

func NewSignificantBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignificantBucketContext {
	var p = new(SignificantBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_significantBucket

	return p
}

func (s *SignificantBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *SignificantBucketContext) GetSmp() antlr.Token { return s.smp }

func (s *SignificantBucketContext) GetMinDocCount() antlr.Token { return s.minDocCount }

func (s *SignificantBucketContext) GetTop() antlr.Token { return s.top }

func (s *SignificantBucketContext) SetSmp(v antlr.Token) { s.smp = v }

func (s *SignificantBucketContext) SetMinDocCount(v antlr.Token) { s.minDocCount = v }

func (s *SignificantBucketContext) SetTop(v antlr.Token) { s.top = v }

func (s *SignificantBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *SignificantBucketContext) GetScoreAlg() IStrContext { return s.scoreAlg }

func (s *SignificantBucketContext) Get_param() IParamContext { return s._param }

func (s *SignificantBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *SignificantBucketContext) SetScoreAlg(v IStrContext) { s.scoreAlg = v }

func (s *SignificantBucketContext) Set_param(v IParamContext) { s._param = v }

func (s *SignificantBucketContext) GetExclude() []IParamContext { return s.exclude }

func (s *SignificantBucketContext) GetInclude() []IParamContext { return s.include }

func (s *SignificantBucketContext) SetExclude(v []IParamContext) { s.exclude = v }

func (s *SignificantBucketContext) SetInclude(v []IParamContext) { s.include = v }

func (s *SignificantBucketContext) SIGNIFICANT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSIGNIFICANT, 0)
}

func (s *SignificantBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *SignificantBucketContext) AllSAMPLE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserSAMPLE)
}

func (s *SignificantBucketContext) SAMPLE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSAMPLE, i)
}

func (s *SignificantBucketContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *SignificantBucketContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *SignificantBucketContext) AllDOC_COUNT() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDOC_COUNT)
}

func (s *SignificantBucketContext) DOC_COUNT(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOC_COUNT, i)
}

func (s *SignificantBucketContext) AllSCORE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserSCORE)
}

func (s *SignificantBucketContext) SCORE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCORE, i)
}

func (s *SignificantBucketContext) AllEXCLUDE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEXCLUDE)
}

func (s *SignificantBucketContext) EXCLUDE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXCLUDE, i)
}

func (s *SignificantBucketContext) AllINCLUDE() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserINCLUDE)
}

func (s *SignificantBucketContext) INCLUDE(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINCLUDE, i)
}

func (s *SignificantBucketContext) AllTOP() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserTOP)
}

func (s *SignificantBucketContext) TOP(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTOP, i)
}

func (s *SignificantBucketContext) AllLONG() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserLONG)
}

func (s *SignificantBucketContext) LONG(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, i)
}

func (s *SignificantBucketContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *SignificantBucketContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *SignificantBucketContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *SignificantBucketContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *SignificantBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignificantBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignificantBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterSignificantBucket(s)
	}
}

func (s *SignificantBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitSignificantBucket(s)
	}
}

func (s *SignificantBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitSignificantBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) SignificantBucket() (localctx ISignificantBucketContext) {
	localctx = NewSignificantBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ElasticSQLParserRULE_significantBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1082)
		p.Match(ElasticSQLParserSIGNIFICANT)
	}
	{
		p.SetState(1083)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1084)

		var _x = p.FieldIdentifier()

		localctx.(*SignificantBucketContext).field = _x
	}
	p.SetState(1127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		p.SetState(1125)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1085)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1086)
				p.Match(ElasticSQLParserSAMPLE)
			}
			{
				p.SetState(1087)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1088)

				var _m = p.Match(ElasticSQLParserLONG)

				localctx.(*SignificantBucketContext).smp = _m
			}

		case 2:
			{
				p.SetState(1089)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1090)
				p.Match(ElasticSQLParserDOC_COUNT)
			}
			{
				p.SetState(1091)

				var _m = p.Match(ElasticSQLParserLONG)

				localctx.(*SignificantBucketContext).minDocCount = _m
			}

		case 3:
			{
				p.SetState(1092)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1093)
				p.Match(ElasticSQLParserSCORE)
			}
			{
				p.SetState(1094)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1095)

				var _x = p.Str()

				localctx.(*SignificantBucketContext).scoreAlg = _x
			}

		case 4:
			{
				p.SetState(1096)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1097)
				p.Match(ElasticSQLParserEXCLUDE)
			}
			{
				p.SetState(1098)
				p.Match(ElasticSQLParserT__4)
			}
			{
				p.SetState(1099)

				var _x = p.Param()

				localctx.(*SignificantBucketContext)._param = _x
			}
			localctx.(*SignificantBucketContext).exclude = append(localctx.(*SignificantBucketContext).exclude, localctx.(*SignificantBucketContext)._param)
			p.SetState(1104)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == ElasticSQLParserT__3 {
				{
					p.SetState(1100)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(1101)

					var _x = p.Param()

					localctx.(*SignificantBucketContext)._param = _x
				}
				localctx.(*SignificantBucketContext).exclude = append(localctx.(*SignificantBucketContext).exclude, localctx.(*SignificantBucketContext)._param)

				p.SetState(1106)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1107)
				p.Match(ElasticSQLParserT__5)
			}

		case 5:
			{
				p.SetState(1109)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1110)
				p.Match(ElasticSQLParserINCLUDE)
			}
			{
				p.SetState(1111)
				p.Match(ElasticSQLParserT__4)
			}
			{
				p.SetState(1112)

				var _x = p.Param()

				localctx.(*SignificantBucketContext)._param = _x
			}
			localctx.(*SignificantBucketContext).include = append(localctx.(*SignificantBucketContext).include, localctx.(*SignificantBucketContext)._param)
			p.SetState(1117)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == ElasticSQLParserT__3 {
				{
					p.SetState(1113)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(1114)

					var _x = p.Param()

					localctx.(*SignificantBucketContext)._param = _x
				}
				localctx.(*SignificantBucketContext).include = append(localctx.(*SignificantBucketContext).include, localctx.(*SignificantBucketContext)._param)

				p.SetState(1119)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1120)
				p.Match(ElasticSQLParserT__5)
			}

		case 6:
			{
				p.SetState(1122)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1123)
				p.Match(ElasticSQLParserTOP)
			}
			{
				p.SetState(1124)

				var _m = p.Match(ElasticSQLParserLONG)

				localctx.(*SignificantBucketContext).top = _m
			}

		}

		p.SetState(1129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1130)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IFiltersBucketContext is an interface to support dynamic dispatch.
type IFiltersBucketContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetField returns the field rule contexts.
	GetField() IFieldIdentifierContext

	// Get_whereExpression returns the _whereExpression rule contexts.
	Get_whereExpression() IWhereExpressionContext

	// Get_str returns the _str rule contexts.
	Get_str() IStrContext

	// SetField sets the field rule contexts.
	SetField(IFieldIdentifierContext)

	// Set_whereExpression sets the _whereExpression rule contexts.
	Set_whereExpression(IWhereExpressionContext)

	// Set_str sets the _str rule contexts.
	Set_str(IStrContext)

	// GetWhere returns the where rule context list.
	GetWhere() []IWhereExpressionContext

	// GetKey returns the key rule context list.
	GetKey() []IStrContext

	// SetWhere sets the where rule context list.
	SetWhere([]IWhereExpressionContext)

	// SetKey sets the key rule context list.
	SetKey([]IStrContext)

	// IsFiltersBucketContext differentiates from other interfaces.
	IsFiltersBucketContext()
}

type FiltersBucketContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	field            IFieldIdentifierContext
	_whereExpression IWhereExpressionContext
	where            []IWhereExpressionContext
	_str             IStrContext
	key              []IStrContext
}

func NewEmptyFiltersBucketContext() *FiltersBucketContext {
	var p = new(FiltersBucketContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_filtersBucket
	return p
}

func (*FiltersBucketContext) IsFiltersBucketContext() {}

func NewFiltersBucketContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FiltersBucketContext {
	var p = new(FiltersBucketContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_filtersBucket

	return p
}

func (s *FiltersBucketContext) GetParser() antlr.Parser { return s.parser }

func (s *FiltersBucketContext) GetField() IFieldIdentifierContext { return s.field }

func (s *FiltersBucketContext) Get_whereExpression() IWhereExpressionContext {
	return s._whereExpression
}

func (s *FiltersBucketContext) Get_str() IStrContext { return s._str }

func (s *FiltersBucketContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *FiltersBucketContext) Set_whereExpression(v IWhereExpressionContext) { s._whereExpression = v }

func (s *FiltersBucketContext) Set_str(v IStrContext) { s._str = v }

func (s *FiltersBucketContext) GetWhere() []IWhereExpressionContext { return s.where }

func (s *FiltersBucketContext) GetKey() []IStrContext { return s.key }

func (s *FiltersBucketContext) SetWhere(v []IWhereExpressionContext) { s.where = v }

func (s *FiltersBucketContext) SetKey(v []IStrContext) { s.key = v }

func (s *FiltersBucketContext) END() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEND, 0)
}

func (s *FiltersBucketContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *FiltersBucketContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserWHEN)
}

func (s *FiltersBucketContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHEN, i)
}

func (s *FiltersBucketContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserTHEN)
}

func (s *FiltersBucketContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTHEN, i)
}

func (s *FiltersBucketContext) AllWhereExpression() []IWhereExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem())
	var tst = make([]IWhereExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhereExpressionContext)
		}
	}

	return tst
}

func (s *FiltersBucketContext) WhereExpression(i int) IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *FiltersBucketContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *FiltersBucketContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *FiltersBucketContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FiltersBucketContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FiltersBucketContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFiltersBucket(s)
	}
}

func (s *FiltersBucketContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFiltersBucket(s)
	}
}

func (s *FiltersBucketContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFiltersBucket(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FiltersBucket() (localctx IFiltersBucketContext) {
	localctx = NewFiltersBucketContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ElasticSQLParserRULE_filtersBucket)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1132)

		var _x = p.FieldIdentifier()

		localctx.(*FiltersBucketContext).field = _x
	}
	p.SetState(1138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ElasticSQLParserWHEN {
		{
			p.SetState(1133)
			p.Match(ElasticSQLParserWHEN)
		}
		{
			p.SetState(1134)

			var _x = p.WhereExpression()

			localctx.(*FiltersBucketContext)._whereExpression = _x
		}
		localctx.(*FiltersBucketContext).where = append(localctx.(*FiltersBucketContext).where, localctx.(*FiltersBucketContext)._whereExpression)
		{
			p.SetState(1135)
			p.Match(ElasticSQLParserTHEN)
		}
		{
			p.SetState(1136)

			var _x = p.Str()

			localctx.(*FiltersBucketContext)._str = _x
		}
		localctx.(*FiltersBucketContext).key = append(localctx.(*FiltersBucketContext).key, localctx.(*FiltersBucketContext)._str)

		p.SetState(1140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1142)
		p.Match(ElasticSQLParserEND)
	}

	return localctx
}

// ISparkStatementContext is an interface to support dynamic dispatch.
type ISparkStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSql returns the sql token.
	GetSql() antlr.Token

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// SetSql sets the sql token.
	SetSql(antlr.Token)

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// Get_dataStruct returns the _dataStruct rule contexts.
	Get_dataStruct() IDataStructContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_dataStruct sets the _dataStruct rule contexts.
	Set_dataStruct(IDataStructContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetFiles returns the files rule context list.
	GetFiles() []IDataStructContext

	// SetFiles sets the files rule context list.
	SetFiles([]IDataStructContext)

	// IsSparkStatementContext differentiates from other interfaces.
	IsSparkStatementContext()
}

type SparkStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	_dataStruct IDataStructContext
	files       []IDataStructContext
	sql         antlr.Token
	limit       antlr.Token
	statName    IStrictIdentifierContext
}

func NewEmptySparkStatementContext() *SparkStatementContext {
	var p = new(SparkStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_sparkStatement
	return p
}

func (*SparkStatementContext) IsSparkStatementContext() {}

func NewSparkStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SparkStatementContext {
	var p = new(SparkStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_sparkStatement

	return p
}

func (s *SparkStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SparkStatementContext) GetSql() antlr.Token { return s.sql }

func (s *SparkStatementContext) GetLimit() antlr.Token { return s.limit }

func (s *SparkStatementContext) SetSql(v antlr.Token) { s.sql = v }

func (s *SparkStatementContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *SparkStatementContext) Get_dataStruct() IDataStructContext { return s._dataStruct }

func (s *SparkStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *SparkStatementContext) Set_dataStruct(v IDataStructContext) { s._dataStruct = v }

func (s *SparkStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *SparkStatementContext) GetFiles() []IDataStructContext { return s.files }

func (s *SparkStatementContext) SetFiles(v []IDataStructContext) { s.files = v }

func (s *SparkStatementContext) SQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSQL, 0)
}

func (s *SparkStatementContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *SparkStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIMIT, 0)
}

func (s *SparkStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *SparkStatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *SparkStatementContext) AllDataStruct() []IDataStructContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDataStructContext)(nil)).Elem())
	var tst = make([]IDataStructContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDataStructContext)
		}
	}

	return tst
}

func (s *SparkStatementContext) DataStruct(i int) IDataStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataStructContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDataStructContext)
}

func (s *SparkStatementContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *SparkStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *SparkStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SparkStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SparkStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterSparkStatement(s)
	}
}

func (s *SparkStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitSparkStatement(s)
	}
}

func (s *SparkStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitSparkStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) SparkStatement() (localctx ISparkStatementContext) {
	localctx = NewSparkStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ElasticSQLParserRULE_sparkStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1144)
		p.Match(ElasticSQLParserSQL)
	}
	p.SetState(1156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__1 {
		{
			p.SetState(1145)
			p.Match(ElasticSQLParserT__1)
		}
		{
			p.SetState(1146)

			var _x = p.DataStruct()

			localctx.(*SparkStatementContext)._dataStruct = _x
		}
		localctx.(*SparkStatementContext).files = append(localctx.(*SparkStatementContext).files, localctx.(*SparkStatementContext)._dataStruct)
		p.SetState(1151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1147)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1148)

				var _x = p.DataStruct()

				localctx.(*SparkStatementContext)._dataStruct = _x
			}
			localctx.(*SparkStatementContext).files = append(localctx.(*SparkStatementContext).files, localctx.(*SparkStatementContext)._dataStruct)

			p.SetState(1153)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1154)
			p.Match(ElasticSQLParserT__2)
		}

	}
	{
		p.SetState(1158)

		var _m = p.Match(ElasticSQLParserQUOTASTR)

		localctx.(*SparkStatementContext).sql = _m
	}
	p.SetState(1161)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserLIMIT {
		{
			p.SetState(1159)
			p.Match(ElasticSQLParserLIMIT)
		}
		{
			p.SetState(1160)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*SparkStatementContext).limit = _m
		}

	}
	p.SetState(1165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1163)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1164)

			var _x = p.StrictIdentifier()

			localctx.(*SparkStatementContext).statName = _x
		}

	}
	p.SetState(1168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(1167)
			p.ExportStatement()
		}

	}

	return localctx
}

// IDataStructContext is an interface to support dynamic dispatch.
type IDataStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTableName returns the tableName rule contexts.
	GetTableName() IStrictIdentifierContext

	// Get_exportField returns the _exportField rule contexts.
	Get_exportField() IExportFieldContext

	// SetTableName sets the tableName rule contexts.
	SetTableName(IStrictIdentifierContext)

	// Set_exportField sets the _exportField rule contexts.
	Set_exportField(IExportFieldContext)

	// GetFields returns the fields rule context list.
	GetFields() []IExportFieldContext

	// SetFields sets the fields rule context list.
	SetFields([]IExportFieldContext)

	// IsDataStructContext differentiates from other interfaces.
	IsDataStructContext()
}

type DataStructContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	tableName    IStrictIdentifierContext
	_exportField IExportFieldContext
	fields       []IExportFieldContext
}

func NewEmptyDataStructContext() *DataStructContext {
	var p = new(DataStructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dataStruct
	return p
}

func (*DataStructContext) IsDataStructContext() {}

func NewDataStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataStructContext {
	var p = new(DataStructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dataStruct

	return p
}

func (s *DataStructContext) GetParser() antlr.Parser { return s.parser }

func (s *DataStructContext) GetTableName() IStrictIdentifierContext { return s.tableName }

func (s *DataStructContext) Get_exportField() IExportFieldContext { return s._exportField }

func (s *DataStructContext) SetTableName(v IStrictIdentifierContext) { s.tableName = v }

func (s *DataStructContext) Set_exportField(v IExportFieldContext) { s._exportField = v }

func (s *DataStructContext) GetFields() []IExportFieldContext { return s.fields }

func (s *DataStructContext) SetFields(v []IExportFieldContext) { s.fields = v }

func (s *DataStructContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTRUCT, 0)
}

func (s *DataStructContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *DataStructContext) AllExportField() []IExportFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExportFieldContext)(nil)).Elem())
	var tst = make([]IExportFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExportFieldContext)
		}
	}

	return tst
}

func (s *DataStructContext) ExportField(i int) IExportFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExportFieldContext)
}

func (s *DataStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDataStruct(s)
	}
}

func (s *DataStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDataStruct(s)
	}
}

func (s *DataStructContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDataStruct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DataStruct() (localctx IDataStructContext) {
	localctx = NewDataStructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ElasticSQLParserRULE_dataStruct)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1170)
		p.Match(ElasticSQLParserSTRUCT)
	}
	{
		p.SetState(1171)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1172)

		var _x = p.StrictIdentifier()

		localctx.(*DataStructContext).tableName = _x
	}
	{
		p.SetState(1173)
		p.Match(ElasticSQLParserT__3)
	}
	{
		p.SetState(1174)

		var _x = p.ExportField()

		localctx.(*DataStructContext)._exportField = _x
	}
	localctx.(*DataStructContext).fields = append(localctx.(*DataStructContext).fields, localctx.(*DataStructContext)._exportField)
	p.SetState(1179)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1175)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1176)

			var _x = p.ExportField()

			localctx.(*DataStructContext)._exportField = _x
		}
		localctx.(*DataStructContext).fields = append(localctx.(*DataStructContext).fields, localctx.(*DataStructContext)._exportField)

		p.SetState(1181)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1182)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IJoinQueryAnalysisStatementContext is an interface to support dynamic dispatch.
type IJoinQueryAnalysisStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKind returns the kind token.
	GetKind() antlr.Token

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// GetSliceMax returns the sliceMax token.
	GetSliceMax() antlr.Token

	// SetKind sets the kind token.
	SetKind(antlr.Token)

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// SetSliceMax sets the sliceMax token.
	SetSliceMax(antlr.Token)

	// Get_fieldIdentifier returns the _fieldIdentifier rule contexts.
	Get_fieldIdentifier() IFieldIdentifierContext

	// GetArithmetic returns the arithmetic rule contexts.
	GetArithmetic() IArithmeticExpressionContext

	// GetPostAs returns the postAs rule contexts.
	GetPostAs() IStrictIdentifierContext

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// GetAAs returns the aAs rule contexts.
	GetAAs() IStrictIdentifierContext

	// GetTableB returns the tableB rule contexts.
	GetTableB() IStrictIdentifierContext

	// GetBAs returns the bAs rule contexts.
	GetBAs() IStrictIdentifierContext

	// GetFirst returns the first rule contexts.
	GetFirst() IFieldIdentifierContext

	// GetSecond returns the second rule contexts.
	GetSecond() IFieldIdentifierContext

	// Get_sortItem returns the _sortItem rule contexts.
	Get_sortItem() ISortItemContext

	// GetSliceField returns the sliceField rule contexts.
	GetSliceField() IFieldIdentifierContext

	// Get_aggStatement returns the _aggStatement rule contexts.
	Get_aggStatement() IAggStatementContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_fieldIdentifier sets the _fieldIdentifier rule contexts.
	Set_fieldIdentifier(IFieldIdentifierContext)

	// SetArithmetic sets the arithmetic rule contexts.
	SetArithmetic(IArithmeticExpressionContext)

	// SetPostAs sets the postAs rule contexts.
	SetPostAs(IStrictIdentifierContext)

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// SetAAs sets the aAs rule contexts.
	SetAAs(IStrictIdentifierContext)

	// SetTableB sets the tableB rule contexts.
	SetTableB(IStrictIdentifierContext)

	// SetBAs sets the bAs rule contexts.
	SetBAs(IStrictIdentifierContext)

	// SetFirst sets the first rule contexts.
	SetFirst(IFieldIdentifierContext)

	// SetSecond sets the second rule contexts.
	SetSecond(IFieldIdentifierContext)

	// Set_sortItem sets the _sortItem rule contexts.
	Set_sortItem(ISortItemContext)

	// SetSliceField sets the sliceField rule contexts.
	SetSliceField(IFieldIdentifierContext)

	// Set_aggStatement sets the _aggStatement rule contexts.
	Set_aggStatement(IAggStatementContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetFields returns the fields rule context list.
	GetFields() []IFieldIdentifierContext

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// GetSorts returns the sorts rule context list.
	GetSorts() []ISortItemContext

	// GetAggs returns the aggs rule context list.
	GetAggs() []IAggStatementContext

	// SetFields sets the fields rule context list.
	SetFields([]IFieldIdentifierContext)

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// SetSorts sets the sorts rule context list.
	SetSorts([]ISortItemContext)

	// SetAggs sets the aggs rule context list.
	SetAggs([]IAggStatementContext)

	// IsJoinQueryAnalysisStatementContext differentiates from other interfaces.
	IsJoinQueryAnalysisStatementContext()
}

type JoinQueryAnalysisStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_fieldIdentifier IFieldIdentifierContext
	fields           []IFieldIdentifierContext
	arithmetic       IArithmeticExpressionContext
	postAs           IStrictIdentifierContext
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
	aAs              IStrictIdentifierContext
	kind             antlr.Token
	tableB           IStrictIdentifierContext
	bAs              IStrictIdentifierContext
	first            IFieldIdentifierContext
	second           IFieldIdentifierContext
	_sortItem        ISortItemContext
	sorts            []ISortItemContext
	limit            antlr.Token
	sliceMax         antlr.Token
	sliceField       IFieldIdentifierContext
	_aggStatement    IAggStatementContext
	aggs             []IAggStatementContext
	statName         IStrictIdentifierContext
}

func NewEmptyJoinQueryAnalysisStatementContext() *JoinQueryAnalysisStatementContext {
	var p = new(JoinQueryAnalysisStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_joinQueryAnalysisStatement
	return p
}

func (*JoinQueryAnalysisStatementContext) IsJoinQueryAnalysisStatementContext() {}

func NewJoinQueryAnalysisStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinQueryAnalysisStatementContext {
	var p = new(JoinQueryAnalysisStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_joinQueryAnalysisStatement

	return p
}

func (s *JoinQueryAnalysisStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinQueryAnalysisStatementContext) GetKind() antlr.Token { return s.kind }

func (s *JoinQueryAnalysisStatementContext) GetLimit() antlr.Token { return s.limit }

func (s *JoinQueryAnalysisStatementContext) GetSliceMax() antlr.Token { return s.sliceMax }

func (s *JoinQueryAnalysisStatementContext) SetKind(v antlr.Token) { s.kind = v }

func (s *JoinQueryAnalysisStatementContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *JoinQueryAnalysisStatementContext) SetSliceMax(v antlr.Token) { s.sliceMax = v }

func (s *JoinQueryAnalysisStatementContext) Get_fieldIdentifier() IFieldIdentifierContext {
	return s._fieldIdentifier
}

func (s *JoinQueryAnalysisStatementContext) GetArithmetic() IArithmeticExpressionContext {
	return s.arithmetic
}

func (s *JoinQueryAnalysisStatementContext) GetPostAs() IStrictIdentifierContext { return s.postAs }

func (s *JoinQueryAnalysisStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *JoinQueryAnalysisStatementContext) GetAAs() IStrictIdentifierContext { return s.aAs }

func (s *JoinQueryAnalysisStatementContext) GetTableB() IStrictIdentifierContext { return s.tableB }

func (s *JoinQueryAnalysisStatementContext) GetBAs() IStrictIdentifierContext { return s.bAs }

func (s *JoinQueryAnalysisStatementContext) GetFirst() IFieldIdentifierContext { return s.first }

func (s *JoinQueryAnalysisStatementContext) GetSecond() IFieldIdentifierContext { return s.second }

func (s *JoinQueryAnalysisStatementContext) Get_sortItem() ISortItemContext { return s._sortItem }

func (s *JoinQueryAnalysisStatementContext) GetSliceField() IFieldIdentifierContext {
	return s.sliceField
}

func (s *JoinQueryAnalysisStatementContext) Get_aggStatement() IAggStatementContext {
	return s._aggStatement
}

func (s *JoinQueryAnalysisStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *JoinQueryAnalysisStatementContext) Set_fieldIdentifier(v IFieldIdentifierContext) {
	s._fieldIdentifier = v
}

func (s *JoinQueryAnalysisStatementContext) SetArithmetic(v IArithmeticExpressionContext) {
	s.arithmetic = v
}

func (s *JoinQueryAnalysisStatementContext) SetPostAs(v IStrictIdentifierContext) { s.postAs = v }

func (s *JoinQueryAnalysisStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) {
	s._indexIdentifier = v
}

func (s *JoinQueryAnalysisStatementContext) SetAAs(v IStrictIdentifierContext) { s.aAs = v }

func (s *JoinQueryAnalysisStatementContext) SetTableB(v IStrictIdentifierContext) { s.tableB = v }

func (s *JoinQueryAnalysisStatementContext) SetBAs(v IStrictIdentifierContext) { s.bAs = v }

func (s *JoinQueryAnalysisStatementContext) SetFirst(v IFieldIdentifierContext) { s.first = v }

func (s *JoinQueryAnalysisStatementContext) SetSecond(v IFieldIdentifierContext) { s.second = v }

func (s *JoinQueryAnalysisStatementContext) Set_sortItem(v ISortItemContext) { s._sortItem = v }

func (s *JoinQueryAnalysisStatementContext) SetSliceField(v IFieldIdentifierContext) {
	s.sliceField = v
}

func (s *JoinQueryAnalysisStatementContext) Set_aggStatement(v IAggStatementContext) {
	s._aggStatement = v
}

func (s *JoinQueryAnalysisStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *JoinQueryAnalysisStatementContext) GetFields() []IFieldIdentifierContext { return s.fields }

func (s *JoinQueryAnalysisStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *JoinQueryAnalysisStatementContext) GetSorts() []ISortItemContext { return s.sorts }

func (s *JoinQueryAnalysisStatementContext) GetAggs() []IAggStatementContext { return s.aggs }

func (s *JoinQueryAnalysisStatementContext) SetFields(v []IFieldIdentifierContext) { s.fields = v }

func (s *JoinQueryAnalysisStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *JoinQueryAnalysisStatementContext) SetSorts(v []ISortItemContext) { s.sorts = v }

func (s *JoinQueryAnalysisStatementContext) SetAggs(v []IAggStatementContext) { s.aggs = v }

func (s *JoinQueryAnalysisStatementContext) SELECT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSELECT, 0)
}

func (s *JoinQueryAnalysisStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFROM, 0)
}

func (s *JoinQueryAnalysisStatementContext) JOIN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserJOIN, 0)
}

func (s *JoinQueryAnalysisStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserON, 0)
}

func (s *JoinQueryAnalysisStatementContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *JoinQueryAnalysisStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *JoinQueryAnalysisStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *JoinQueryAnalysisStatementContext) AllStrictIdentifier() []IStrictIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem())
	var tst = make([]IStrictIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrictIdentifierContext)
		}
	}

	return tst
}

func (s *JoinQueryAnalysisStatementContext) StrictIdentifier(i int) IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *JoinQueryAnalysisStatementContext) AllFieldIdentifier() []IFieldIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem())
	var tst = make([]IFieldIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldIdentifierContext)
		}
	}

	return tst
}

func (s *JoinQueryAnalysisStatementContext) FieldIdentifier(i int) IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *JoinQueryAnalysisStatementContext) POST_EXPR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPOST_EXPR, 0)
}

func (s *JoinQueryAnalysisStatementContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserAS)
}

func (s *JoinQueryAnalysisStatementContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAS, i)
}

func (s *JoinQueryAnalysisStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHERE, 0)
}

func (s *JoinQueryAnalysisStatementContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *JoinQueryAnalysisStatementContext) MEM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMEM, 0)
}

func (s *JoinQueryAnalysisStatementContext) ORDER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORDER, 0)
}

func (s *JoinQueryAnalysisStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *JoinQueryAnalysisStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIMIT, 0)
}

func (s *JoinQueryAnalysisStatementContext) SLICE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSLICE, 0)
}

func (s *JoinQueryAnalysisStatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *JoinQueryAnalysisStatementContext) AGG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAGG, 0)
}

func (s *JoinQueryAnalysisStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *JoinQueryAnalysisStatementContext) ArithmeticExpression() IArithmeticExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArithmeticExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArithmeticExpressionContext)
}

func (s *JoinQueryAnalysisStatementContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *JoinQueryAnalysisStatementContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *JoinQueryAnalysisStatementContext) AllLONG() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserLONG)
}

func (s *JoinQueryAnalysisStatementContext) LONG(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, i)
}

func (s *JoinQueryAnalysisStatementContext) AllAggStatement() []IAggStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAggStatementContext)(nil)).Elem())
	var tst = make([]IAggStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAggStatementContext)
		}
	}

	return tst
}

func (s *JoinQueryAnalysisStatementContext) AggStatement(i int) IAggStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAggStatementContext)
}

func (s *JoinQueryAnalysisStatementContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLEFT, 0)
}

func (s *JoinQueryAnalysisStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALL, 0)
}

func (s *JoinQueryAnalysisStatementContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRIGHT, 0)
}

func (s *JoinQueryAnalysisStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinQueryAnalysisStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinQueryAnalysisStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterJoinQueryAnalysisStatement(s)
	}
}

func (s *JoinQueryAnalysisStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitJoinQueryAnalysisStatement(s)
	}
}

func (s *JoinQueryAnalysisStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitJoinQueryAnalysisStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) JoinQueryAnalysisStatement() (localctx IJoinQueryAnalysisStatementContext) {
	localctx = NewJoinQueryAnalysisStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ElasticSQLParserRULE_joinQueryAnalysisStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1184)
		p.Match(ElasticSQLParserSELECT)
	}

	{
		p.SetState(1185)

		var _x = p.FieldIdentifier()

		localctx.(*JoinQueryAnalysisStatementContext)._fieldIdentifier = _x
	}
	localctx.(*JoinQueryAnalysisStatementContext).fields = append(localctx.(*JoinQueryAnalysisStatementContext).fields, localctx.(*JoinQueryAnalysisStatementContext)._fieldIdentifier)
	p.SetState(1190)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1186)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1187)

				var _x = p.FieldIdentifier()

				localctx.(*JoinQueryAnalysisStatementContext)._fieldIdentifier = _x
			}
			localctx.(*JoinQueryAnalysisStatementContext).fields = append(localctx.(*JoinQueryAnalysisStatementContext).fields, localctx.(*JoinQueryAnalysisStatementContext)._fieldIdentifier)

		}
		p.SetState(1192)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}

	p.SetState(1202)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(1193)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1194)
			p.Match(ElasticSQLParserPOST_EXPR)
		}
		{
			p.SetState(1195)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(1196)

			var _x = p.ArithmeticExpression()

			localctx.(*JoinQueryAnalysisStatementContext).arithmetic = _x
		}
		{
			p.SetState(1197)
			p.Match(ElasticSQLParserT__5)
		}
		p.SetState(1200)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserAS {
			{
				p.SetState(1198)
				p.Match(ElasticSQLParserAS)
			}
			{
				p.SetState(1199)

				var _x = p.StrictIdentifier()

				localctx.(*JoinQueryAnalysisStatementContext).postAs = _x
			}

		}

	}
	{
		p.SetState(1204)
		p.Match(ElasticSQLParserFROM)
	}
	{
		p.SetState(1205)

		var _x = p.IndexIdentifier()

		localctx.(*JoinQueryAnalysisStatementContext)._indexIdentifier = _x
	}
	localctx.(*JoinQueryAnalysisStatementContext).indexes = append(localctx.(*JoinQueryAnalysisStatementContext).indexes, localctx.(*JoinQueryAnalysisStatementContext)._indexIdentifier)
	p.SetState(1210)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1206)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1207)

			var _x = p.IndexIdentifier()

			localctx.(*JoinQueryAnalysisStatementContext)._indexIdentifier = _x
		}
		localctx.(*JoinQueryAnalysisStatementContext).indexes = append(localctx.(*JoinQueryAnalysisStatementContext).indexes, localctx.(*JoinQueryAnalysisStatementContext)._indexIdentifier)

		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserAS {
		{
			p.SetState(1213)
			p.Match(ElasticSQLParserAS)
		}
		{
			p.SetState(1214)

			var _x = p.StrictIdentifier()

			localctx.(*JoinQueryAnalysisStatementContext).aAs = _x
		}

	}
	p.SetState(1219)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserWHERE {
		{
			p.SetState(1217)
			p.Match(ElasticSQLParserWHERE)
		}
		{
			p.SetState(1218)
			p.WhereExpression()
		}

	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMEM {
		{
			p.SetState(1221)
			p.Match(ElasticSQLParserMEM)
		}

	}
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-57)&-(0x1f+1)) == 0 && ((1<<uint((_la-57)))&((1<<(ElasticSQLParserALL-57))|(1<<(ElasticSQLParserRIGHT-57))|(1<<(ElasticSQLParserLEFT-57)))) != 0 {
		{
			p.SetState(1224)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*JoinQueryAnalysisStatementContext).kind = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-57)&-(0x1f+1)) == 0 && ((1<<uint((_la-57)))&((1<<(ElasticSQLParserALL-57))|(1<<(ElasticSQLParserRIGHT-57))|(1<<(ElasticSQLParserLEFT-57)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*JoinQueryAnalysisStatementContext).kind = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1227)
		p.Match(ElasticSQLParserJOIN)
	}
	{
		p.SetState(1228)

		var _x = p.StrictIdentifier()

		localctx.(*JoinQueryAnalysisStatementContext).tableB = _x
	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserAS {
		{
			p.SetState(1229)
			p.Match(ElasticSQLParserAS)
		}
		{
			p.SetState(1230)

			var _x = p.StrictIdentifier()

			localctx.(*JoinQueryAnalysisStatementContext).bAs = _x
		}

	}
	{
		p.SetState(1233)
		p.Match(ElasticSQLParserON)
	}
	{
		p.SetState(1234)

		var _x = p.FieldIdentifier()

		localctx.(*JoinQueryAnalysisStatementContext).first = _x
	}
	{
		p.SetState(1235)
		p.Match(ElasticSQLParserEQ)
	}
	{
		p.SetState(1236)

		var _x = p.FieldIdentifier()

		localctx.(*JoinQueryAnalysisStatementContext).second = _x
	}
	p.SetState(1247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserORDER {
		{
			p.SetState(1237)
			p.Match(ElasticSQLParserORDER)
		}
		{
			p.SetState(1238)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1239)

			var _x = p.SortItem()

			localctx.(*JoinQueryAnalysisStatementContext)._sortItem = _x
		}
		localctx.(*JoinQueryAnalysisStatementContext).sorts = append(localctx.(*JoinQueryAnalysisStatementContext).sorts, localctx.(*JoinQueryAnalysisStatementContext)._sortItem)
		p.SetState(1244)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1240)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1241)

				var _x = p.SortItem()

				localctx.(*JoinQueryAnalysisStatementContext)._sortItem = _x
			}
			localctx.(*JoinQueryAnalysisStatementContext).sorts = append(localctx.(*JoinQueryAnalysisStatementContext).sorts, localctx.(*JoinQueryAnalysisStatementContext)._sortItem)

			p.SetState(1246)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserLIMIT {
		{
			p.SetState(1249)
			p.Match(ElasticSQLParserLIMIT)
		}
		{
			p.SetState(1250)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*JoinQueryAnalysisStatementContext).limit = _m
		}

	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserSLICE {
		{
			p.SetState(1253)
			p.Match(ElasticSQLParserSLICE)
		}
		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__4 {
			{
				p.SetState(1254)
				p.Match(ElasticSQLParserT__4)
			}
			{
				p.SetState(1255)

				var _m = p.Match(ElasticSQLParserLONG)

				localctx.(*JoinQueryAnalysisStatementContext).sliceMax = _m
			}
			p.SetState(1258)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ElasticSQLParserT__3 {
				{
					p.SetState(1256)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(1257)

					var _x = p.FieldIdentifier()

					localctx.(*JoinQueryAnalysisStatementContext).sliceField = _x
				}

			}
			{
				p.SetState(1260)
				p.Match(ElasticSQLParserT__5)
			}

		}

	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(1265)
			p.ExportStatement()
		}

	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserAGG {
		{
			p.SetState(1268)
			p.Match(ElasticSQLParserAGG)
		}
		{
			p.SetState(1269)

			var _x = p.AggStatement()

			localctx.(*JoinQueryAnalysisStatementContext)._aggStatement = _x
		}
		localctx.(*JoinQueryAnalysisStatementContext).aggs = append(localctx.(*JoinQueryAnalysisStatementContext).aggs, localctx.(*JoinQueryAnalysisStatementContext)._aggStatement)
		p.SetState(1274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__8 {
			{
				p.SetState(1270)
				p.Match(ElasticSQLParserT__8)
			}
			{
				p.SetState(1271)

				var _x = p.AggStatement()

				localctx.(*JoinQueryAnalysisStatementContext)._aggStatement = _x
			}
			localctx.(*JoinQueryAnalysisStatementContext).aggs = append(localctx.(*JoinQueryAnalysisStatementContext).aggs, localctx.(*JoinQueryAnalysisStatementContext)._aggStatement)

			p.SetState(1276)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1279)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1280)

			var _x = p.StrictIdentifier()

			localctx.(*JoinQueryAnalysisStatementContext).statName = _x
		}

	}

	return localctx
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFront returns the front rule contexts.
	GetFront() IStrictIdentifierContext

	// GetSink returns the sink rule contexts.
	GetSink() IStrictIdentifierContext

	// GetTable returns the table rule contexts.
	GetTable() IIndexNameContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IFieldListContext

	// GetValueCluase returns the valueCluase rule contexts.
	GetValueCluase() IValueListContext

	// GetIdField returns the idField rule contexts.
	GetIdField() IFieldIdentifierContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// SetFront sets the front rule contexts.
	SetFront(IStrictIdentifierContext)

	// SetSink sets the sink rule contexts.
	SetSink(IStrictIdentifierContext)

	// SetTable sets the table rule contexts.
	SetTable(IIndexNameContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IFieldListContext)

	// SetValueCluase sets the valueCluase rule contexts.
	SetValueCluase(IValueListContext)

	// SetIdField sets the idField rule contexts.
	SetIdField(IFieldIdentifierContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	front       IStrictIdentifierContext
	sink        IStrictIdentifierContext
	table       IIndexNameContext
	columns     IFieldListContext
	valueCluase IValueListContext
	idField     IFieldIdentifierContext
	statName    IStrictIdentifierContext
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_insertStatement
	return p
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) GetFront() IStrictIdentifierContext { return s.front }

func (s *InsertStatementContext) GetSink() IStrictIdentifierContext { return s.sink }

func (s *InsertStatementContext) GetTable() IIndexNameContext { return s.table }

func (s *InsertStatementContext) GetColumns() IFieldListContext { return s.columns }

func (s *InsertStatementContext) GetValueCluase() IValueListContext { return s.valueCluase }

func (s *InsertStatementContext) GetIdField() IFieldIdentifierContext { return s.idField }

func (s *InsertStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *InsertStatementContext) SetFront(v IStrictIdentifierContext) { s.front = v }

func (s *InsertStatementContext) SetSink(v IStrictIdentifierContext) { s.sink = v }

func (s *InsertStatementContext) SetTable(v IIndexNameContext) { s.table = v }

func (s *InsertStatementContext) SetColumns(v IFieldListContext) { s.columns = v }

func (s *InsertStatementContext) SetValueCluase(v IValueListContext) { s.valueCluase = v }

func (s *InsertStatementContext) SetIdField(v IFieldIdentifierContext) { s.idField = v }

func (s *InsertStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *InsertStatementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINSERT, 0)
}

func (s *InsertStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTO, 0)
}

func (s *InsertStatementContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *InsertStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSING, 0)
}

func (s *InsertStatementContext) MQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMQL, 0)
}

func (s *InsertStatementContext) DOT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOT, 0)
}

func (s *InsertStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserON, 0)
}

func (s *InsertStatementContext) PK() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPK, 0)
}

func (s *InsertStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *InsertStatementContext) AllStrictIdentifier() []IStrictIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem())
	var tst = make([]IStrictIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrictIdentifierContext)
		}
	}

	return tst
}

func (s *InsertStatementContext) StrictIdentifier(i int) IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *InsertStatementContext) FieldList() IFieldListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldListContext)
}

func (s *InsertStatementContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *InsertStatementContext) UUID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUUID, 0)
}

func (s *InsertStatementContext) ValueList() IValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueListContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (s *InsertStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitInsertStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) InsertStatement() (localctx IInsertStatementContext) {
	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ElasticSQLParserRULE_insertStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserUSING {
		{
			p.SetState(1283)
			p.Match(ElasticSQLParserUSING)
		}
		{
			p.SetState(1284)

			var _x = p.StrictIdentifier()

			localctx.(*InsertStatementContext).front = _x
		}

	}
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMQL {
		{
			p.SetState(1287)
			p.Match(ElasticSQLParserMQL)
		}

	}
	{
		p.SetState(1290)
		p.Match(ElasticSQLParserINSERT)
	}
	{
		p.SetState(1291)
		p.Match(ElasticSQLParserINTO)
	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1292)

			var _x = p.StrictIdentifier()

			localctx.(*InsertStatementContext).sink = _x
		}
		{
			p.SetState(1293)
			p.Match(ElasticSQLParserDOT)
		}

	}
	{
		p.SetState(1297)

		var _x = p.IndexName()

		localctx.(*InsertStatementContext).table = _x
	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__4 {
		{
			p.SetState(1298)

			var _x = p.FieldList()

			localctx.(*InsertStatementContext).columns = _x
		}
		p.SetState(1300)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserVALUES {
			{
				p.SetState(1299)

				var _x = p.ValueList()

				localctx.(*InsertStatementContext).valueCluase = _x
			}

		}

	}
	p.SetState(1310)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserON {
		{
			p.SetState(1304)
			p.Match(ElasticSQLParserON)
		}
		p.SetState(1306)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserUUID {
			{
				p.SetState(1305)
				p.Match(ElasticSQLParserUUID)
			}

		}
		{
			p.SetState(1308)
			p.Match(ElasticSQLParserPK)
		}
		{
			p.SetState(1309)

			var _x = p.FieldIdentifier()

			localctx.(*InsertStatementContext).idField = _x
		}

	}
	p.SetState(1314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1312)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1313)

			var _x = p.StrictIdentifier()

			localctx.(*InsertStatementContext).statName = _x
		}

	}

	return localctx
}

// IFieldListContext is an interface to support dynamic dispatch.
type IFieldListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_fieldDefine returns the _fieldDefine rule contexts.
	Get_fieldDefine() IFieldDefineContext

	// Set_fieldDefine sets the _fieldDefine rule contexts.
	Set_fieldDefine(IFieldDefineContext)

	// GetFields returns the fields rule context list.
	GetFields() []IFieldDefineContext

	// SetFields sets the fields rule context list.
	SetFields([]IFieldDefineContext)

	// IsFieldListContext differentiates from other interfaces.
	IsFieldListContext()
}

type FieldListContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_fieldDefine IFieldDefineContext
	fields       []IFieldDefineContext
}

func NewEmptyFieldListContext() *FieldListContext {
	var p = new(FieldListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fieldList
	return p
}

func (*FieldListContext) IsFieldListContext() {}

func NewFieldListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldListContext {
	var p = new(FieldListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fieldList

	return p
}

func (s *FieldListContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldListContext) Get_fieldDefine() IFieldDefineContext { return s._fieldDefine }

func (s *FieldListContext) Set_fieldDefine(v IFieldDefineContext) { s._fieldDefine = v }

func (s *FieldListContext) GetFields() []IFieldDefineContext { return s.fields }

func (s *FieldListContext) SetFields(v []IFieldDefineContext) { s.fields = v }

func (s *FieldListContext) AllFieldDefine() []IFieldDefineContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldDefineContext)(nil)).Elem())
	var tst = make([]IFieldDefineContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldDefineContext)
		}
	}

	return tst
}

func (s *FieldListContext) FieldDefine(i int) IFieldDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDefineContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldDefineContext)
}

func (s *FieldListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFieldList(s)
	}
}

func (s *FieldListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFieldList(s)
	}
}

func (s *FieldListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFieldList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FieldList() (localctx IFieldListContext) {
	localctx = NewFieldListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ElasticSQLParserRULE_fieldList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1316)
		p.Match(ElasticSQLParserT__4)
	}

	{
		p.SetState(1317)

		var _x = p.FieldDefine()

		localctx.(*FieldListContext)._fieldDefine = _x
	}
	localctx.(*FieldListContext).fields = append(localctx.(*FieldListContext).fields, localctx.(*FieldListContext)._fieldDefine)
	p.SetState(1322)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1318)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1319)

			var _x = p.FieldDefine()

			localctx.(*FieldListContext)._fieldDefine = _x
		}
		localctx.(*FieldListContext).fields = append(localctx.(*FieldListContext).fields, localctx.(*FieldListContext)._fieldDefine)

		p.SetState(1324)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(1325)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IValueListContext is an interface to support dynamic dispatch.
type IValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_paramValues returns the _paramValues rule contexts.
	Get_paramValues() IParamValuesContext

	// Set_paramValues sets the _paramValues rule contexts.
	Set_paramValues(IParamValuesContext)

	// GetValuesList returns the valuesList rule context list.
	GetValuesList() []IParamValuesContext

	// SetValuesList sets the valuesList rule context list.
	SetValuesList([]IParamValuesContext)

	// IsValueListContext differentiates from other interfaces.
	IsValueListContext()
}

type ValueListContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_paramValues IParamValuesContext
	valuesList   []IParamValuesContext
}

func NewEmptyValueListContext() *ValueListContext {
	var p = new(ValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_valueList
	return p
}

func (*ValueListContext) IsValueListContext() {}

func NewValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueListContext {
	var p = new(ValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_valueList

	return p
}

func (s *ValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueListContext) Get_paramValues() IParamValuesContext { return s._paramValues }

func (s *ValueListContext) Set_paramValues(v IParamValuesContext) { s._paramValues = v }

func (s *ValueListContext) GetValuesList() []IParamValuesContext { return s.valuesList }

func (s *ValueListContext) SetValuesList(v []IParamValuesContext) { s.valuesList = v }

func (s *ValueListContext) VALUES() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserVALUES, 0)
}

func (s *ValueListContext) AllParamValues() []IParamValuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamValuesContext)(nil)).Elem())
	var tst = make([]IParamValuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamValuesContext)
		}
	}

	return tst
}

func (s *ValueListContext) ParamValues(i int) IParamValuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamValuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamValuesContext)
}

func (s *ValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterValueList(s)
	}
}

func (s *ValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitValueList(s)
	}
}

func (s *ValueListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitValueList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ValueList() (localctx IValueListContext) {
	localctx = NewValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ElasticSQLParserRULE_valueList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1327)
		p.Match(ElasticSQLParserVALUES)
	}
	{
		p.SetState(1328)

		var _x = p.ParamValues()

		localctx.(*ValueListContext)._paramValues = _x
	}
	localctx.(*ValueListContext).valuesList = append(localctx.(*ValueListContext).valuesList, localctx.(*ValueListContext)._paramValues)
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__3 {
		{
			p.SetState(1329)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1330)

			var _x = p.ParamValues()

			localctx.(*ValueListContext)._paramValues = _x
		}
		localctx.(*ValueListContext).valuesList = append(localctx.(*ValueListContext).valuesList, localctx.(*ValueListContext)._paramValues)

	}

	return localctx
}

// IParamValuesContext is an interface to support dynamic dispatch.
type IParamValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_param returns the _param rule contexts.
	Get_param() IParamContext

	// Set_param sets the _param rule contexts.
	Set_param(IParamContext)

	// GetVs returns the vs rule context list.
	GetVs() []IParamContext

	// SetVs sets the vs rule context list.
	SetVs([]IParamContext)

	// IsParamValuesContext differentiates from other interfaces.
	IsParamValuesContext()
}

type ParamValuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_param IParamContext
	vs     []IParamContext
}

func NewEmptyParamValuesContext() *ParamValuesContext {
	var p = new(ParamValuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_paramValues
	return p
}

func (*ParamValuesContext) IsParamValuesContext() {}

func NewParamValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamValuesContext {
	var p = new(ParamValuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_paramValues

	return p
}

func (s *ParamValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamValuesContext) Get_param() IParamContext { return s._param }

func (s *ParamValuesContext) Set_param(v IParamContext) { s._param = v }

func (s *ParamValuesContext) GetVs() []IParamContext { return s.vs }

func (s *ParamValuesContext) SetVs(v []IParamContext) { s.vs = v }

func (s *ParamValuesContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *ParamValuesContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *ParamValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterParamValues(s)
	}
}

func (s *ParamValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitParamValues(s)
	}
}

func (s *ParamValuesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitParamValues(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ParamValues() (localctx IParamValuesContext) {
	localctx = NewParamValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ElasticSQLParserRULE_paramValues)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1334)

		var _x = p.Param()

		localctx.(*ParamValuesContext)._param = _x
	}
	localctx.(*ParamValuesContext).vs = append(localctx.(*ParamValuesContext).vs, localctx.(*ParamValuesContext)._param)
	p.SetState(1339)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1335)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1336)

			var _x = p.Param()

			localctx.(*ParamValuesContext)._param = _x
		}
		localctx.(*ParamValuesContext).vs = append(localctx.(*ParamValuesContext).vs, localctx.(*ParamValuesContext)._param)

		p.SetState(1341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1342)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// Get_updateField returns the _updateField rule contexts.
	Get_updateField() IUpdateFieldContext

	// GetFileName returns the fileName rule contexts.
	GetFileName() IStrContext

	// GetId returns the id rule contexts.
	GetId() IStrContext

	// Get_str returns the _str rule contexts.
	Get_str() IStrContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// Set_updateField sets the _updateField rule contexts.
	Set_updateField(IUpdateFieldContext)

	// SetFileName sets the fileName rule contexts.
	SetFileName(IStrContext)

	// SetId sets the id rule contexts.
	SetId(IStrContext)

	// Set_str sets the _str rule contexts.
	Set_str(IStrContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// GetFields returns the fields rule context list.
	GetFields() []IUpdateFieldContext

	// GetItems returns the items rule context list.
	GetItems() []IStrContext

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// SetFields sets the fields rule context list.
	SetFields([]IUpdateFieldContext)

	// SetItems sets the items rule context list.
	SetItems([]IStrContext)

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
	script           IScriptPhraseContext
	_updateField     IUpdateFieldContext
	fields           []IUpdateFieldContext
	fileName         IStrContext
	id               IStrContext
	_str             IStrContext
	items            []IStrContext
	statName         IStrictIdentifierContext
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *UpdateStatementContext) GetScript() IScriptPhraseContext { return s.script }

func (s *UpdateStatementContext) Get_updateField() IUpdateFieldContext { return s._updateField }

func (s *UpdateStatementContext) GetFileName() IStrContext { return s.fileName }

func (s *UpdateStatementContext) GetId() IStrContext { return s.id }

func (s *UpdateStatementContext) Get_str() IStrContext { return s._str }

func (s *UpdateStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *UpdateStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) {
	s._indexIdentifier = v
}

func (s *UpdateStatementContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *UpdateStatementContext) Set_updateField(v IUpdateFieldContext) { s._updateField = v }

func (s *UpdateStatementContext) SetFileName(v IStrContext) { s.fileName = v }

func (s *UpdateStatementContext) SetId(v IStrContext) { s.id = v }

func (s *UpdateStatementContext) Set_str(v IStrContext) { s._str = v }

func (s *UpdateStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *UpdateStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *UpdateStatementContext) GetFields() []IUpdateFieldContext { return s.fields }

func (s *UpdateStatementContext) GetItems() []IStrContext { return s.items }

func (s *UpdateStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *UpdateStatementContext) SetFields(v []IUpdateFieldContext) { s.fields = v }

func (s *UpdateStatementContext) SetItems(v []IStrContext) { s.items = v }

func (s *UpdateStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUPDATE, 0)
}

func (s *UpdateStatementContext) UPSERT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUPSERT, 0)
}

func (s *UpdateStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *UpdateStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *UpdateStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *UpdateStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHERE, 0)
}

func (s *UpdateStatementContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *UpdateStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *UpdateStatementContext) IDS_FILE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS_FILE, 0)
}

func (s *UpdateStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserID, 0)
}

func (s *UpdateStatementContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *UpdateStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *UpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSET, 0)
}

func (s *UpdateStatementContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *UpdateStatementContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *UpdateStatementContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *UpdateStatementContext) AllUpdateField() []IUpdateFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdateFieldContext)(nil)).Elem())
	var tst = make([]IUpdateFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdateFieldContext)
		}
	}

	return tst
}

func (s *UpdateStatementContext) UpdateField(i int) IUpdateFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdateFieldContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitUpdateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) UpdateStatement() (localctx IUpdateStatementContext) {
	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ElasticSQLParserRULE_updateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1344)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserUPDATE || _la == ElasticSQLParserUPSERT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1345)

		var _x = p.IndexIdentifier()

		localctx.(*UpdateStatementContext)._indexIdentifier = _x
	}
	localctx.(*UpdateStatementContext).indexes = append(localctx.(*UpdateStatementContext).indexes, localctx.(*UpdateStatementContext)._indexIdentifier)
	p.SetState(1350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1346)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1347)

			var _x = p.IndexIdentifier()

			localctx.(*UpdateStatementContext)._indexIdentifier = _x
		}
		localctx.(*UpdateStatementContext).indexes = append(localctx.(*UpdateStatementContext).indexes, localctx.(*UpdateStatementContext)._indexIdentifier)

		p.SetState(1352)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	p.SetState(1354)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ElasticSQLParserT__4)|(1<<ElasticSQLParserINNER_HIT)|(1<<ElasticSQLParserRESCORE)|(1<<ElasticSQLParserWINDOWS)|(1<<ElasticSQLParserCOLLAPSE)|(1<<ElasticSQLParserSCORE))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(ElasticSQLParserSQL-33))|(1<<(ElasticSQLParserSTRUCT-33))|(1<<(ElasticSQLParserCK-33))|(1<<(ElasticSQLParserURL-33))|(1<<(ElasticSQLParserPASSWORD-33))|(1<<(ElasticSQLParserUSER-33))|(1<<(ElasticSQLParserNUMBER-33))|(1<<(ElasticSQLParserSTRING-33))|(1<<(ElasticSQLParserGROUP-33))|(1<<(ElasticSQLParserTEMPLATE-33))|(1<<(ElasticSQLParserALL-33))|(1<<(ElasticSQLParserNOT-33))|(1<<(ElasticSQLParserINTO-33))|(1<<(ElasticSQLParserTO-33))|(1<<(ElasticSQLParserEXCLUDE-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(ElasticSQLParserINCLUDE-65))|(1<<(ElasticSQLParserID-65))|(1<<(ElasticSQLParserSLICE-65))|(1<<(ElasticSQLParserJSON-65))|(1<<(ElasticSQLParserCSV-65))|(1<<(ElasticSQLParserEXCEL-65))|(1<<(ElasticSQLParserSEP-65))|(1<<(ElasticSQLParserSCRIPT-65))|(1<<(ElasticSQLParserLANG-65))|(1<<(ElasticSQLParserRETURN-65))|(1<<(ElasticSQLParserPK-65))|(1<<(ElasticSQLParserUUID-65))|(1<<(ElasticSQLParserMEM-65))|(1<<(ElasticSQLParserRIGHT-65))|(1<<(ElasticSQLParserLEFT-65))|(1<<(ElasticSQLParserALIAS-65))|(1<<(ElasticSQLParserRLIKE-65))|(1<<(ElasticSQLParserLIKE-65))|(1<<(ElasticSQLParserIN-65))|(1<<(ElasticSQLParserOUT-65)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(ElasticSQLParserEXIST-99))|(1<<(ElasticSQLParserMISS-99))|(1<<(ElasticSQLParserQUERY_STRING-99))|(1<<(ElasticSQLParserMATCH-99))|(1<<(ElasticSQLParserMULTI_MATCH-99))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-99))|(1<<(ElasticSQLParserMATCH_PHRASE-99))|(1<<(ElasticSQLParserKNN-99))|(1<<(ElasticSQLParserHAS_CHILD-99))|(1<<(ElasticSQLParserHAS_PARENT-99))|(1<<(ElasticSQLParserCOUNT-99))|(1<<(ElasticSQLParserMAX-99))|(1<<(ElasticSQLParserMIN-99))|(1<<(ElasticSQLParserAVG-99))|(1<<(ElasticSQLParserSUM-99))|(1<<(ElasticSQLParserDISTINCT-99))|(1<<(ElasticSQLParserVALUE_COUNT-99))|(1<<(ElasticSQLParserPERCENTILE_RANKS-99))|(1<<(ElasticSQLParserPERCENTILES-99))|(1<<(ElasticSQLParserPERCENT-99))|(1<<(ElasticSQLParserDISTINCT_PERCENT-99))|(1<<(ElasticSQLParserTOP_HITS-99))|(1<<(ElasticSQLParserMATH-99))|(1<<(ElasticSQLParserRANGE-99))|(1<<(ElasticSQLParserINTERVAL-99))|(1<<(ElasticSQLParserFORMAT-99)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(ElasticSQLParserKEYED-131))|(1<<(ElasticSQLParserSIZE-131))|(1<<(ElasticSQLParserMISSING-131))|(1<<(ElasticSQLParserNULL-131))|(1<<(ElasticSQLParserEND-131))|(1<<(ElasticSQLParserSAMPLE-131))|(1<<(ElasticSQLParserIDS-131))|(1<<(ElasticSQLParserIDS_FILE-131))|(1<<(ElasticSQLParserPUT-131))|(1<<(ElasticSQLParserADD-131))|(1<<(ElasticSQLParserARRAY-131))|(1<<(ElasticSQLParserFALSE-131))|(1<<(ElasticSQLParserTRUE-131))|(1<<(ElasticSQLParserDATETIME_T-131))|(1<<(ElasticSQLParserTIMESTAMP_T-131))|(1<<(ElasticSQLParserDATE_T-131))|(1<<(ElasticSQLParserTIME_T-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(ElasticSQLParserLOCAL-163))|(1<<(ElasticSQLParserDATA-163))|(1<<(ElasticSQLParserLIST-163))|(1<<(ElasticSQLParserSEPARATED-163))|(1<<(ElasticSQLParserANALYZE-163))|(1<<(ElasticSQLParserNLP-163))|(1<<(ElasticSQLParserENABLE-163))|(1<<(ElasticSQLParserSEGMENT-163))|(1<<(ElasticSQLParserNAME-163))|(1<<(ElasticSQLParserORG-163))|(1<<(ElasticSQLParserLOC-163))|(1<<(ElasticSQLParserTIME-163))|(1<<(ElasticSQLParserMUL-163))|(1<<(ElasticSQLParserLONG-163))|(1<<(ElasticSQLParserDOUBLE-163))|(1<<(ElasticSQLParserQUOTASTR-163))|(1<<(ElasticSQLParserIDENTIFIER-163))|(1<<(ElasticSQLParserEXT_IDENTIFIER-163)))) != 0) {
		{
			p.SetState(1353)

			var _x = p.ScriptPhrase()

			localctx.(*UpdateStatementContext).script = _x
		}

	}
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserSET {
		{
			p.SetState(1356)
			p.Match(ElasticSQLParserSET)
		}
		{
			p.SetState(1357)

			var _x = p.UpdateField()

			localctx.(*UpdateStatementContext)._updateField = _x
		}
		localctx.(*UpdateStatementContext).fields = append(localctx.(*UpdateStatementContext).fields, localctx.(*UpdateStatementContext)._updateField)
		p.SetState(1362)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1358)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1359)

				var _x = p.UpdateField()

				localctx.(*UpdateStatementContext)._updateField = _x
			}
			localctx.(*UpdateStatementContext).fields = append(localctx.(*UpdateStatementContext).fields, localctx.(*UpdateStatementContext)._updateField)

			p.SetState(1364)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	p.SetState(1388)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1367)
			p.Match(ElasticSQLParserWHERE)
		}
		{
			p.SetState(1368)
			p.WhereExpression()
		}

	case 2:
		{
			p.SetState(1369)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1370)
			p.Match(ElasticSQLParserIDS_FILE)
		}
		{
			p.SetState(1371)

			var _x = p.Str()

			localctx.(*UpdateStatementContext).fileName = _x
		}

	case 3:
		{
			p.SetState(1372)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1373)
			p.Match(ElasticSQLParserID)
		}
		{
			p.SetState(1374)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1375)

			var _x = p.Str()

			localctx.(*UpdateStatementContext).id = _x
		}

	case 4:
		{
			p.SetState(1376)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1377)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(1378)

			var _x = p.Str()

			localctx.(*UpdateStatementContext)._str = _x
		}
		localctx.(*UpdateStatementContext).items = append(localctx.(*UpdateStatementContext).items, localctx.(*UpdateStatementContext)._str)
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1379)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1380)

				var _x = p.Str()

				localctx.(*UpdateStatementContext)._str = _x
			}
			localctx.(*UpdateStatementContext).items = append(localctx.(*UpdateStatementContext).items, localctx.(*UpdateStatementContext)._str)

			p.SetState(1385)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1386)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1390)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1391)

			var _x = p.StrictIdentifier()

			localctx.(*UpdateStatementContext).statName = _x
		}

	}

	return localctx
}

// IUpdateFieldContext is an interface to support dynamic dispatch.
type IUpdateFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateFieldContext differentiates from other interfaces.
	IsUpdateFieldContext()
}

type UpdateFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateFieldContext() *UpdateFieldContext {
	var p = new(UpdateFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_updateField
	return p
}

func (*UpdateFieldContext) IsUpdateFieldContext() {}

func NewUpdateFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateFieldContext {
	var p = new(UpdateFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_updateField

	return p
}

func (s *UpdateFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateFieldContext) CopyFrom(ctx *UpdateFieldContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UpdateFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UpdateReplaceFieldContext struct {
	*UpdateFieldContext
	field  IFieldIdentifierContext
	value  IParamContext
	dType  antlr.Token
	_param IParamContext
	values []IParamContext
}

func NewUpdateReplaceFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UpdateReplaceFieldContext {
	var p = new(UpdateReplaceFieldContext)

	p.UpdateFieldContext = NewEmptyUpdateFieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UpdateFieldContext))

	return p
}

func (s *UpdateReplaceFieldContext) GetDType() antlr.Token { return s.dType }

func (s *UpdateReplaceFieldContext) SetDType(v antlr.Token) { s.dType = v }

func (s *UpdateReplaceFieldContext) GetField() IFieldIdentifierContext { return s.field }

func (s *UpdateReplaceFieldContext) GetValue() IParamContext { return s.value }

func (s *UpdateReplaceFieldContext) Get_param() IParamContext { return s._param }

func (s *UpdateReplaceFieldContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *UpdateReplaceFieldContext) SetValue(v IParamContext) { s.value = v }

func (s *UpdateReplaceFieldContext) Set_param(v IParamContext) { s._param = v }

func (s *UpdateReplaceFieldContext) GetValues() []IParamContext { return s.values }

func (s *UpdateReplaceFieldContext) SetValues(v []IParamContext) { s.values = v }

func (s *UpdateReplaceFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateReplaceFieldContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *UpdateReplaceFieldContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *UpdateReplaceFieldContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *UpdateReplaceFieldContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *UpdateReplaceFieldContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *UpdateReplaceFieldContext) LIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIST, 0)
}

func (s *UpdateReplaceFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterUpdateReplaceField(s)
	}
}

func (s *UpdateReplaceFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitUpdateReplaceField(s)
	}
}

func (s *UpdateReplaceFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitUpdateReplaceField(s)

	default:
		return t.VisitChildren(s)
	}
}

type UpdateRemoveFieldContext struct {
	*UpdateFieldContext
	dType  antlr.Token
	field  IFieldIdentifierContext
	_param IParamContext
	values []IParamContext
}

func NewUpdateRemoveFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UpdateRemoveFieldContext {
	var p = new(UpdateRemoveFieldContext)

	p.UpdateFieldContext = NewEmptyUpdateFieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UpdateFieldContext))

	return p
}

func (s *UpdateRemoveFieldContext) GetDType() antlr.Token { return s.dType }

func (s *UpdateRemoveFieldContext) SetDType(v antlr.Token) { s.dType = v }

func (s *UpdateRemoveFieldContext) GetField() IFieldIdentifierContext { return s.field }

func (s *UpdateRemoveFieldContext) Get_param() IParamContext { return s._param }

func (s *UpdateRemoveFieldContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *UpdateRemoveFieldContext) Set_param(v IParamContext) { s._param = v }

func (s *UpdateRemoveFieldContext) GetValues() []IParamContext { return s.values }

func (s *UpdateRemoveFieldContext) SetValues(v []IParamContext) { s.values = v }

func (s *UpdateRemoveFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateRemoveFieldContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserREMOVE, 0)
}

func (s *UpdateRemoveFieldContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *UpdateRemoveFieldContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *UpdateRemoveFieldContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *UpdateRemoveFieldContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *UpdateRemoveFieldContext) LIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIST, 0)
}

func (s *UpdateRemoveFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterUpdateRemoveField(s)
	}
}

func (s *UpdateRemoveFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitUpdateRemoveField(s)
	}
}

func (s *UpdateRemoveFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitUpdateRemoveField(s)

	default:
		return t.VisitChildren(s)
	}
}

type UpdateAddFieldContext struct {
	*UpdateFieldContext
	dType  antlr.Token
	field  IFieldIdentifierContext
	_param IParamContext
	values []IParamContext
}

func NewUpdateAddFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UpdateAddFieldContext {
	var p = new(UpdateAddFieldContext)

	p.UpdateFieldContext = NewEmptyUpdateFieldContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UpdateFieldContext))

	return p
}

func (s *UpdateAddFieldContext) GetDType() antlr.Token { return s.dType }

func (s *UpdateAddFieldContext) SetDType(v antlr.Token) { s.dType = v }

func (s *UpdateAddFieldContext) GetField() IFieldIdentifierContext { return s.field }

func (s *UpdateAddFieldContext) Get_param() IParamContext { return s._param }

func (s *UpdateAddFieldContext) SetField(v IFieldIdentifierContext) { s.field = v }

func (s *UpdateAddFieldContext) Set_param(v IParamContext) { s._param = v }

func (s *UpdateAddFieldContext) GetValues() []IParamContext { return s.values }

func (s *UpdateAddFieldContext) SetValues(v []IParamContext) { s.values = v }

func (s *UpdateAddFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateAddFieldContext) ADD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserADD, 0)
}

func (s *UpdateAddFieldContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *UpdateAddFieldContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *UpdateAddFieldContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *UpdateAddFieldContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *UpdateAddFieldContext) LIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIST, 0)
}

func (s *UpdateAddFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterUpdateAddField(s)
	}
}

func (s *UpdateAddFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitUpdateAddField(s)
	}
}

func (s *UpdateAddFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitUpdateAddField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) UpdateField() (localctx IUpdateFieldContext) {
	localctx = NewUpdateFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ElasticSQLParserRULE_updateField)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1444)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUpdateReplaceFieldContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1412)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1394)

				var _x = p.FieldIdentifier()

				localctx.(*UpdateReplaceFieldContext).field = _x
			}
			{
				p.SetState(1395)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1396)

				var _x = p.Param()

				localctx.(*UpdateReplaceFieldContext).value = _x
			}

		case 2:
			{
				p.SetState(1398)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*UpdateReplaceFieldContext).dType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == ElasticSQLParserMAP || _la == ElasticSQLParserLIST) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*UpdateReplaceFieldContext).dType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1399)
				p.Match(ElasticSQLParserT__4)
			}
			{
				p.SetState(1400)

				var _x = p.FieldIdentifier()

				localctx.(*UpdateReplaceFieldContext).field = _x
			}
			{
				p.SetState(1401)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1402)

				var _x = p.Param()

				localctx.(*UpdateReplaceFieldContext)._param = _x
			}
			localctx.(*UpdateReplaceFieldContext).values = append(localctx.(*UpdateReplaceFieldContext).values, localctx.(*UpdateReplaceFieldContext)._param)
			p.SetState(1407)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == ElasticSQLParserT__3 {
				{
					p.SetState(1403)
					p.Match(ElasticSQLParserT__3)
				}
				{
					p.SetState(1404)

					var _x = p.Param()

					localctx.(*UpdateReplaceFieldContext)._param = _x
				}
				localctx.(*UpdateReplaceFieldContext).values = append(localctx.(*UpdateReplaceFieldContext).values, localctx.(*UpdateReplaceFieldContext)._param)

				p.SetState(1409)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1410)
				p.Match(ElasticSQLParserT__5)
			}

		}

	case 2:
		localctx = NewUpdateAddFieldContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1414)
			p.Match(ElasticSQLParserADD)
		}
		{
			p.SetState(1415)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UpdateAddFieldContext).dType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ElasticSQLParserMAP || _la == ElasticSQLParserLIST) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UpdateAddFieldContext).dType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1416)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(1417)

			var _x = p.FieldIdentifier()

			localctx.(*UpdateAddFieldContext).field = _x
		}
		{
			p.SetState(1418)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1419)

			var _x = p.Param()

			localctx.(*UpdateAddFieldContext)._param = _x
		}
		localctx.(*UpdateAddFieldContext).values = append(localctx.(*UpdateAddFieldContext).values, localctx.(*UpdateAddFieldContext)._param)
		p.SetState(1424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1420)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1421)

				var _x = p.Param()

				localctx.(*UpdateAddFieldContext)._param = _x
			}
			localctx.(*UpdateAddFieldContext).values = append(localctx.(*UpdateAddFieldContext).values, localctx.(*UpdateAddFieldContext)._param)

			p.SetState(1426)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1427)
			p.Match(ElasticSQLParserT__5)
		}

	case 3:
		localctx = NewUpdateRemoveFieldContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1429)
			p.Match(ElasticSQLParserREMOVE)
		}
		{
			p.SetState(1430)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UpdateRemoveFieldContext).dType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ElasticSQLParserMAP || _la == ElasticSQLParserLIST) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UpdateRemoveFieldContext).dType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1431)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(1432)

			var _x = p.FieldIdentifier()

			localctx.(*UpdateRemoveFieldContext).field = _x
		}
		{
			p.SetState(1433)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1434)

			var _x = p.Param()

			localctx.(*UpdateRemoveFieldContext)._param = _x
		}
		localctx.(*UpdateRemoveFieldContext).values = append(localctx.(*UpdateRemoveFieldContext).values, localctx.(*UpdateRemoveFieldContext)._param)
		p.SetState(1439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1435)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1436)

				var _x = p.Param()

				localctx.(*UpdateRemoveFieldContext)._param = _x
			}
			localctx.(*UpdateRemoveFieldContext).values = append(localctx.(*UpdateRemoveFieldContext).values, localctx.(*UpdateRemoveFieldContext)._param)

			p.SetState(1441)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1442)
			p.Match(ElasticSQLParserT__5)
		}

	}

	return localctx
}

// IBatchUpdateStatementContext is an interface to support dynamic dispatch.
type IBatchUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_str returns the _str rule contexts.
	Get_str() IStrContext

	// GetScript returns the script rule contexts.
	GetScript() IScriptPhraseContext

	// Get_fieldIdentifier returns the _fieldIdentifier rule contexts.
	Get_fieldIdentifier() IFieldIdentifierContext

	// Get_param returns the _param rule contexts.
	Get_param() IParamContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_str sets the _str rule contexts.
	Set_str(IStrContext)

	// SetScript sets the script rule contexts.
	SetScript(IScriptPhraseContext)

	// Set_fieldIdentifier sets the _fieldIdentifier rule contexts.
	Set_fieldIdentifier(IFieldIdentifierContext)

	// Set_param sets the _param rule contexts.
	Set_param(IParamContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetDocs returns the docs rule context list.
	GetDocs() []IStrContext

	// GetFields returns the fields rule context list.
	GetFields() []IFieldIdentifierContext

	// GetValues returns the values rule context list.
	GetValues() []IParamContext

	// SetDocs sets the docs rule context list.
	SetDocs([]IStrContext)

	// SetFields sets the fields rule context list.
	SetFields([]IFieldIdentifierContext)

	// SetValues sets the values rule context list.
	SetValues([]IParamContext)

	// IsBatchUpdateStatementContext differentiates from other interfaces.
	IsBatchUpdateStatementContext()
}

type BatchUpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_str             IStrContext
	docs             []IStrContext
	script           IScriptPhraseContext
	_fieldIdentifier IFieldIdentifierContext
	fields           []IFieldIdentifierContext
	_param           IParamContext
	values           []IParamContext
	statName         IStrictIdentifierContext
}

func NewEmptyBatchUpdateStatementContext() *BatchUpdateStatementContext {
	var p = new(BatchUpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_batchUpdateStatement
	return p
}

func (*BatchUpdateStatementContext) IsBatchUpdateStatementContext() {}

func NewBatchUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchUpdateStatementContext {
	var p = new(BatchUpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_batchUpdateStatement

	return p
}

func (s *BatchUpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchUpdateStatementContext) Get_str() IStrContext { return s._str }

func (s *BatchUpdateStatementContext) GetScript() IScriptPhraseContext { return s.script }

func (s *BatchUpdateStatementContext) Get_fieldIdentifier() IFieldIdentifierContext {
	return s._fieldIdentifier
}

func (s *BatchUpdateStatementContext) Get_param() IParamContext { return s._param }

func (s *BatchUpdateStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *BatchUpdateStatementContext) Set_str(v IStrContext) { s._str = v }

func (s *BatchUpdateStatementContext) SetScript(v IScriptPhraseContext) { s.script = v }

func (s *BatchUpdateStatementContext) Set_fieldIdentifier(v IFieldIdentifierContext) {
	s._fieldIdentifier = v
}

func (s *BatchUpdateStatementContext) Set_param(v IParamContext) { s._param = v }

func (s *BatchUpdateStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *BatchUpdateStatementContext) GetDocs() []IStrContext { return s.docs }

func (s *BatchUpdateStatementContext) GetFields() []IFieldIdentifierContext { return s.fields }

func (s *BatchUpdateStatementContext) GetValues() []IParamContext { return s.values }

func (s *BatchUpdateStatementContext) SetDocs(v []IStrContext) { s.docs = v }

func (s *BatchUpdateStatementContext) SetFields(v []IFieldIdentifierContext) { s.fields = v }

func (s *BatchUpdateStatementContext) SetValues(v []IParamContext) { s.values = v }

func (s *BatchUpdateStatementContext) BATCH_UPDATE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBATCH_UPDATE, 0)
}

func (s *BatchUpdateStatementContext) BATCH_UPSERT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBATCH_UPSERT, 0)
}

func (s *BatchUpdateStatementContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *BatchUpdateStatementContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *BatchUpdateStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *BatchUpdateStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *BatchUpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSET, 0)
}

func (s *BatchUpdateStatementContext) ScriptPhrase() IScriptPhraseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptPhraseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptPhraseContext)
}

func (s *BatchUpdateStatementContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *BatchUpdateStatementContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *BatchUpdateStatementContext) AllFieldIdentifier() []IFieldIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem())
	var tst = make([]IFieldIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldIdentifierContext)
		}
	}

	return tst
}

func (s *BatchUpdateStatementContext) FieldIdentifier(i int) IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *BatchUpdateStatementContext) AllParam() []IParamContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParamContext)(nil)).Elem())
	var tst = make([]IParamContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParamContext)
		}
	}

	return tst
}

func (s *BatchUpdateStatementContext) Param(i int) IParamContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParamContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParamContext)
}

func (s *BatchUpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchUpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchUpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBatchUpdateStatement(s)
	}
}

func (s *BatchUpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBatchUpdateStatement(s)
	}
}

func (s *BatchUpdateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBatchUpdateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BatchUpdateStatement() (localctx IBatchUpdateStatementContext) {
	localctx = NewBatchUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, ElasticSQLParserRULE_batchUpdateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1446)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserBATCH_UPDATE || _la == ElasticSQLParserBATCH_UPSERT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1447)

		var _x = p.Str()

		localctx.(*BatchUpdateStatementContext)._str = _x
	}
	localctx.(*BatchUpdateStatementContext).docs = append(localctx.(*BatchUpdateStatementContext).docs, localctx.(*BatchUpdateStatementContext)._str)
	p.SetState(1452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1448)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1449)

			var _x = p.Str()

			localctx.(*BatchUpdateStatementContext)._str = _x
		}
		localctx.(*BatchUpdateStatementContext).docs = append(localctx.(*BatchUpdateStatementContext).docs, localctx.(*BatchUpdateStatementContext)._str)

		p.SetState(1454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	p.SetState(1456)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ElasticSQLParserT__4)|(1<<ElasticSQLParserINNER_HIT)|(1<<ElasticSQLParserRESCORE)|(1<<ElasticSQLParserWINDOWS)|(1<<ElasticSQLParserCOLLAPSE)|(1<<ElasticSQLParserSCORE))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(ElasticSQLParserSQL-33))|(1<<(ElasticSQLParserSTRUCT-33))|(1<<(ElasticSQLParserCK-33))|(1<<(ElasticSQLParserURL-33))|(1<<(ElasticSQLParserPASSWORD-33))|(1<<(ElasticSQLParserUSER-33))|(1<<(ElasticSQLParserNUMBER-33))|(1<<(ElasticSQLParserSTRING-33))|(1<<(ElasticSQLParserGROUP-33))|(1<<(ElasticSQLParserTEMPLATE-33))|(1<<(ElasticSQLParserALL-33))|(1<<(ElasticSQLParserNOT-33))|(1<<(ElasticSQLParserINTO-33))|(1<<(ElasticSQLParserTO-33))|(1<<(ElasticSQLParserEXCLUDE-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(ElasticSQLParserINCLUDE-65))|(1<<(ElasticSQLParserID-65))|(1<<(ElasticSQLParserSLICE-65))|(1<<(ElasticSQLParserJSON-65))|(1<<(ElasticSQLParserCSV-65))|(1<<(ElasticSQLParserEXCEL-65))|(1<<(ElasticSQLParserSEP-65))|(1<<(ElasticSQLParserSCRIPT-65))|(1<<(ElasticSQLParserLANG-65))|(1<<(ElasticSQLParserRETURN-65))|(1<<(ElasticSQLParserPK-65))|(1<<(ElasticSQLParserUUID-65))|(1<<(ElasticSQLParserMEM-65))|(1<<(ElasticSQLParserRIGHT-65))|(1<<(ElasticSQLParserLEFT-65))|(1<<(ElasticSQLParserALIAS-65))|(1<<(ElasticSQLParserRLIKE-65))|(1<<(ElasticSQLParserLIKE-65))|(1<<(ElasticSQLParserIN-65))|(1<<(ElasticSQLParserOUT-65)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(ElasticSQLParserEXIST-99))|(1<<(ElasticSQLParserMISS-99))|(1<<(ElasticSQLParserQUERY_STRING-99))|(1<<(ElasticSQLParserMATCH-99))|(1<<(ElasticSQLParserMULTI_MATCH-99))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-99))|(1<<(ElasticSQLParserMATCH_PHRASE-99))|(1<<(ElasticSQLParserKNN-99))|(1<<(ElasticSQLParserHAS_CHILD-99))|(1<<(ElasticSQLParserHAS_PARENT-99))|(1<<(ElasticSQLParserCOUNT-99))|(1<<(ElasticSQLParserMAX-99))|(1<<(ElasticSQLParserMIN-99))|(1<<(ElasticSQLParserAVG-99))|(1<<(ElasticSQLParserSUM-99))|(1<<(ElasticSQLParserDISTINCT-99))|(1<<(ElasticSQLParserVALUE_COUNT-99))|(1<<(ElasticSQLParserPERCENTILE_RANKS-99))|(1<<(ElasticSQLParserPERCENTILES-99))|(1<<(ElasticSQLParserPERCENT-99))|(1<<(ElasticSQLParserDISTINCT_PERCENT-99))|(1<<(ElasticSQLParserTOP_HITS-99))|(1<<(ElasticSQLParserMATH-99))|(1<<(ElasticSQLParserRANGE-99))|(1<<(ElasticSQLParserINTERVAL-99))|(1<<(ElasticSQLParserFORMAT-99)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(ElasticSQLParserKEYED-131))|(1<<(ElasticSQLParserSIZE-131))|(1<<(ElasticSQLParserMISSING-131))|(1<<(ElasticSQLParserNULL-131))|(1<<(ElasticSQLParserEND-131))|(1<<(ElasticSQLParserSAMPLE-131))|(1<<(ElasticSQLParserIDS-131))|(1<<(ElasticSQLParserIDS_FILE-131))|(1<<(ElasticSQLParserPUT-131))|(1<<(ElasticSQLParserADD-131))|(1<<(ElasticSQLParserARRAY-131))|(1<<(ElasticSQLParserFALSE-131))|(1<<(ElasticSQLParserTRUE-131))|(1<<(ElasticSQLParserDATETIME_T-131))|(1<<(ElasticSQLParserTIMESTAMP_T-131))|(1<<(ElasticSQLParserDATE_T-131))|(1<<(ElasticSQLParserTIME_T-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(ElasticSQLParserLOCAL-163))|(1<<(ElasticSQLParserDATA-163))|(1<<(ElasticSQLParserLIST-163))|(1<<(ElasticSQLParserSEPARATED-163))|(1<<(ElasticSQLParserANALYZE-163))|(1<<(ElasticSQLParserNLP-163))|(1<<(ElasticSQLParserENABLE-163))|(1<<(ElasticSQLParserSEGMENT-163))|(1<<(ElasticSQLParserNAME-163))|(1<<(ElasticSQLParserORG-163))|(1<<(ElasticSQLParserLOC-163))|(1<<(ElasticSQLParserTIME-163))|(1<<(ElasticSQLParserMUL-163))|(1<<(ElasticSQLParserLONG-163))|(1<<(ElasticSQLParserDOUBLE-163))|(1<<(ElasticSQLParserQUOTASTR-163))|(1<<(ElasticSQLParserIDENTIFIER-163))|(1<<(ElasticSQLParserEXT_IDENTIFIER-163)))) != 0) {
		{
			p.SetState(1455)

			var _x = p.ScriptPhrase()

			localctx.(*BatchUpdateStatementContext).script = _x
		}

	}
	p.SetState(1472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserSET {
		{
			p.SetState(1458)
			p.Match(ElasticSQLParserSET)
		}

		{
			p.SetState(1459)

			var _x = p.FieldIdentifier()

			localctx.(*BatchUpdateStatementContext)._fieldIdentifier = _x
		}
		localctx.(*BatchUpdateStatementContext).fields = append(localctx.(*BatchUpdateStatementContext).fields, localctx.(*BatchUpdateStatementContext)._fieldIdentifier)
		{
			p.SetState(1460)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1461)

			var _x = p.Param()

			localctx.(*BatchUpdateStatementContext)._param = _x
		}
		localctx.(*BatchUpdateStatementContext).values = append(localctx.(*BatchUpdateStatementContext).values, localctx.(*BatchUpdateStatementContext)._param)
		p.SetState(1469)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1462)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1463)

				var _x = p.FieldIdentifier()

				localctx.(*BatchUpdateStatementContext)._fieldIdentifier = _x
			}
			localctx.(*BatchUpdateStatementContext).fields = append(localctx.(*BatchUpdateStatementContext).fields, localctx.(*BatchUpdateStatementContext)._fieldIdentifier)
			{
				p.SetState(1464)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1465)

				var _x = p.Param()

				localctx.(*BatchUpdateStatementContext)._param = _x
			}
			localctx.(*BatchUpdateStatementContext).values = append(localctx.(*BatchUpdateStatementContext).values, localctx.(*BatchUpdateStatementContext)._param)

			p.SetState(1471)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	p.SetState(1476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1474)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1475)

			var _x = p.StrictIdentifier()

			localctx.(*BatchUpdateStatementContext).statName = _x
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// GetFileName returns the fileName rule contexts.
	GetFileName() IStrContext

	// GetId returns the id rule contexts.
	GetId() IStrContext

	// GetIds returns the ids rule contexts.
	GetIds() IStrContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// SetFileName sets the fileName rule contexts.
	SetFileName(IStrContext)

	// SetId sets the id rule contexts.
	SetId(IStrContext)

	// SetIds sets the ids rule contexts.
	SetIds(IStrContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
	fileName         IStrContext
	id               IStrContext
	ids              IStrContext
	statName         IStrictIdentifierContext
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *DeleteStatementContext) GetFileName() IStrContext { return s.fileName }

func (s *DeleteStatementContext) GetId() IStrContext { return s.id }

func (s *DeleteStatementContext) GetIds() IStrContext { return s.ids }

func (s *DeleteStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *DeleteStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) {
	s._indexIdentifier = v
}

func (s *DeleteStatementContext) SetFileName(v IStrContext) { s.fileName = v }

func (s *DeleteStatementContext) SetId(v IStrContext) { s.id = v }

func (s *DeleteStatementContext) SetIds(v IStrContext) { s.ids = v }

func (s *DeleteStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *DeleteStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *DeleteStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *DeleteStatementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDELETE, 0)
}

func (s *DeleteStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFROM, 0)
}

func (s *DeleteStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *DeleteStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *DeleteStatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *DeleteStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWHERE, 0)
}

func (s *DeleteStatementContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *DeleteStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *DeleteStatementContext) IDS_FILE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS_FILE, 0)
}

func (s *DeleteStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserID, 0)
}

func (s *DeleteStatementContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *DeleteStatementContext) IDS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS, 0)
}

func (s *DeleteStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *DeleteStatementContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDeleteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DeleteStatement() (localctx IDeleteStatementContext) {
	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, ElasticSQLParserRULE_deleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1478)
		p.Match(ElasticSQLParserDELETE)
	}
	{
		p.SetState(1479)
		p.Match(ElasticSQLParserFROM)
	}
	{
		p.SetState(1480)

		var _x = p.IndexIdentifier()

		localctx.(*DeleteStatementContext)._indexIdentifier = _x
	}
	localctx.(*DeleteStatementContext).indexes = append(localctx.(*DeleteStatementContext).indexes, localctx.(*DeleteStatementContext)._indexIdentifier)
	p.SetState(1485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1481)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1482)

			var _x = p.IndexIdentifier()

			localctx.(*DeleteStatementContext)._indexIdentifier = _x
		}
		localctx.(*DeleteStatementContext).indexes = append(localctx.(*DeleteStatementContext).indexes, localctx.(*DeleteStatementContext)._indexIdentifier)

		p.SetState(1487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1503)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1488)
			p.Match(ElasticSQLParserWHERE)
		}
		{
			p.SetState(1489)
			p.WhereExpression()
		}

	case 2:
		{
			p.SetState(1490)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1491)
			p.Match(ElasticSQLParserIDS_FILE)
		}
		{
			p.SetState(1492)

			var _x = p.Str()

			localctx.(*DeleteStatementContext).fileName = _x
		}

	case 3:
		{
			p.SetState(1493)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1494)
			p.Match(ElasticSQLParserID)
		}
		{
			p.SetState(1495)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1496)

			var _x = p.Str()

			localctx.(*DeleteStatementContext).id = _x
		}

	case 4:
		{
			p.SetState(1497)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1498)
			p.Match(ElasticSQLParserIDS)
		}
		{
			p.SetState(1499)
			p.Match(ElasticSQLParserT__4)
		}
		{
			p.SetState(1500)

			var _x = p.Str()

			localctx.(*DeleteStatementContext).ids = _x
		}
		{
			p.SetState(1501)
			p.Match(ElasticSQLParserT__5)
		}

	}
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1505)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1506)

			var _x = p.StrictIdentifier()

			localctx.(*DeleteStatementContext).statName = _x
		}

	}

	return localctx
}

// IDescStatementContext is an interface to support dynamic dispatch.
type IDescStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// IsDescStatementContext differentiates from other interfaces.
	IsDescStatementContext()
}

type DescStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
}

func NewEmptyDescStatementContext() *DescStatementContext {
	var p = new(DescStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_descStatement
	return p
}

func (*DescStatementContext) IsDescStatementContext() {}

func NewDescStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescStatementContext {
	var p = new(DescStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_descStatement

	return p
}

func (s *DescStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DescStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *DescStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) { s._indexIdentifier = v }

func (s *DescStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *DescStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *DescStatementContext) DESC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDESC, 0)
}

func (s *DescStatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDESCRIBE, 0)
}

func (s *DescStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *DescStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *DescStatementContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTEMPLATE, 0)
}

func (s *DescStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDescStatement(s)
	}
}

func (s *DescStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDescStatement(s)
	}
}

func (s *DescStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDescStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DescStatement() (localctx IDescStatementContext) {
	localctx = NewDescStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, ElasticSQLParserRULE_descStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1509)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserDESC || _la == ElasticSQLParserDESCRIBE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserTEMPLATE {
		{
			p.SetState(1510)
			p.Match(ElasticSQLParserTEMPLATE)
		}

	}
	{
		p.SetState(1513)

		var _x = p.IndexIdentifier()

		localctx.(*DescStatementContext)._indexIdentifier = _x
	}
	localctx.(*DescStatementContext).indexes = append(localctx.(*DescStatementContext).indexes, localctx.(*DescStatementContext)._indexIdentifier)
	p.SetState(1518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1514)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1515)

			var _x = p.IndexIdentifier()

			localctx.(*DescStatementContext)._indexIdentifier = _x
		}
		localctx.(*DescStatementContext).indexes = append(localctx.(*DescStatementContext).indexes, localctx.(*DescStatementContext)._indexIdentifier)

		p.SetState(1520)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAliasStatementContext is an interface to support dynamic dispatch.
type IAliasStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasStatementContext differentiates from other interfaces.
	IsAliasStatementContext()
}

type AliasStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasStatementContext() *AliasStatementContext {
	var p = new(AliasStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_aliasStatement
	return p
}

func (*AliasStatementContext) IsAliasStatementContext() {}

func NewAliasStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasStatementContext {
	var p = new(AliasStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_aliasStatement

	return p
}

func (s *AliasStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasStatementContext) CopyFrom(ctx *AliasStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AliasStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DeleteAliasContext struct {
	*AliasStatementContext
	op               antlr.Token
	aliasName        IIndexIdentifierContext
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
}

func NewDeleteAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DeleteAliasContext {
	var p = new(DeleteAliasContext)

	p.AliasStatementContext = NewEmptyAliasStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AliasStatementContext))

	return p
}

func (s *DeleteAliasContext) GetOp() antlr.Token { return s.op }

func (s *DeleteAliasContext) SetOp(v antlr.Token) { s.op = v }

func (s *DeleteAliasContext) GetAliasName() IIndexIdentifierContext { return s.aliasName }

func (s *DeleteAliasContext) Get_indexIdentifier() IIndexIdentifierContext { return s._indexIdentifier }

func (s *DeleteAliasContext) SetAliasName(v IIndexIdentifierContext) { s.aliasName = v }

func (s *DeleteAliasContext) Set_indexIdentifier(v IIndexIdentifierContext) { s._indexIdentifier = v }

func (s *DeleteAliasContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *DeleteAliasContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *DeleteAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteAliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALIAS, 0)
}

func (s *DeleteAliasContext) FROM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFROM, 0)
}

func (s *DeleteAliasContext) DELETE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDELETE, 0)
}

func (s *DeleteAliasContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *DeleteAliasContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *DeleteAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDeleteAlias(s)
	}
}

func (s *DeleteAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDeleteAlias(s)
	}
}

func (s *DeleteAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDeleteAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

type AddAliasContext struct {
	*AliasStatementContext
	op               antlr.Token
	aliasName        IIndexIdentifierContext
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
}

func NewAddAliasContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddAliasContext {
	var p = new(AddAliasContext)

	p.AliasStatementContext = NewEmptyAliasStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AliasStatementContext))

	return p
}

func (s *AddAliasContext) GetOp() antlr.Token { return s.op }

func (s *AddAliasContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddAliasContext) GetAliasName() IIndexIdentifierContext { return s.aliasName }

func (s *AddAliasContext) Get_indexIdentifier() IIndexIdentifierContext { return s._indexIdentifier }

func (s *AddAliasContext) SetAliasName(v IIndexIdentifierContext) { s.aliasName = v }

func (s *AddAliasContext) Set_indexIdentifier(v IIndexIdentifierContext) { s._indexIdentifier = v }

func (s *AddAliasContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *AddAliasContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *AddAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddAliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALIAS, 0)
}

func (s *AddAliasContext) TO() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTO, 0)
}

func (s *AddAliasContext) ADD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserADD, 0)
}

func (s *AddAliasContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *AddAliasContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *AddAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAddAlias(s)
	}
}

func (s *AddAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAddAlias(s)
	}
}

func (s *AddAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAddAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AliasStatement() (localctx IAliasStatementContext) {
	localctx = NewAliasStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, ElasticSQLParserRULE_aliasStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1545)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserADD:
		localctx = NewAddAliasContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1521)

			var _m = p.Match(ElasticSQLParserADD)

			localctx.(*AddAliasContext).op = _m
		}
		{
			p.SetState(1522)
			p.Match(ElasticSQLParserALIAS)
		}
		{
			p.SetState(1523)

			var _x = p.IndexIdentifier()

			localctx.(*AddAliasContext).aliasName = _x
		}
		{
			p.SetState(1524)
			p.Match(ElasticSQLParserTO)
		}
		{
			p.SetState(1525)

			var _x = p.IndexIdentifier()

			localctx.(*AddAliasContext)._indexIdentifier = _x
		}
		localctx.(*AddAliasContext).indexes = append(localctx.(*AddAliasContext).indexes, localctx.(*AddAliasContext)._indexIdentifier)
		p.SetState(1530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1526)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1527)

				var _x = p.IndexIdentifier()

				localctx.(*AddAliasContext)._indexIdentifier = _x
			}
			localctx.(*AddAliasContext).indexes = append(localctx.(*AddAliasContext).indexes, localctx.(*AddAliasContext)._indexIdentifier)

			p.SetState(1532)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case ElasticSQLParserDELETE:
		localctx = NewDeleteAliasContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1533)

			var _m = p.Match(ElasticSQLParserDELETE)

			localctx.(*DeleteAliasContext).op = _m
		}
		{
			p.SetState(1534)
			p.Match(ElasticSQLParserALIAS)
		}
		{
			p.SetState(1535)

			var _x = p.IndexIdentifier()

			localctx.(*DeleteAliasContext).aliasName = _x
		}
		{
			p.SetState(1536)
			p.Match(ElasticSQLParserFROM)
		}
		{
			p.SetState(1537)

			var _x = p.IndexIdentifier()

			localctx.(*DeleteAliasContext)._indexIdentifier = _x
		}
		localctx.(*DeleteAliasContext).indexes = append(localctx.(*DeleteAliasContext).indexes, localctx.(*DeleteAliasContext)._indexIdentifier)
		p.SetState(1542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1538)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1539)

				var _x = p.IndexIdentifier()

				localctx.(*DeleteAliasContext)._indexIdentifier = _x
			}
			localctx.(*DeleteAliasContext).indexes = append(localctx.(*DeleteAliasContext).indexes, localctx.(*DeleteAliasContext)._indexIdentifier)

			p.SetState(1544)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterStatementContext is an interface to support dynamic dispatch.
type IAlterStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_indexIdentifier returns the _indexIdentifier rule contexts.
	Get_indexIdentifier() IIndexIdentifierContext

	// Get_prop returns the _prop rule contexts.
	Get_prop() IPropContext

	// Set_indexIdentifier sets the _indexIdentifier rule contexts.
	Set_indexIdentifier(IIndexIdentifierContext)

	// Set_prop sets the _prop rule contexts.
	Set_prop(IPropContext)

	// GetIndexes returns the indexes rule context list.
	GetIndexes() []IIndexIdentifierContext

	// GetProps returns the props rule context list.
	GetProps() []IPropContext

	// SetIndexes sets the indexes rule context list.
	SetIndexes([]IIndexIdentifierContext)

	// SetProps sets the props rule context list.
	SetProps([]IPropContext)

	// IsAlterStatementContext differentiates from other interfaces.
	IsAlterStatementContext()
}

type AlterStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_indexIdentifier IIndexIdentifierContext
	indexes          []IIndexIdentifierContext
	_prop            IPropContext
	props            []IPropContext
}

func NewEmptyAlterStatementContext() *AlterStatementContext {
	var p = new(AlterStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_alterStatement
	return p
}

func (*AlterStatementContext) IsAlterStatementContext() {}

func NewAlterStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterStatementContext {
	var p = new(AlterStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_alterStatement

	return p
}

func (s *AlterStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterStatementContext) Get_indexIdentifier() IIndexIdentifierContext {
	return s._indexIdentifier
}

func (s *AlterStatementContext) Get_prop() IPropContext { return s._prop }

func (s *AlterStatementContext) Set_indexIdentifier(v IIndexIdentifierContext) {
	s._indexIdentifier = v
}

func (s *AlterStatementContext) Set_prop(v IPropContext) { s._prop = v }

func (s *AlterStatementContext) GetIndexes() []IIndexIdentifierContext { return s.indexes }

func (s *AlterStatementContext) GetProps() []IPropContext { return s.props }

func (s *AlterStatementContext) SetIndexes(v []IIndexIdentifierContext) { s.indexes = v }

func (s *AlterStatementContext) SetProps(v []IPropContext) { s.props = v }

func (s *AlterStatementContext) ALTER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALTER, 0)
}

func (s *AlterStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSET, 0)
}

func (s *AlterStatementContext) AllIndexIdentifier() []IIndexIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem())
	var tst = make([]IIndexIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexIdentifierContext)
		}
	}

	return tst
}

func (s *AlterStatementContext) IndexIdentifier(i int) IIndexIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexIdentifierContext)
}

func (s *AlterStatementContext) AllProp() []IPropContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropContext)(nil)).Elem())
	var tst = make([]IPropContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropContext)
		}
	}

	return tst
}

func (s *AlterStatementContext) Prop(i int) IPropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropContext)
}

func (s *AlterStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAlterStatement(s)
	}
}

func (s *AlterStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAlterStatement(s)
	}
}

func (s *AlterStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAlterStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AlterStatement() (localctx IAlterStatementContext) {
	localctx = NewAlterStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, ElasticSQLParserRULE_alterStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1547)
		p.Match(ElasticSQLParserALTER)
	}
	{
		p.SetState(1548)

		var _x = p.IndexIdentifier()

		localctx.(*AlterStatementContext)._indexIdentifier = _x
	}
	localctx.(*AlterStatementContext).indexes = append(localctx.(*AlterStatementContext).indexes, localctx.(*AlterStatementContext)._indexIdentifier)
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1549)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1550)

			var _x = p.IndexIdentifier()

			localctx.(*AlterStatementContext)._indexIdentifier = _x
		}
		localctx.(*AlterStatementContext).indexes = append(localctx.(*AlterStatementContext).indexes, localctx.(*AlterStatementContext)._indexIdentifier)

		p.SetState(1555)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1556)
		p.Match(ElasticSQLParserSET)
	}
	{
		p.SetState(1557)

		var _x = p.Prop()

		localctx.(*AlterStatementContext)._prop = _x
	}
	localctx.(*AlterStatementContext).props = append(localctx.(*AlterStatementContext).props, localctx.(*AlterStatementContext)._prop)
	p.SetState(1562)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1558)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1559)

			var _x = p.Prop()

			localctx.(*AlterStatementContext)._prop = _x
		}
		localctx.(*AlterStatementContext).props = append(localctx.(*AlterStatementContext).props, localctx.(*AlterStatementContext)._prop)

		p.SetState(1564)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IHive2StatementContext is an interface to support dynamic dispatch.
type IHive2StatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_QUOTASTR returns the _QUOTASTR token.
	Get_QUOTASTR() antlr.Token

	// Set_QUOTASTR sets the _QUOTASTR token.
	Set_QUOTASTR(antlr.Token)

	// GetSqls returns the sqls token list.
	GetSqls() []antlr.Token

	// SetSqls sets the sqls token list.
	SetSqls([]antlr.Token)

	// GetFile returns the file rule contexts.
	GetFile() IStrContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// SetFile sets the file rule contexts.
	SetFile(IStrContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// IsHive2StatementContext differentiates from other interfaces.
	IsHive2StatementContext()
}

type Hive2StatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	file      IStrContext
	_QUOTASTR antlr.Token
	sqls      []antlr.Token
	statName  IStrictIdentifierContext
}

func NewEmptyHive2StatementContext() *Hive2StatementContext {
	var p = new(Hive2StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_hive2Statement
	return p
}

func (*Hive2StatementContext) IsHive2StatementContext() {}

func NewHive2StatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hive2StatementContext {
	var p = new(Hive2StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_hive2Statement

	return p
}

func (s *Hive2StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *Hive2StatementContext) Get_QUOTASTR() antlr.Token { return s._QUOTASTR }

func (s *Hive2StatementContext) Set_QUOTASTR(v antlr.Token) { s._QUOTASTR = v }

func (s *Hive2StatementContext) GetSqls() []antlr.Token { return s.sqls }

func (s *Hive2StatementContext) SetSqls(v []antlr.Token) { s.sqls = v }

func (s *Hive2StatementContext) GetFile() IStrContext { return s.file }

func (s *Hive2StatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *Hive2StatementContext) SetFile(v IStrContext) { s.file = v }

func (s *Hive2StatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *Hive2StatementContext) HQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHQL, 0)
}

func (s *Hive2StatementContext) AllQUOTASTR() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserQUOTASTR)
}

func (s *Hive2StatementContext) QUOTASTR(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, i)
}

func (s *Hive2StatementContext) USING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSING, 0)
}

func (s *Hive2StatementContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *Hive2StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *Hive2StatementContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *Hive2StatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *Hive2StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hive2StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hive2StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterHive2Statement(s)
	}
}

func (s *Hive2StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitHive2Statement(s)
	}
}

func (s *Hive2StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitHive2Statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Hive2Statement() (localctx IHive2StatementContext) {
	localctx = NewHive2StatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, ElasticSQLParserRULE_hive2Statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1567)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserUSING {
		{
			p.SetState(1565)
			p.Match(ElasticSQLParserUSING)
		}
		{
			p.SetState(1566)

			var _x = p.Str()

			localctx.(*Hive2StatementContext).file = _x
		}

	}
	{
		p.SetState(1569)
		p.Match(ElasticSQLParserHQL)
	}
	{
		p.SetState(1570)

		var _m = p.Match(ElasticSQLParserQUOTASTR)

		localctx.(*Hive2StatementContext)._QUOTASTR = _m
	}
	localctx.(*Hive2StatementContext).sqls = append(localctx.(*Hive2StatementContext).sqls, localctx.(*Hive2StatementContext)._QUOTASTR)
	p.SetState(1575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__8 {
		{
			p.SetState(1571)
			p.Match(ElasticSQLParserT__8)
		}
		{
			p.SetState(1572)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*Hive2StatementContext)._QUOTASTR = _m
		}
		localctx.(*Hive2StatementContext).sqls = append(localctx.(*Hive2StatementContext).sqls, localctx.(*Hive2StatementContext)._QUOTASTR)

		p.SetState(1577)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1578)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1579)

			var _x = p.StrictIdentifier()

			localctx.(*Hive2StatementContext).statName = _x
		}

	}
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(1582)
			p.ExportStatement()
		}

	}

	return localctx
}

// IJdbcStatementContext is an interface to support dynamic dispatch.
type IJdbcStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetResourceType returns the resourceType token.
	GetResourceType() antlr.Token

	// GetUrl returns the url token.
	GetUrl() antlr.Token

	// GetUser returns the user token.
	GetUser() antlr.Token

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetResourceType sets the resourceType token.
	SetResourceType(antlr.Token)

	// SetUrl sets the url token.
	SetUrl(antlr.Token)

	// SetUser sets the user token.
	SetUser(antlr.Token)

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// Get_basicSQL returns the _basicSQL rule contexts.
	Get_basicSQL() IBasicSQLContext

	// Set_basicSQL sets the _basicSQL rule contexts.
	Set_basicSQL(IBasicSQLContext)

	// GetSubSQLs returns the subSQLs rule context list.
	GetSubSQLs() []IBasicSQLContext

	// SetSubSQLs sets the subSQLs rule context list.
	SetSubSQLs([]IBasicSQLContext)

	// IsJdbcStatementContext differentiates from other interfaces.
	IsJdbcStatementContext()
}

type JdbcStatementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	resourceType antlr.Token
	url          antlr.Token
	user         antlr.Token
	password     antlr.Token
	_basicSQL    IBasicSQLContext
	subSQLs      []IBasicSQLContext
}

func NewEmptyJdbcStatementContext() *JdbcStatementContext {
	var p = new(JdbcStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_jdbcStatement
	return p
}

func (*JdbcStatementContext) IsJdbcStatementContext() {}

func NewJdbcStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JdbcStatementContext {
	var p = new(JdbcStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_jdbcStatement

	return p
}

func (s *JdbcStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JdbcStatementContext) GetResourceType() antlr.Token { return s.resourceType }

func (s *JdbcStatementContext) GetUrl() antlr.Token { return s.url }

func (s *JdbcStatementContext) GetUser() antlr.Token { return s.user }

func (s *JdbcStatementContext) GetPassword() antlr.Token { return s.password }

func (s *JdbcStatementContext) SetResourceType(v antlr.Token) { s.resourceType = v }

func (s *JdbcStatementContext) SetUrl(v antlr.Token) { s.url = v }

func (s *JdbcStatementContext) SetUser(v antlr.Token) { s.user = v }

func (s *JdbcStatementContext) SetPassword(v antlr.Token) { s.password = v }

func (s *JdbcStatementContext) Get_basicSQL() IBasicSQLContext { return s._basicSQL }

func (s *JdbcStatementContext) Set_basicSQL(v IBasicSQLContext) { s._basicSQL = v }

func (s *JdbcStatementContext) GetSubSQLs() []IBasicSQLContext { return s.subSQLs }

func (s *JdbcStatementContext) SetSubSQLs(v []IBasicSQLContext) { s.subSQLs = v }

func (s *JdbcStatementContext) AllBasicSQL() []IBasicSQLContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBasicSQLContext)(nil)).Elem())
	var tst = make([]IBasicSQLContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBasicSQLContext)
		}
	}

	return tst
}

func (s *JdbcStatementContext) BasicSQL(i int) IBasicSQLContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicSQLContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBasicSQLContext)
}

func (s *JdbcStatementContext) CK() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCK, 0)
}

func (s *JdbcStatementContext) PQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPQL, 0)
}

func (s *JdbcStatementContext) MQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMQL, 0)
}

func (s *JdbcStatementContext) URL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserURL, 0)
}

func (s *JdbcStatementContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserEQ)
}

func (s *JdbcStatementContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, i)
}

func (s *JdbcStatementContext) AllQUOTASTR() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserQUOTASTR)
}

func (s *JdbcStatementContext) QUOTASTR(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, i)
}

func (s *JdbcStatementContext) USER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSER, 0)
}

func (s *JdbcStatementContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPASSWORD, 0)
}

func (s *JdbcStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JdbcStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JdbcStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterJdbcStatement(s)
	}
}

func (s *JdbcStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitJdbcStatement(s)
	}
}

func (s *JdbcStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitJdbcStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) JdbcStatement() (localctx IJdbcStatementContext) {
	localctx = NewJdbcStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, ElasticSQLParserRULE_jdbcStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1585)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JdbcStatementContext).resourceType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(ElasticSQLParserCK-36))|(1<<(ElasticSQLParserPQL-36))|(1<<(ElasticSQLParserMQL-36)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JdbcStatementContext).resourceType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1601)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserT__1 {
		{
			p.SetState(1586)
			p.Match(ElasticSQLParserT__1)
		}
		{
			p.SetState(1587)
			p.Match(ElasticSQLParserURL)
		}
		{
			p.SetState(1588)
			p.Match(ElasticSQLParserEQ)
		}
		{
			p.SetState(1589)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*JdbcStatementContext).url = _m
		}
		p.SetState(1593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserUSER {
			{
				p.SetState(1590)
				p.Match(ElasticSQLParserUSER)
			}
			{
				p.SetState(1591)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1592)

				var _m = p.Match(ElasticSQLParserQUOTASTR)

				localctx.(*JdbcStatementContext).user = _m
			}

		}
		p.SetState(1598)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserPASSWORD {
			{
				p.SetState(1595)
				p.Match(ElasticSQLParserPASSWORD)
			}
			{
				p.SetState(1596)
				p.Match(ElasticSQLParserEQ)
			}
			{
				p.SetState(1597)

				var _m = p.Match(ElasticSQLParserQUOTASTR)

				localctx.(*JdbcStatementContext).password = _m
			}

		}
		{
			p.SetState(1600)
			p.Match(ElasticSQLParserT__2)
		}

	}
	{
		p.SetState(1603)

		var _x = p.BasicSQL()

		localctx.(*JdbcStatementContext)._basicSQL = _x
	}
	localctx.(*JdbcStatementContext).subSQLs = append(localctx.(*JdbcStatementContext).subSQLs, localctx.(*JdbcStatementContext)._basicSQL)
	p.SetState(1608)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__8 {
		{
			p.SetState(1604)
			p.Match(ElasticSQLParserT__8)
		}
		{
			p.SetState(1605)

			var _x = p.BasicSQL()

			localctx.(*JdbcStatementContext)._basicSQL = _x
		}
		localctx.(*JdbcStatementContext).subSQLs = append(localctx.(*JdbcStatementContext).subSQLs, localctx.(*JdbcStatementContext)._basicSQL)

		p.SetState(1610)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBasicSQLContext is an interface to support dynamic dispatch.
type IBasicSQLContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSql returns the sql token.
	GetSql() antlr.Token

	// SetSql sets the sql token.
	SetSql(antlr.Token)

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// IsBasicSQLContext differentiates from other interfaces.
	IsBasicSQLContext()
}

type BasicSQLContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	sql      antlr.Token
	statName IStrictIdentifierContext
}

func NewEmptyBasicSQLContext() *BasicSQLContext {
	var p = new(BasicSQLContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_basicSQL
	return p
}

func (*BasicSQLContext) IsBasicSQLContext() {}

func NewBasicSQLContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicSQLContext {
	var p = new(BasicSQLContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_basicSQL

	return p
}

func (s *BasicSQLContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicSQLContext) GetSql() antlr.Token { return s.sql }

func (s *BasicSQLContext) SetSql(v antlr.Token) { s.sql = v }

func (s *BasicSQLContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *BasicSQLContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *BasicSQLContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *BasicSQLContext) MAP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, 0)
}

func (s *BasicSQLContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *BasicSQLContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *BasicSQLContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicSQLContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicSQLContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBasicSQL(s)
	}
}

func (s *BasicSQLContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBasicSQL(s)
	}
}

func (s *BasicSQLContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBasicSQL(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BasicSQL() (localctx IBasicSQLContext) {
	localctx = NewBasicSQLContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, ElasticSQLParserRULE_basicSQL)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1611)

		var _m = p.Match(ElasticSQLParserQUOTASTR)

		localctx.(*BasicSQLContext).sql = _m
	}
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1612)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1613)

			var _x = p.StrictIdentifier()

			localctx.(*BasicSQLContext).statName = _x
		}

	}
	p.SetState(1617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserEXPORT {
		{
			p.SetState(1616)
			p.ExportStatement()
		}

	}

	return localctx
}

// IFileLoadStatementContext is an interface to support dynamic dispatch.
type IFileLoadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDType returns the dType token.
	GetDType() antlr.Token

	// GetSep returns the sep token.
	GetSep() antlr.Token

	// GetOffset returns the offset token.
	GetOffset() antlr.Token

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// SetDType sets the dType token.
	SetDType(antlr.Token)

	// SetSep sets the sep token.
	SetSep(antlr.Token)

	// SetOffset sets the offset token.
	SetOffset(antlr.Token)

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// Get_fieldDefine returns the _fieldDefine rule contexts.
	Get_fieldDefine() IFieldDefineContext

	// GetFilePath returns the filePath rule contexts.
	GetFilePath() IStrContext

	// GetStatName returns the statName rule contexts.
	GetStatName() IStrictIdentifierContext

	// Set_fieldDefine sets the _fieldDefine rule contexts.
	Set_fieldDefine(IFieldDefineContext)

	// SetFilePath sets the filePath rule contexts.
	SetFilePath(IStrContext)

	// SetStatName sets the statName rule contexts.
	SetStatName(IStrictIdentifierContext)

	// GetFields returns the fields rule context list.
	GetFields() []IFieldDefineContext

	// SetFields sets the fields rule context list.
	SetFields([]IFieldDefineContext)

	// IsFileLoadStatementContext differentiates from other interfaces.
	IsFileLoadStatementContext()
}

type FileLoadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	_fieldDefine IFieldDefineContext
	fields       []IFieldDefineContext
	dType        antlr.Token
	filePath     IStrContext
	sep          antlr.Token
	offset       antlr.Token
	limit        antlr.Token
	statName     IStrictIdentifierContext
}

func NewEmptyFileLoadStatementContext() *FileLoadStatementContext {
	var p = new(FileLoadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fileLoadStatement
	return p
}

func (*FileLoadStatementContext) IsFileLoadStatementContext() {}

func NewFileLoadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileLoadStatementContext {
	var p = new(FileLoadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fileLoadStatement

	return p
}

func (s *FileLoadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FileLoadStatementContext) GetDType() antlr.Token { return s.dType }

func (s *FileLoadStatementContext) GetSep() antlr.Token { return s.sep }

func (s *FileLoadStatementContext) GetOffset() antlr.Token { return s.offset }

func (s *FileLoadStatementContext) GetLimit() antlr.Token { return s.limit }

func (s *FileLoadStatementContext) SetDType(v antlr.Token) { s.dType = v }

func (s *FileLoadStatementContext) SetSep(v antlr.Token) { s.sep = v }

func (s *FileLoadStatementContext) SetOffset(v antlr.Token) { s.offset = v }

func (s *FileLoadStatementContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *FileLoadStatementContext) Get_fieldDefine() IFieldDefineContext { return s._fieldDefine }

func (s *FileLoadStatementContext) GetFilePath() IStrContext { return s.filePath }

func (s *FileLoadStatementContext) GetStatName() IStrictIdentifierContext { return s.statName }

func (s *FileLoadStatementContext) Set_fieldDefine(v IFieldDefineContext) { s._fieldDefine = v }

func (s *FileLoadStatementContext) SetFilePath(v IStrContext) { s.filePath = v }

func (s *FileLoadStatementContext) SetStatName(v IStrictIdentifierContext) { s.statName = v }

func (s *FileLoadStatementContext) GetFields() []IFieldDefineContext { return s.fields }

func (s *FileLoadStatementContext) SetFields(v []IFieldDefineContext) { s.fields = v }

func (s *FileLoadStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOAD, 0)
}

func (s *FileLoadStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFROM, 0)
}

func (s *FileLoadStatementContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *FileLoadStatementContext) DATA() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATA, 0)
}

func (s *FileLoadStatementContext) JSON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserJSON, 0)
}

func (s *FileLoadStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALL, 0)
}

func (s *FileLoadStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOCAL, 0)
}

func (s *FileLoadStatementContext) SEPARATED() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEPARATED, 0)
}

func (s *FileLoadStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *FileLoadStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIMIT, 0)
}

func (s *FileLoadStatementContext) AllMAP() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserMAP)
}

func (s *FileLoadStatementContext) MAP(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAP, i)
}

func (s *FileLoadStatementContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *FileLoadStatementContext) AllLONG() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserLONG)
}

func (s *FileLoadStatementContext) LONG(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, i)
}

func (s *FileLoadStatementContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *FileLoadStatementContext) AllFieldDefine() []IFieldDefineContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldDefineContext)(nil)).Elem())
	var tst = make([]IFieldDefineContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldDefineContext)
		}
	}

	return tst
}

func (s *FileLoadStatementContext) FieldDefine(i int) IFieldDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDefineContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldDefineContext)
}

func (s *FileLoadStatementContext) LIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIST, 0)
}

func (s *FileLoadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileLoadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileLoadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFileLoadStatement(s)
	}
}

func (s *FileLoadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFileLoadStatement(s)
	}
}

func (s *FileLoadStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFileLoadStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FileLoadStatement() (localctx IFileLoadStatementContext) {
	localctx = NewFileLoadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, ElasticSQLParserRULE_fileLoadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1619)
		p.Match(ElasticSQLParserLOAD)
	}
	p.SetState(1621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserALL {
		{
			p.SetState(1620)
			p.Match(ElasticSQLParserALL)
		}

	}
	p.SetState(1640)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserDATA:
		{
			p.SetState(1623)
			p.Match(ElasticSQLParserDATA)
		}
		{
			p.SetState(1624)
			p.Match(ElasticSQLParserT__4)
		}
		p.SetState(1626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ElasticSQLParserINNER_HIT)|(1<<ElasticSQLParserRESCORE)|(1<<ElasticSQLParserWINDOWS)|(1<<ElasticSQLParserCOLLAPSE)|(1<<ElasticSQLParserSCORE))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(ElasticSQLParserSQL-33))|(1<<(ElasticSQLParserSTRUCT-33))|(1<<(ElasticSQLParserCK-33))|(1<<(ElasticSQLParserURL-33))|(1<<(ElasticSQLParserPASSWORD-33))|(1<<(ElasticSQLParserUSER-33))|(1<<(ElasticSQLParserNUMBER-33))|(1<<(ElasticSQLParserSTRING-33))|(1<<(ElasticSQLParserGROUP-33))|(1<<(ElasticSQLParserTEMPLATE-33))|(1<<(ElasticSQLParserALL-33))|(1<<(ElasticSQLParserNOT-33))|(1<<(ElasticSQLParserINTO-33))|(1<<(ElasticSQLParserTO-33))|(1<<(ElasticSQLParserEXCLUDE-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(ElasticSQLParserINCLUDE-65))|(1<<(ElasticSQLParserID-65))|(1<<(ElasticSQLParserSLICE-65))|(1<<(ElasticSQLParserJSON-65))|(1<<(ElasticSQLParserCSV-65))|(1<<(ElasticSQLParserEXCEL-65))|(1<<(ElasticSQLParserSEP-65))|(1<<(ElasticSQLParserSCRIPT-65))|(1<<(ElasticSQLParserLANG-65))|(1<<(ElasticSQLParserRETURN-65))|(1<<(ElasticSQLParserPK-65))|(1<<(ElasticSQLParserUUID-65))|(1<<(ElasticSQLParserMEM-65))|(1<<(ElasticSQLParserRIGHT-65))|(1<<(ElasticSQLParserLEFT-65))|(1<<(ElasticSQLParserALIAS-65))|(1<<(ElasticSQLParserRLIKE-65))|(1<<(ElasticSQLParserLIKE-65))|(1<<(ElasticSQLParserIN-65))|(1<<(ElasticSQLParserOUT-65)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(ElasticSQLParserEXIST-99))|(1<<(ElasticSQLParserMISS-99))|(1<<(ElasticSQLParserQUERY_STRING-99))|(1<<(ElasticSQLParserMATCH-99))|(1<<(ElasticSQLParserMULTI_MATCH-99))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-99))|(1<<(ElasticSQLParserMATCH_PHRASE-99))|(1<<(ElasticSQLParserKNN-99))|(1<<(ElasticSQLParserHAS_CHILD-99))|(1<<(ElasticSQLParserHAS_PARENT-99))|(1<<(ElasticSQLParserCOUNT-99))|(1<<(ElasticSQLParserMAX-99))|(1<<(ElasticSQLParserMIN-99))|(1<<(ElasticSQLParserAVG-99))|(1<<(ElasticSQLParserSUM-99))|(1<<(ElasticSQLParserDISTINCT-99))|(1<<(ElasticSQLParserVALUE_COUNT-99))|(1<<(ElasticSQLParserPERCENTILE_RANKS-99))|(1<<(ElasticSQLParserPERCENTILES-99))|(1<<(ElasticSQLParserPERCENT-99))|(1<<(ElasticSQLParserDISTINCT_PERCENT-99))|(1<<(ElasticSQLParserTOP_HITS-99))|(1<<(ElasticSQLParserMATH-99))|(1<<(ElasticSQLParserRANGE-99))|(1<<(ElasticSQLParserINTERVAL-99))|(1<<(ElasticSQLParserFORMAT-99)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(ElasticSQLParserKEYED-131))|(1<<(ElasticSQLParserSIZE-131))|(1<<(ElasticSQLParserMISSING-131))|(1<<(ElasticSQLParserNULL-131))|(1<<(ElasticSQLParserEND-131))|(1<<(ElasticSQLParserSAMPLE-131))|(1<<(ElasticSQLParserIDS-131))|(1<<(ElasticSQLParserIDS_FILE-131))|(1<<(ElasticSQLParserPUT-131))|(1<<(ElasticSQLParserADD-131))|(1<<(ElasticSQLParserDATETIME_T-131))|(1<<(ElasticSQLParserTIMESTAMP_T-131))|(1<<(ElasticSQLParserDATE_T-131))|(1<<(ElasticSQLParserTIME_T-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(ElasticSQLParserLOCAL-163))|(1<<(ElasticSQLParserDATA-163))|(1<<(ElasticSQLParserLIST-163))|(1<<(ElasticSQLParserSEPARATED-163))|(1<<(ElasticSQLParserANALYZE-163))|(1<<(ElasticSQLParserNLP-163))|(1<<(ElasticSQLParserENABLE-163))|(1<<(ElasticSQLParserSEGMENT-163))|(1<<(ElasticSQLParserNAME-163))|(1<<(ElasticSQLParserORG-163))|(1<<(ElasticSQLParserLOC-163))|(1<<(ElasticSQLParserTIME-163))|(1<<(ElasticSQLParserMUL-163))|(1<<(ElasticSQLParserIDENTIFIER-163)))) != 0) {
			{
				p.SetState(1625)

				var _x = p.FieldDefine()

				localctx.(*FileLoadStatementContext)._fieldDefine = _x
			}
			localctx.(*FileLoadStatementContext).fields = append(localctx.(*FileLoadStatementContext).fields, localctx.(*FileLoadStatementContext)._fieldDefine)

		}
		p.SetState(1632)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ElasticSQLParserT__3 {
			{
				p.SetState(1628)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1629)

				var _x = p.FieldDefine()

				localctx.(*FileLoadStatementContext)._fieldDefine = _x
			}
			localctx.(*FileLoadStatementContext).fields = append(localctx.(*FileLoadStatementContext).fields, localctx.(*FileLoadStatementContext)._fieldDefine)

			p.SetState(1634)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1635)
			p.Match(ElasticSQLParserT__5)
		}

	case ElasticSQLParserJSON:
		{
			p.SetState(1636)
			p.Match(ElasticSQLParserJSON)
		}
		p.SetState(1638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserMAP || _la == ElasticSQLParserLIST {
			{
				p.SetState(1637)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*FileLoadStatementContext).dType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == ElasticSQLParserMAP || _la == ElasticSQLParserLIST) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*FileLoadStatementContext).dType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1642)
		p.Match(ElasticSQLParserFROM)
	}
	p.SetState(1644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserLOCAL {
		{
			p.SetState(1643)
			p.Match(ElasticSQLParserLOCAL)
		}

	}
	{
		p.SetState(1646)

		var _x = p.Str()

		localctx.(*FileLoadStatementContext).filePath = _x
	}
	p.SetState(1650)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserSEPARATED {
		{
			p.SetState(1647)
			p.Match(ElasticSQLParserSEPARATED)
		}
		{
			p.SetState(1648)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1649)

			var _m = p.Match(ElasticSQLParserQUOTASTR)

			localctx.(*FileLoadStatementContext).sep = _m
		}

	}
	p.SetState(1658)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserLIMIT {
		{
			p.SetState(1652)
			p.Match(ElasticSQLParserLIMIT)
		}
		p.SetState(1655)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1653)

				var _m = p.Match(ElasticSQLParserLONG)

				localctx.(*FileLoadStatementContext).offset = _m
			}
			{
				p.SetState(1654)
				p.Match(ElasticSQLParserT__3)
			}

		}
		{
			p.SetState(1657)

			var _m = p.Match(ElasticSQLParserLONG)

			localctx.(*FileLoadStatementContext).limit = _m
		}

	}
	p.SetState(1662)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserMAP {
		{
			p.SetState(1660)
			p.Match(ElasticSQLParserMAP)
		}
		{
			p.SetState(1661)

			var _x = p.StrictIdentifier()

			localctx.(*FileLoadStatementContext).statName = _x
		}

	}

	return localctx
}

// IFieldDefineContext is an interface to support dynamic dispatch.
type IFieldDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFieldName returns the fieldName rule contexts.
	GetFieldName() IFieldIdentifierContext

	// GetFieldType returns the fieldType rule contexts.
	GetFieldType() IDataTypeContext

	// SetFieldName sets the fieldName rule contexts.
	SetFieldName(IFieldIdentifierContext)

	// SetFieldType sets the fieldType rule contexts.
	SetFieldType(IDataTypeContext)

	// IsFieldDefineContext differentiates from other interfaces.
	IsFieldDefineContext()
}

type FieldDefineContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	fieldName IFieldIdentifierContext
	fieldType IDataTypeContext
}

func NewEmptyFieldDefineContext() *FieldDefineContext {
	var p = new(FieldDefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fieldDefine
	return p
}

func (*FieldDefineContext) IsFieldDefineContext() {}

func NewFieldDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDefineContext {
	var p = new(FieldDefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fieldDefine

	return p
}

func (s *FieldDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDefineContext) GetFieldName() IFieldIdentifierContext { return s.fieldName }

func (s *FieldDefineContext) GetFieldType() IDataTypeContext { return s.fieldType }

func (s *FieldDefineContext) SetFieldName(v IFieldIdentifierContext) { s.fieldName = v }

func (s *FieldDefineContext) SetFieldType(v IDataTypeContext) { s.fieldType = v }

func (s *FieldDefineContext) FieldIdentifier() IFieldIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldIdentifierContext)
}

func (s *FieldDefineContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *FieldDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDefineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFieldDefine(s)
	}
}

func (s *FieldDefineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFieldDefine(s)
	}
}

func (s *FieldDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFieldDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FieldDefine() (localctx IFieldDefineContext) {
	localctx = NewFieldDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, ElasticSQLParserRULE_fieldDefine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)

		var _x = p.FieldIdentifier()

		localctx.(*FieldDefineContext).fieldName = _x
	}
	p.SetState(1666)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-153)&-(0x1f+1)) == 0 && ((1<<uint((_la-153)))&((1<<(ElasticSQLParserBOOLEAN_T-153))|(1<<(ElasticSQLParserLONG_T-153))|(1<<(ElasticSQLParserSTRING_T-153))|(1<<(ElasticSQLParserDOUBLE_T-153))|(1<<(ElasticSQLParserINTEGER_T-153))|(1<<(ElasticSQLParserDATETIME_T-153))|(1<<(ElasticSQLParserTIMESTAMP_T-153))|(1<<(ElasticSQLParserDATE_T-153))|(1<<(ElasticSQLParserTIME_T-153))|(1<<(ElasticSQLParserFLOAT_T-153)))) != 0 {
		{
			p.SetState(1665)

			var _x = p.DataType()

			localctx.(*FieldDefineContext).fieldType = _x
		}

	}

	return localctx
}

// IAnalyzeStatementContext is an interface to support dynamic dispatch.
type IAnalyzeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetContent returns the content token.
	GetContent() antlr.Token

	// SetContent sets the content token.
	SetContent(antlr.Token)

	// GetAnalyzer returns the analyzer rule contexts.
	GetAnalyzer() IStrContext

	// GetIndexAnalyzer returns the indexAnalyzer rule contexts.
	GetIndexAnalyzer() IStrContext

	// SetAnalyzer sets the analyzer rule contexts.
	SetAnalyzer(IStrContext)

	// SetIndexAnalyzer sets the indexAnalyzer rule contexts.
	SetIndexAnalyzer(IStrContext)

	// IsAnalyzeStatementContext differentiates from other interfaces.
	IsAnalyzeStatementContext()
}

type AnalyzeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	content       antlr.Token
	analyzer      IStrContext
	indexAnalyzer IStrContext
}

func NewEmptyAnalyzeStatementContext() *AnalyzeStatementContext {
	var p = new(AnalyzeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_analyzeStatement
	return p
}

func (*AnalyzeStatementContext) IsAnalyzeStatementContext() {}

func NewAnalyzeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalyzeStatementContext {
	var p = new(AnalyzeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_analyzeStatement

	return p
}

func (s *AnalyzeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalyzeStatementContext) GetContent() antlr.Token { return s.content }

func (s *AnalyzeStatementContext) SetContent(v antlr.Token) { s.content = v }

func (s *AnalyzeStatementContext) GetAnalyzer() IStrContext { return s.analyzer }

func (s *AnalyzeStatementContext) GetIndexAnalyzer() IStrContext { return s.indexAnalyzer }

func (s *AnalyzeStatementContext) SetAnalyzer(v IStrContext) { s.analyzer = v }

func (s *AnalyzeStatementContext) SetIndexAnalyzer(v IStrContext) { s.indexAnalyzer = v }

func (s *AnalyzeStatementContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserANALYZE, 0)
}

func (s *AnalyzeStatementContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *AnalyzeStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBY, 0)
}

func (s *AnalyzeStatementContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *AnalyzeStatementContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *AnalyzeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalyzeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalyzeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAnalyzeStatement(s)
	}
}

func (s *AnalyzeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAnalyzeStatement(s)
	}
}

func (s *AnalyzeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAnalyzeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AnalyzeStatement() (localctx IAnalyzeStatementContext) {
	localctx = NewAnalyzeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, ElasticSQLParserRULE_analyzeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)
		p.Match(ElasticSQLParserANALYZE)
	}
	{
		p.SetState(1669)

		var _m = p.Match(ElasticSQLParserQUOTASTR)

		localctx.(*AnalyzeStatementContext).content = _m
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserBY {
		{
			p.SetState(1670)
			p.Match(ElasticSQLParserBY)
		}
		{
			p.SetState(1671)

			var _x = p.Str()

			localctx.(*AnalyzeStatementContext).analyzer = _x
		}
		p.SetState(1674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ElasticSQLParserT__3 {
			{
				p.SetState(1672)
				p.Match(ElasticSQLParserT__3)
			}
			{
				p.SetState(1673)

				var _x = p.Str()

				localctx.(*AnalyzeStatementContext).indexAnalyzer = _x
			}

		}

	}

	return localctx
}

// IHanLPStatementContext is an interface to support dynamic dispatch.
type IHanLPStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFuncName returns the funcName rule contexts.
	GetFuncName() INlpFuncContext

	// GetObj returns the obj rule contexts.
	GetObj() IStrContext

	// Get_str returns the _str rule contexts.
	Get_str() IStrContext

	// SetFuncName sets the funcName rule contexts.
	SetFuncName(INlpFuncContext)

	// SetObj sets the obj rule contexts.
	SetObj(IStrContext)

	// Set_str sets the _str rule contexts.
	Set_str(IStrContext)

	// GetEnables returns the enables rule context list.
	GetEnables() []IStrContext

	// SetEnables sets the enables rule context list.
	SetEnables([]IStrContext)

	// IsHanLPStatementContext differentiates from other interfaces.
	IsHanLPStatementContext()
}

type HanLPStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	funcName INlpFuncContext
	obj      IStrContext
	_str     IStrContext
	enables  []IStrContext
}

func NewEmptyHanLPStatementContext() *HanLPStatementContext {
	var p = new(HanLPStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_hanLPStatement
	return p
}

func (*HanLPStatementContext) IsHanLPStatementContext() {}

func NewHanLPStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HanLPStatementContext {
	var p = new(HanLPStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_hanLPStatement

	return p
}

func (s *HanLPStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HanLPStatementContext) GetFuncName() INlpFuncContext { return s.funcName }

func (s *HanLPStatementContext) GetObj() IStrContext { return s.obj }

func (s *HanLPStatementContext) Get_str() IStrContext { return s._str }

func (s *HanLPStatementContext) SetFuncName(v INlpFuncContext) { s.funcName = v }

func (s *HanLPStatementContext) SetObj(v IStrContext) { s.obj = v }

func (s *HanLPStatementContext) Set_str(v IStrContext) { s._str = v }

func (s *HanLPStatementContext) GetEnables() []IStrContext { return s.enables }

func (s *HanLPStatementContext) SetEnables(v []IStrContext) { s.enables = v }

func (s *HanLPStatementContext) NLP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNLP, 0)
}

func (s *HanLPStatementContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserENABLE, 0)
}

func (s *HanLPStatementContext) NlpFunc() INlpFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INlpFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INlpFuncContext)
}

func (s *HanLPStatementContext) AllStr() []IStrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrContext)(nil)).Elem())
	var tst = make([]IStrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrContext)
		}
	}

	return tst
}

func (s *HanLPStatementContext) Str(i int) IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *HanLPStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HanLPStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HanLPStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterHanLPStatement(s)
	}
}

func (s *HanLPStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitHanLPStatement(s)
	}
}

func (s *HanLPStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitHanLPStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) HanLPStatement() (localctx IHanLPStatementContext) {
	localctx = NewHanLPStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, ElasticSQLParserRULE_hanLPStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1678)
		p.Match(ElasticSQLParserNLP)
	}
	{
		p.SetState(1679)

		var _x = p.NlpFunc()

		localctx.(*HanLPStatementContext).funcName = _x
	}
	{
		p.SetState(1680)

		var _x = p.Str()

		localctx.(*HanLPStatementContext).obj = _x
	}
	{
		p.SetState(1681)
		p.Match(ElasticSQLParserENABLE)
	}
	{
		p.SetState(1682)
		p.Match(ElasticSQLParserT__4)
	}
	{
		p.SetState(1683)

		var _x = p.Str()

		localctx.(*HanLPStatementContext)._str = _x
	}
	localctx.(*HanLPStatementContext).enables = append(localctx.(*HanLPStatementContext).enables, localctx.(*HanLPStatementContext)._str)
	p.SetState(1688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserT__3 {
		{
			p.SetState(1684)
			p.Match(ElasticSQLParserT__3)
		}
		{
			p.SetState(1685)

			var _x = p.Str()

			localctx.(*HanLPStatementContext)._str = _x
		}
		localctx.(*HanLPStatementContext).enables = append(localctx.(*HanLPStatementContext).enables, localctx.(*HanLPStatementContext)._str)

		p.SetState(1690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1691)
		p.Match(ElasticSQLParserT__5)
	}

	return localctx
}

// INlpFuncContext is an interface to support dynamic dispatch.
type INlpFuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNlpFuncContext differentiates from other interfaces.
	IsNlpFuncContext()
}

type NlpFuncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNlpFuncContext() *NlpFuncContext {
	var p = new(NlpFuncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_nlpFunc
	return p
}

func (*NlpFuncContext) IsNlpFuncContext() {}

func NewNlpFuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NlpFuncContext {
	var p = new(NlpFuncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_nlpFunc

	return p
}

func (s *NlpFuncContext) GetParser() antlr.Parser { return s.parser }

func (s *NlpFuncContext) SEGMENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEGMENT, 0)
}

func (s *NlpFuncContext) NAME() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNAME, 0)
}

func (s *NlpFuncContext) ORG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORG, 0)
}

func (s *NlpFuncContext) LOC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOC, 0)
}

func (s *NlpFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NlpFuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NlpFuncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterNlpFunc(s)
	}
}

func (s *NlpFuncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitNlpFunc(s)
	}
}

func (s *NlpFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitNlpFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) NlpFunc() (localctx INlpFuncContext) {
	localctx = NewNlpFuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, ElasticSQLParserRULE_nlpFunc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1693)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-171)&-(0x1f+1)) == 0 && ((1<<uint((_la-171)))&((1<<(ElasticSQLParserSEGMENT-171))|(1<<(ElasticSQLParserNAME-171))|(1<<(ElasticSQLParserORG-171))|(1<<(ElasticSQLParserLOC-171)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDataTypeContext is an interface to support dynamic dispatch.
type IDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeContext differentiates from other interfaces.
	IsDataTypeContext()
}

type DataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeContext() *DataTypeContext {
	var p = new(DataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_dataType
	return p
}

func (*DataTypeContext) IsDataTypeContext() {}

func NewDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeContext {
	var p = new(DataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_dataType

	return p
}

func (s *DataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeContext) BOOLEAN_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserBOOLEAN_T, 0)
}

func (s *DataTypeContext) STRING_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTRING_T, 0)
}

func (s *DataTypeContext) LONG_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG_T, 0)
}

func (s *DataTypeContext) DOUBLE_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOUBLE_T, 0)
}

func (s *DataTypeContext) FLOAT_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFLOAT_T, 0)
}

func (s *DataTypeContext) INTEGER_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTEGER_T, 0)
}

func (s *DataTypeContext) DATE_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATE_T, 0)
}

func (s *DataTypeContext) TIME_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIME_T, 0)
}

func (s *DataTypeContext) DATETIME_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATETIME_T, 0)
}

func (s *DataTypeContext) TIMESTAMP_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIMESTAMP_T, 0)
}

func (s *DataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterDataType(s)
	}
}

func (s *DataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitDataType(s)
	}
}

func (s *DataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) DataType() (localctx IDataTypeContext) {
	localctx = NewDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, ElasticSQLParserRULE_dataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1695)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-153)&-(0x1f+1)) == 0 && ((1<<uint((_la-153)))&((1<<(ElasticSQLParserBOOLEAN_T-153))|(1<<(ElasticSQLParserLONG_T-153))|(1<<(ElasticSQLParserSTRING_T-153))|(1<<(ElasticSQLParserDOUBLE_T-153))|(1<<(ElasticSQLParserINTEGER_T-153))|(1<<(ElasticSQLParserDATETIME_T-153))|(1<<(ElasticSQLParserTIMESTAMP_T-153))|(1<<(ElasticSQLParserDATE_T-153))|(1<<(ElasticSQLParserTIME_T-153))|(1<<(ElasticSQLParserFLOAT_T-153)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) LT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLT, 0)
}

func (s *ComparisonOperatorContext) LE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLE, 0)
}

func (s *ComparisonOperatorContext) GT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGT, 0)
}

func (s *ComparisonOperatorContext) GE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGE, 0)
}

func (s *ComparisonOperatorContext) NE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNE, 0)
}

func (s *ComparisonOperatorContext) EQ() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEQ, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitComparisonOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, ElasticSQLParserRULE_comparisonOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1697)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-183)&-(0x1f+1)) == 0 && ((1<<uint((_la-183)))&((1<<(ElasticSQLParserEQ-183))|(1<<(ElasticSQLParserNE-183))|(1<<(ElasticSQLParserLT-183))|(1<<(ElasticSQLParserLE-183))|(1<<(ElasticSQLParserGT-183))|(1<<(ElasticSQLParserGE-183)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPathIdentifierContext is an interface to support dynamic dispatch.
type IPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPathIdentifierContext differentiates from other interfaces.
	IsPathIdentifierContext()
}

type PathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathIdentifierContext() *PathIdentifierContext {
	var p = new(PathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_pathIdentifier
	return p
}

func (*PathIdentifierContext) IsPathIdentifierContext() {}

func NewPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathIdentifierContext {
	var p = new(PathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_pathIdentifier

	return p
}

func (s *PathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PathIdentifierContext) AllExportField() []IExportFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExportFieldContext)(nil)).Elem())
	var tst = make([]IExportFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExportFieldContext)
		}
	}

	return tst
}

func (s *PathIdentifierContext) ExportField(i int) IExportFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExportFieldContext)
}

func (s *PathIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDOT)
}

func (s *PathIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOT, i)
}

func (s *PathIdentifierContext) AllGT() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserGT)
}

func (s *PathIdentifierContext) GT(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGT, i)
}

func (s *PathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterPathIdentifier(s)
	}
}

func (s *PathIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitPathIdentifier(s)
	}
}

func (s *PathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) PathIdentifier() (localctx IPathIdentifierContext) {
	localctx = NewPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, ElasticSQLParserRULE_pathIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1699)
		p.ExportField()
	}
	p.SetState(1704)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ElasticSQLParserDOT || _la == ElasticSQLParserGT {
		{
			p.SetState(1700)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ElasticSQLParserDOT || _la == ElasticSQLParserGT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1701)
			p.ExportField()
		}

		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFieldIdentifierContext is an interface to support dynamic dispatch.
type IFieldIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldIdentifierContext differentiates from other interfaces.
	IsFieldIdentifierContext()
}

type FieldIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldIdentifierContext() *FieldIdentifierContext {
	var p = new(FieldIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_fieldIdentifier
	return p
}

func (*FieldIdentifierContext) IsFieldIdentifierContext() {}

func NewFieldIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldIdentifierContext {
	var p = new(FieldIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_fieldIdentifier

	return p
}

func (s *FieldIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldIdentifierContext) AllStrictIdentifier() []IStrictIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem())
	var tst = make([]IStrictIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStrictIdentifierContext)
		}
	}

	return tst
}

func (s *FieldIdentifierContext) StrictIdentifier(i int) IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *FieldIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ElasticSQLParserDOT)
}

func (s *FieldIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOT, i)
}

func (s *FieldIdentifierContext) MUL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMUL, 0)
}

func (s *FieldIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterFieldIdentifier(s)
	}
}

func (s *FieldIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitFieldIdentifier(s)
	}
}

func (s *FieldIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitFieldIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) FieldIdentifier() (localctx IFieldIdentifierContext) {
	localctx = NewFieldIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, ElasticSQLParserRULE_fieldIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1716)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserINNER_HIT, ElasticSQLParserRESCORE, ElasticSQLParserWINDOWS, ElasticSQLParserCOLLAPSE, ElasticSQLParserSCORE, ElasticSQLParserSQL, ElasticSQLParserSTRUCT, ElasticSQLParserCK, ElasticSQLParserURL, ElasticSQLParserPASSWORD, ElasticSQLParserUSER, ElasticSQLParserNUMBER, ElasticSQLParserSTRING, ElasticSQLParserGROUP, ElasticSQLParserTEMPLATE, ElasticSQLParserALL, ElasticSQLParserNOT, ElasticSQLParserINTO, ElasticSQLParserTO, ElasticSQLParserEXCLUDE, ElasticSQLParserINCLUDE, ElasticSQLParserID, ElasticSQLParserSLICE, ElasticSQLParserJSON, ElasticSQLParserCSV, ElasticSQLParserEXCEL, ElasticSQLParserSEP, ElasticSQLParserSCRIPT, ElasticSQLParserLANG, ElasticSQLParserRETURN, ElasticSQLParserPK, ElasticSQLParserUUID, ElasticSQLParserMEM, ElasticSQLParserRIGHT, ElasticSQLParserLEFT, ElasticSQLParserALIAS, ElasticSQLParserRLIKE, ElasticSQLParserLIKE, ElasticSQLParserIN, ElasticSQLParserOUT, ElasticSQLParserEXIST, ElasticSQLParserMISS, ElasticSQLParserQUERY_STRING, ElasticSQLParserMATCH, ElasticSQLParserMULTI_MATCH, ElasticSQLParserMATCH_PHRASE_PREFIX, ElasticSQLParserMATCH_PHRASE, ElasticSQLParserKNN, ElasticSQLParserHAS_CHILD, ElasticSQLParserHAS_PARENT, ElasticSQLParserCOUNT, ElasticSQLParserMAX, ElasticSQLParserMIN, ElasticSQLParserAVG, ElasticSQLParserSUM, ElasticSQLParserDISTINCT, ElasticSQLParserVALUE_COUNT, ElasticSQLParserPERCENTILE_RANKS, ElasticSQLParserPERCENTILES, ElasticSQLParserPERCENT, ElasticSQLParserDISTINCT_PERCENT, ElasticSQLParserTOP_HITS, ElasticSQLParserMATH, ElasticSQLParserRANGE, ElasticSQLParserINTERVAL, ElasticSQLParserFORMAT, ElasticSQLParserKEYED, ElasticSQLParserSIZE, ElasticSQLParserMISSING, ElasticSQLParserNULL, ElasticSQLParserEND, ElasticSQLParserSAMPLE, ElasticSQLParserIDS, ElasticSQLParserIDS_FILE, ElasticSQLParserPUT, ElasticSQLParserADD, ElasticSQLParserDATETIME_T, ElasticSQLParserTIMESTAMP_T, ElasticSQLParserDATE_T, ElasticSQLParserTIME_T, ElasticSQLParserLOCAL, ElasticSQLParserDATA, ElasticSQLParserLIST, ElasticSQLParserSEPARATED, ElasticSQLParserANALYZE, ElasticSQLParserNLP, ElasticSQLParserENABLE, ElasticSQLParserSEGMENT, ElasticSQLParserNAME, ElasticSQLParserORG, ElasticSQLParserLOC, ElasticSQLParserTIME, ElasticSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1707)
			p.StrictIdentifier()
		}
		p.SetState(1712)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1708)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ElasticSQLParserT__11 || _la == ElasticSQLParserDOT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1709)
					p.StrictIdentifier()
				}

			}
			p.SetState(1714)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())
		}

	case ElasticSQLParserMUL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1715)
			p.Match(ElasticSQLParserMUL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexIdentifierContext is an interface to support dynamic dispatch.
type IIndexIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex returns the index rule contexts.
	GetIndex() IIndexNameContext

	// GetIndexType returns the indexType rule contexts.
	GetIndexType() IStrictIdentifierContext

	// SetIndex sets the index rule contexts.
	SetIndex(IIndexNameContext)

	// SetIndexType sets the indexType rule contexts.
	SetIndexType(IStrictIdentifierContext)

	// IsIndexIdentifierContext differentiates from other interfaces.
	IsIndexIdentifierContext()
}

type IndexIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	index     IIndexNameContext
	indexType IStrictIdentifierContext
}

func NewEmptyIndexIdentifierContext() *IndexIdentifierContext {
	var p = new(IndexIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_indexIdentifier
	return p
}

func (*IndexIdentifierContext) IsIndexIdentifierContext() {}

func NewIndexIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexIdentifierContext {
	var p = new(IndexIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_indexIdentifier

	return p
}

func (s *IndexIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexIdentifierContext) GetIndex() IIndexNameContext { return s.index }

func (s *IndexIdentifierContext) GetIndexType() IStrictIdentifierContext { return s.indexType }

func (s *IndexIdentifierContext) SetIndex(v IIndexNameContext) { s.index = v }

func (s *IndexIdentifierContext) SetIndexType(v IStrictIdentifierContext) { s.indexType = v }

func (s *IndexIdentifierContext) IndexName() IIndexNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexNameContext)
}

func (s *IndexIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOT, 0)
}

func (s *IndexIdentifierContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *IndexIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterIndexIdentifier(s)
	}
}

func (s *IndexIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitIndexIdentifier(s)
	}
}

func (s *IndexIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitIndexIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) IndexIdentifier() (localctx IIndexIdentifierContext) {
	localctx = NewIndexIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, ElasticSQLParserRULE_indexIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1718)

		var _x = p.IndexName()

		localctx.(*IndexIdentifierContext).index = _x
	}
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ElasticSQLParserDOT {
		{
			p.SetState(1719)
			p.Match(ElasticSQLParserDOT)
		}
		{
			p.SetState(1720)

			var _x = p.StrictIdentifier()

			localctx.(*IndexIdentifierContext).indexType = _x
		}

	}

	return localctx
}

// IIndexNameContext is an interface to support dynamic dispatch.
type IIndexNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexNameContext differentiates from other interfaces.
	IsIndexNameContext()
}

type IndexNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexNameContext() *IndexNameContext {
	var p = new(IndexNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_indexName
	return p
}

func (*IndexNameContext) IsIndexNameContext() {}

func NewIndexNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexNameContext {
	var p = new(IndexNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_indexName

	return p
}

func (s *IndexNameContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDENTIFIER, 0)
}

func (s *IndexNameContext) MUL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMUL, 0)
}

func (s *IndexNameContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *IndexNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterIndexName(s)
	}
}

func (s *IndexNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitIndexName(s)
	}
}

func (s *IndexNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitIndexName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) IndexName() (localctx IIndexNameContext) {
	localctx = NewIndexNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, ElasticSQLParserRULE_indexName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1728)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1723)
			p.Match(ElasticSQLParserIDENTIFIER)
		}
		p.SetState(1725)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1724)
				p.Match(ElasticSQLParserMUL)
			}

		}

	case ElasticSQLParserQUOTASTR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1727)
			p.Match(ElasticSQLParserQUOTASTR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAsIdentifierContext is an interface to support dynamic dispatch.
type IAsIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsIdentifierContext differentiates from other interfaces.
	IsAsIdentifierContext()
}

type AsIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsIdentifierContext() *AsIdentifierContext {
	var p = new(AsIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_asIdentifier
	return p
}

func (*AsIdentifierContext) IsAsIdentifierContext() {}

func NewAsIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsIdentifierContext {
	var p = new(AsIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_asIdentifier

	return p
}

func (s *AsIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AsIdentifierContext) StrictIdentifier() IStrictIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrictIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrictIdentifierContext)
}

func (s *AsIdentifierContext) Str() IStrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStrContext)
}

func (s *AsIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterAsIdentifier(s)
	}
}

func (s *AsIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitAsIdentifier(s)
	}
}

func (s *AsIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitAsIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) AsIdentifier() (localctx IAsIdentifierContext) {
	localctx = NewAsIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, ElasticSQLParserRULE_asIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1732)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1730)
			p.StrictIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1731)
			p.Str()
		}

	}

	return localctx
}

// IStrictIdentifierContext is an interface to support dynamic dispatch.
type IStrictIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStrictIdentifierContext differentiates from other interfaces.
	IsStrictIdentifierContext()
}

type StrictIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStrictIdentifierContext() *StrictIdentifierContext {
	var p = new(StrictIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_strictIdentifier
	return p
}

func (*StrictIdentifierContext) IsStrictIdentifierContext() {}

func NewStrictIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StrictIdentifierContext {
	var p = new(StrictIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_strictIdentifier

	return p
}

func (s *StrictIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *StrictIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDENTIFIER, 0)
}

func (s *StrictIdentifierContext) NonReserved() INonReservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonReservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonReservedContext)
}

func (s *StrictIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StrictIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StrictIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterStrictIdentifier(s)
	}
}

func (s *StrictIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitStrictIdentifier(s)
	}
}

func (s *StrictIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitStrictIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) StrictIdentifier() (localctx IStrictIdentifierContext) {
	localctx = NewStrictIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, ElasticSQLParserRULE_strictIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1736)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ElasticSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1734)
			p.Match(ElasticSQLParserIDENTIFIER)
		}

	case ElasticSQLParserINNER_HIT, ElasticSQLParserRESCORE, ElasticSQLParserWINDOWS, ElasticSQLParserCOLLAPSE, ElasticSQLParserSCORE, ElasticSQLParserSQL, ElasticSQLParserSTRUCT, ElasticSQLParserCK, ElasticSQLParserURL, ElasticSQLParserPASSWORD, ElasticSQLParserUSER, ElasticSQLParserNUMBER, ElasticSQLParserSTRING, ElasticSQLParserGROUP, ElasticSQLParserTEMPLATE, ElasticSQLParserALL, ElasticSQLParserNOT, ElasticSQLParserINTO, ElasticSQLParserTO, ElasticSQLParserEXCLUDE, ElasticSQLParserINCLUDE, ElasticSQLParserID, ElasticSQLParserSLICE, ElasticSQLParserJSON, ElasticSQLParserCSV, ElasticSQLParserEXCEL, ElasticSQLParserSEP, ElasticSQLParserSCRIPT, ElasticSQLParserLANG, ElasticSQLParserRETURN, ElasticSQLParserPK, ElasticSQLParserUUID, ElasticSQLParserMEM, ElasticSQLParserRIGHT, ElasticSQLParserLEFT, ElasticSQLParserALIAS, ElasticSQLParserRLIKE, ElasticSQLParserLIKE, ElasticSQLParserIN, ElasticSQLParserOUT, ElasticSQLParserEXIST, ElasticSQLParserMISS, ElasticSQLParserQUERY_STRING, ElasticSQLParserMATCH, ElasticSQLParserMULTI_MATCH, ElasticSQLParserMATCH_PHRASE_PREFIX, ElasticSQLParserMATCH_PHRASE, ElasticSQLParserKNN, ElasticSQLParserHAS_CHILD, ElasticSQLParserHAS_PARENT, ElasticSQLParserCOUNT, ElasticSQLParserMAX, ElasticSQLParserMIN, ElasticSQLParserAVG, ElasticSQLParserSUM, ElasticSQLParserDISTINCT, ElasticSQLParserVALUE_COUNT, ElasticSQLParserPERCENTILE_RANKS, ElasticSQLParserPERCENTILES, ElasticSQLParserPERCENT, ElasticSQLParserDISTINCT_PERCENT, ElasticSQLParserTOP_HITS, ElasticSQLParserMATH, ElasticSQLParserRANGE, ElasticSQLParserINTERVAL, ElasticSQLParserFORMAT, ElasticSQLParserKEYED, ElasticSQLParserSIZE, ElasticSQLParserMISSING, ElasticSQLParserNULL, ElasticSQLParserEND, ElasticSQLParserSAMPLE, ElasticSQLParserIDS, ElasticSQLParserIDS_FILE, ElasticSQLParserPUT, ElasticSQLParserADD, ElasticSQLParserDATETIME_T, ElasticSQLParserTIMESTAMP_T, ElasticSQLParserDATE_T, ElasticSQLParserTIME_T, ElasticSQLParserLOCAL, ElasticSQLParserDATA, ElasticSQLParserLIST, ElasticSQLParserSEPARATED, ElasticSQLParserANALYZE, ElasticSQLParserNLP, ElasticSQLParserENABLE, ElasticSQLParserSEGMENT, ElasticSQLParserNAME, ElasticSQLParserORG, ElasticSQLParserLOC, ElasticSQLParserTIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1735)
			p.NonReserved()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStrContext is an interface to support dynamic dispatch.
type IStrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStrContext differentiates from other interfaces.
	IsStrContext()
}

type StrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStrContext() *StrContext {
	var p = new(StrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_str
	return p
}

func (*StrContext) IsStrContext() {}

func NewStrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StrContext {
	var p = new(StrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_str

	return p
}

func (s *StrContext) GetParser() antlr.Parser { return s.parser }

func (s *StrContext) QUOTASTR() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUOTASTR, 0)
}

func (s *StrContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDENTIFIER, 0)
}

func (s *StrContext) EXT_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXT_IDENTIFIER, 0)
}

func (s *StrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterStr(s)
	}
}

func (s *StrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitStr(s)
	}
}

func (s *StrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitStr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Str() (localctx IStrContext) {
	localctx = NewStrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, ElasticSQLParserRULE_str)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1738)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-191)&-(0x1f+1)) == 0 && ((1<<uint((_la-191)))&((1<<(ElasticSQLParserQUOTASTR-191))|(1<<(ElasticSQLParserIDENTIFIER-191))|(1<<(ElasticSQLParserEXT_IDENTIFIER-191)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNum returns the num token.
	GetNum() antlr.Token

	// SetNum sets the num token.
	SetNum(antlr.Token)

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	num    antlr.Token
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) GetNum() antlr.Token { return s.num }

func (s *NumberContext) SetNum(v antlr.Token) { s.num = v }

func (s *NumberContext) LONG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLONG, 0)
}

func (s *NumberContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDOUBLE, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (s *NumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, ElasticSQLParserRULE_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1740)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*NumberContext).num = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserLONG || _la == ElasticSQLParserDOUBLE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*NumberContext).num = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBooleanValueContext is an interface to support dynamic dispatch.
type IBooleanValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanValueContext differentiates from other interfaces.
	IsBooleanValueContext()
}

type BooleanValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanValueContext() *BooleanValueContext {
	var p = new(BooleanValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_booleanValue
	return p
}

func (*BooleanValueContext) IsBooleanValueContext() {}

func NewBooleanValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanValueContext {
	var p = new(BooleanValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_booleanValue

	return p
}

func (s *BooleanValueContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanValueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTRUE, 0)
}

func (s *BooleanValueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFALSE, 0)
}

func (s *BooleanValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterBooleanValue(s)
	}
}

func (s *BooleanValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitBooleanValue(s)
	}
}

func (s *BooleanValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitBooleanValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) BooleanValue() (localctx IBooleanValueContext) {
	localctx = NewBooleanValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, ElasticSQLParserRULE_booleanValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1742)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ElasticSQLParserFALSE || _la == ElasticSQLParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INonReservedContext is an interface to support dynamic dispatch.
type INonReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonReservedContext differentiates from other interfaces.
	IsNonReservedContext()
}

type NonReservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonReservedContext() *NonReservedContext {
	var p = new(NonReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ElasticSQLParserRULE_nonReserved
	return p
}

func (*NonReservedContext) IsNonReservedContext() {}

func NewNonReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonReservedContext {
	var p = new(NonReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ElasticSQLParserRULE_nonReserved

	return p
}

func (s *NonReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *NonReservedContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNUMBER, 0)
}

func (s *NonReservedContext) STRING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTRING, 0)
}

func (s *NonReservedContext) GROUP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserGROUP, 0)
}

func (s *NonReservedContext) SCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCORE, 0)
}

func (s *NonReservedContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSTRUCT, 0)
}

func (s *NonReservedContext) NOT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNOT, 0)
}

func (s *NonReservedContext) INTO() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTO, 0)
}

func (s *NonReservedContext) TO() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTO, 0)
}

func (s *NonReservedContext) ID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserID, 0)
}

func (s *NonReservedContext) SLICE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSLICE, 0)
}

func (s *NonReservedContext) JSON() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserJSON, 0)
}

func (s *NonReservedContext) CSV() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCSV, 0)
}

func (s *NonReservedContext) SEP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEP, 0)
}

func (s *NonReservedContext) SCRIPT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSCRIPT, 0)
}

func (s *NonReservedContext) RETURN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRETURN, 0)
}

func (s *NonReservedContext) INNER_HIT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINNER_HIT, 0)
}

func (s *NonReservedContext) RLIKE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRLIKE, 0)
}

func (s *NonReservedContext) LIKE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIKE, 0)
}

func (s *NonReservedContext) IN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIN, 0)
}

func (s *NonReservedContext) OUT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserOUT, 0)
}

func (s *NonReservedContext) EXIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXIST, 0)
}

func (s *NonReservedContext) MISS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISS, 0)
}

func (s *NonReservedContext) QUERY_STRING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserQUERY_STRING, 0)
}

func (s *NonReservedContext) HAS_CHILD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_CHILD, 0)
}

func (s *NonReservedContext) HAS_PARENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserHAS_PARENT, 0)
}

func (s *NonReservedContext) MATCH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH, 0)
}

func (s *NonReservedContext) MULTI_MATCH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMULTI_MATCH, 0)
}

func (s *NonReservedContext) MATH() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATH, 0)
}

func (s *NonReservedContext) MATCH_PHRASE_PREFIX() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH_PHRASE_PREFIX, 0)
}

func (s *NonReservedContext) MATCH_PHRASE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMATCH_PHRASE, 0)
}

func (s *NonReservedContext) KNN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserKNN, 0)
}

func (s *NonReservedContext) SIZE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSIZE, 0)
}

func (s *NonReservedContext) COUNT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCOUNT, 0)
}

func (s *NonReservedContext) MAX() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMAX, 0)
}

func (s *NonReservedContext) MIN() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMIN, 0)
}

func (s *NonReservedContext) AVG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserAVG, 0)
}

func (s *NonReservedContext) SUM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSUM, 0)
}

func (s *NonReservedContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDISTINCT, 0)
}

func (s *NonReservedContext) VALUE_COUNT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserVALUE_COUNT, 0)
}

func (s *NonReservedContext) PERCENTILE_RANKS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENTILE_RANKS, 0)
}

func (s *NonReservedContext) PERCENTILES() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENTILES, 0)
}

func (s *NonReservedContext) TOP_HITS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTOP_HITS, 0)
}

func (s *NonReservedContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPERCENT, 0)
}

func (s *NonReservedContext) DISTINCT_PERCENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDISTINCT_PERCENT, 0)
}

func (s *NonReservedContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINTERVAL, 0)
}

func (s *NonReservedContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserFORMAT, 0)
}

func (s *NonReservedContext) KEYED() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserKEYED, 0)
}

func (s *NonReservedContext) MISSING() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMISSING, 0)
}

func (s *NonReservedContext) NULL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNULL, 0)
}

func (s *NonReservedContext) END() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEND, 0)
}

func (s *NonReservedContext) RANGE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRANGE, 0)
}

func (s *NonReservedContext) LANG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLANG, 0)
}

func (s *NonReservedContext) TIME() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIME, 0)
}

func (s *NonReservedContext) RESCORE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRESCORE, 0)
}

func (s *NonReservedContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserWINDOWS, 0)
}

func (s *NonReservedContext) COLLAPSE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCOLLAPSE, 0)
}

func (s *NonReservedContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXCLUDE, 0)
}

func (s *NonReservedContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserINCLUDE, 0)
}

func (s *NonReservedContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSAMPLE, 0)
}

func (s *NonReservedContext) IDS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS, 0)
}

func (s *NonReservedContext) IDS_FILE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserIDS_FILE, 0)
}

func (s *NonReservedContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOCAL, 0)
}

func (s *NonReservedContext) DATA() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATA, 0)
}

func (s *NonReservedContext) SEPARATED() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEPARATED, 0)
}

func (s *NonReservedContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserANALYZE, 0)
}

func (s *NonReservedContext) ADD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserADD, 0)
}

func (s *NonReservedContext) PUT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPUT, 0)
}

func (s *NonReservedContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTEMPLATE, 0)
}

func (s *NonReservedContext) LIST() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLIST, 0)
}

func (s *NonReservedContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALIAS, 0)
}

func (s *NonReservedContext) PK() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPK, 0)
}

func (s *NonReservedContext) UUID() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUUID, 0)
}

func (s *NonReservedContext) SQL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSQL, 0)
}

func (s *NonReservedContext) CK() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserCK, 0)
}

func (s *NonReservedContext) URL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserURL, 0)
}

func (s *NonReservedContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserPASSWORD, 0)
}

func (s *NonReservedContext) USER() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserUSER, 0)
}

func (s *NonReservedContext) DATE_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATE_T, 0)
}

func (s *NonReservedContext) TIME_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIME_T, 0)
}

func (s *NonReservedContext) DATETIME_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserDATETIME_T, 0)
}

func (s *NonReservedContext) TIMESTAMP_T() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserTIMESTAMP_T, 0)
}

func (s *NonReservedContext) EXCEL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserEXCEL, 0)
}

func (s *NonReservedContext) MEM() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserMEM, 0)
}

func (s *NonReservedContext) LEFT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLEFT, 0)
}

func (s *NonReservedContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserRIGHT, 0)
}

func (s *NonReservedContext) ALL() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserALL, 0)
}

func (s *NonReservedContext) ORG() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserORG, 0)
}

func (s *NonReservedContext) NLP() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNLP, 0)
}

func (s *NonReservedContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserENABLE, 0)
}

func (s *NonReservedContext) SEGMENT() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserSEGMENT, 0)
}

func (s *NonReservedContext) NAME() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserNAME, 0)
}

func (s *NonReservedContext) LOC() antlr.TerminalNode {
	return s.GetToken(ElasticSQLParserLOC, 0)
}

func (s *NonReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.EnterNonReserved(s)
	}
}

func (s *NonReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ElasticSQLListener); ok {
		listenerT.ExitNonReserved(s)
	}
}

func (s *NonReservedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ElasticSQLVisitor:
		return t.VisitNonReserved(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ElasticSQLParser) NonReserved() (localctx INonReservedContext) {
	localctx = NewNonReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, ElasticSQLParserRULE_nonReserved)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1744)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(ElasticSQLParserINNER_HIT-18))|(1<<(ElasticSQLParserRESCORE-18))|(1<<(ElasticSQLParserWINDOWS-18))|(1<<(ElasticSQLParserCOLLAPSE-18))|(1<<(ElasticSQLParserSCORE-18))|(1<<(ElasticSQLParserSQL-18))|(1<<(ElasticSQLParserSTRUCT-18))|(1<<(ElasticSQLParserCK-18))|(1<<(ElasticSQLParserURL-18))|(1<<(ElasticSQLParserPASSWORD-18))|(1<<(ElasticSQLParserUSER-18))|(1<<(ElasticSQLParserNUMBER-18))|(1<<(ElasticSQLParserSTRING-18))|(1<<(ElasticSQLParserGROUP-18)))) != 0) || (((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(ElasticSQLParserTEMPLATE-54))|(1<<(ElasticSQLParserALL-54))|(1<<(ElasticSQLParserNOT-54))|(1<<(ElasticSQLParserINTO-54))|(1<<(ElasticSQLParserTO-54))|(1<<(ElasticSQLParserEXCLUDE-54))|(1<<(ElasticSQLParserINCLUDE-54))|(1<<(ElasticSQLParserID-54))|(1<<(ElasticSQLParserSLICE-54))|(1<<(ElasticSQLParserJSON-54))|(1<<(ElasticSQLParserCSV-54))|(1<<(ElasticSQLParserEXCEL-54))|(1<<(ElasticSQLParserSEP-54))|(1<<(ElasticSQLParserSCRIPT-54))|(1<<(ElasticSQLParserLANG-54))|(1<<(ElasticSQLParserRETURN-54))|(1<<(ElasticSQLParserPK-54))|(1<<(ElasticSQLParserUUID-54))|(1<<(ElasticSQLParserMEM-54))|(1<<(ElasticSQLParserRIGHT-54)))) != 0) || (((_la-86)&-(0x1f+1)) == 0 && ((1<<uint((_la-86)))&((1<<(ElasticSQLParserLEFT-86))|(1<<(ElasticSQLParserALIAS-86))|(1<<(ElasticSQLParserRLIKE-86))|(1<<(ElasticSQLParserLIKE-86))|(1<<(ElasticSQLParserIN-86))|(1<<(ElasticSQLParserOUT-86))|(1<<(ElasticSQLParserEXIST-86))|(1<<(ElasticSQLParserMISS-86))|(1<<(ElasticSQLParserQUERY_STRING-86))|(1<<(ElasticSQLParserMATCH-86))|(1<<(ElasticSQLParserMULTI_MATCH-86))|(1<<(ElasticSQLParserMATCH_PHRASE_PREFIX-86))|(1<<(ElasticSQLParserMATCH_PHRASE-86))|(1<<(ElasticSQLParserKNN-86))|(1<<(ElasticSQLParserHAS_CHILD-86))|(1<<(ElasticSQLParserHAS_PARENT-86))|(1<<(ElasticSQLParserCOUNT-86))|(1<<(ElasticSQLParserMAX-86))|(1<<(ElasticSQLParserMIN-86))|(1<<(ElasticSQLParserAVG-86))|(1<<(ElasticSQLParserSUM-86))|(1<<(ElasticSQLParserDISTINCT-86))|(1<<(ElasticSQLParserVALUE_COUNT-86)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(ElasticSQLParserPERCENTILE_RANKS-118))|(1<<(ElasticSQLParserPERCENTILES-118))|(1<<(ElasticSQLParserPERCENT-118))|(1<<(ElasticSQLParserDISTINCT_PERCENT-118))|(1<<(ElasticSQLParserTOP_HITS-118))|(1<<(ElasticSQLParserMATH-118))|(1<<(ElasticSQLParserRANGE-118))|(1<<(ElasticSQLParserINTERVAL-118))|(1<<(ElasticSQLParserFORMAT-118))|(1<<(ElasticSQLParserKEYED-118))|(1<<(ElasticSQLParserSIZE-118))|(1<<(ElasticSQLParserMISSING-118))|(1<<(ElasticSQLParserNULL-118))|(1<<(ElasticSQLParserEND-118))|(1<<(ElasticSQLParserSAMPLE-118))|(1<<(ElasticSQLParserIDS-118))|(1<<(ElasticSQLParserIDS_FILE-118))|(1<<(ElasticSQLParserPUT-118))|(1<<(ElasticSQLParserADD-118)))) != 0) || (((_la-158)&-(0x1f+1)) == 0 && ((1<<uint((_la-158)))&((1<<(ElasticSQLParserDATETIME_T-158))|(1<<(ElasticSQLParserTIMESTAMP_T-158))|(1<<(ElasticSQLParserDATE_T-158))|(1<<(ElasticSQLParserTIME_T-158))|(1<<(ElasticSQLParserLOCAL-158))|(1<<(ElasticSQLParserDATA-158))|(1<<(ElasticSQLParserLIST-158))|(1<<(ElasticSQLParserSEPARATED-158))|(1<<(ElasticSQLParserANALYZE-158))|(1<<(ElasticSQLParserNLP-158))|(1<<(ElasticSQLParserENABLE-158))|(1<<(ElasticSQLParserSEGMENT-158))|(1<<(ElasticSQLParserNAME-158))|(1<<(ElasticSQLParserORG-158))|(1<<(ElasticSQLParserLOC-158))|(1<<(ElasticSQLParserTIME-158)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *ElasticSQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 13:
		var t *LogicalExprContext = nil
		if localctx != nil {
			t = localctx.(*LogicalExprContext)
		}
		return p.LogicalExpr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ElasticSQLParser) LogicalExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
